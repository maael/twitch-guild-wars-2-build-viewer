;(() => {
  var __create = Object.create
  var __defProp = Object.defineProperty
  var __defProps = Object.defineProperties
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors
  var __getOwnPropNames = Object.getOwnPropertyNames
  var __getOwnPropSymbols = Object.getOwnPropertySymbols
  var __getProtoOf = Object.getPrototypeOf
  var __hasOwnProp = Object.prototype.hasOwnProperty
  var __propIsEnum = Object.prototype.propertyIsEnumerable
  var __defNormalProp = (obj, key, value) =>
    key in obj
      ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value })
      : (obj[key] = value)
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop])
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop])
      }
    return a
  }
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b))
  var __markAsModule = (target) => __defProp(target, '__esModule', { value: true })
  var __commonJS = (cb, mod) =>
    function __require() {
      return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports
    }
  var __export = (target, all) => {
    for (var name in all) __defProp(target, name, { get: all[name], enumerable: true })
  }
  var __reExport = (target, module2, desc) => {
    if ((module2 && typeof module2 === 'object') || typeof module2 === 'function') {
      for (let key of __getOwnPropNames(module2))
        if (!__hasOwnProp.call(target, key) && key !== 'default')
          __defProp(target, key, {
            get: () => module2[key],
            enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable,
          })
    }
    return target
  }
  var __toModule = (module2) => {
    return __reExport(
      __markAsModule(
        __defProp(
          module2 != null ? __create(__getProtoOf(module2)) : {},
          'default',
          module2 && module2.__esModule && 'default' in module2
            ? { get: () => module2.default, enumerable: true }
            : { value: module2, enumerable: true }
        )
      ),
      module2
    )
  }

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    'node_modules/object-assign/index.js'(exports, module2) {
      'use strict'
      var getOwnPropertySymbols = Object.getOwnPropertySymbols
      var hasOwnProperty = Object.prototype.hasOwnProperty
      var propIsEnumerable = Object.prototype.propertyIsEnumerable
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError('Object.assign cannot be called with null or undefined')
        }
        return Object(val)
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false
          }
          var test1 = new String('abc')
          test1[5] = 'de'
          if (Object.getOwnPropertyNames(test1)[0] === '5') {
            return false
          }
          var test2 = {}
          for (var i = 0; i < 10; i++) {
            test2['_' + String.fromCharCode(i)] = i
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
            return test2[n]
          })
          if (order2.join('') !== '0123456789') {
            return false
          }
          var test3 = {}
          'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
            test3[letter] = letter
          })
          if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
            return false
          }
          return true
        } catch (err) {
          return false
        }
      }
      module2.exports = shouldUseNative()
        ? Object.assign
        : function (target, source) {
            var from
            var to = toObject(target)
            var symbols
            for (var s = 1; s < arguments.length; s++) {
              from = Object(arguments[s])
              for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                  to[key] = from[key]
                }
              }
              if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from)
                for (var i = 0; i < symbols.length; i++) {
                  if (propIsEnumerable.call(from, symbols[i])) {
                    to[symbols[i]] = from[symbols[i]]
                  }
                }
              }
            }
            return to
          }
    },
  })

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    'node_modules/react/cjs/react.development.js'(exports) {
      'use strict'
      if (true) {
        ;(function () {
          'use strict'
          var _assign = require_object_assign()
          var ReactVersion = '17.0.2'
          var REACT_ELEMENT_TYPE = 60103
          var REACT_PORTAL_TYPE = 60106
          exports.Fragment = 60107
          exports.StrictMode = 60108
          exports.Profiler = 60114
          var REACT_PROVIDER_TYPE = 60109
          var REACT_CONTEXT_TYPE = 60110
          var REACT_FORWARD_REF_TYPE = 60112
          exports.Suspense = 60113
          var REACT_SUSPENSE_LIST_TYPE = 60120
          var REACT_MEMO_TYPE = 60115
          var REACT_LAZY_TYPE = 60116
          var REACT_BLOCK_TYPE = 60121
          var REACT_SERVER_BLOCK_TYPE = 60122
          var REACT_FUNDAMENTAL_TYPE = 60117
          var REACT_SCOPE_TYPE = 60119
          var REACT_OPAQUE_ID_TYPE = 60128
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129
          var REACT_OFFSCREEN_TYPE = 60130
          var REACT_LEGACY_HIDDEN_TYPE = 60131
          if (typeof Symbol === 'function' && Symbol.for) {
            var symbolFor = Symbol.for
            REACT_ELEMENT_TYPE = symbolFor('react.element')
            REACT_PORTAL_TYPE = symbolFor('react.portal')
            exports.Fragment = symbolFor('react.fragment')
            exports.StrictMode = symbolFor('react.strict_mode')
            exports.Profiler = symbolFor('react.profiler')
            REACT_PROVIDER_TYPE = symbolFor('react.provider')
            REACT_CONTEXT_TYPE = symbolFor('react.context')
            REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref')
            exports.Suspense = symbolFor('react.suspense')
            REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list')
            REACT_MEMO_TYPE = symbolFor('react.memo')
            REACT_LAZY_TYPE = symbolFor('react.lazy')
            REACT_BLOCK_TYPE = symbolFor('react.block')
            REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block')
            REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental')
            REACT_SCOPE_TYPE = symbolFor('react.scope')
            REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id')
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode')
            REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen')
            REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden')
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator
          var FAUX_ITERATOR_SYMBOL = '@@iterator'
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== 'object') {
              return null
            }
            var maybeIterator =
              (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) || maybeIterable[FAUX_ITERATOR_SYMBOL]
            if (typeof maybeIterator === 'function') {
              return maybeIterator
            }
            return null
          }
          var ReactCurrentDispatcher = {
            current: null,
          }
          var ReactCurrentBatchConfig = {
            transition: 0,
          }
          var ReactCurrentOwner = {
            current: null,
          }
          var ReactDebugCurrentFrame = {}
          var currentExtraStackFrame = null
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
              {
                currentExtraStackFrame = stack
              }
            }
            ReactDebugCurrentFrame.getCurrentStack = null
            ReactDebugCurrentFrame.getStackAddendum = function () {
              var stack = ''
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack
              if (impl) {
                stack += impl() || ''
              }
              return stack
            }
          }
          var IsSomeRendererActing = {
            current: false,
          }
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign,
          }
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame
          }
          function warn(format) {
            {
              for (
                var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;
                _key < _len;
                _key++
              ) {
                args[_key - 1] = arguments[_key]
              }
              printWarning('warn', format, args)
            }
          }
          function error(format) {
            {
              for (
                var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;
                _key2 < _len2;
                _key2++
              ) {
                args[_key2 - 1] = arguments[_key2]
              }
              printWarning('error', format, args)
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame
              var stack = ReactDebugCurrentFrame2.getStackAddendum()
              if (stack !== '') {
                format += '%s'
                args = args.concat([stack])
              }
              var argsWithFormat = args.map(function (item) {
                return '' + item
              })
              argsWithFormat.unshift('Warning: ' + format)
              Function.prototype.apply.call(console[level], console, argsWithFormat)
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {}
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor
              var componentName = (_constructor && (_constructor.displayName || _constructor.name)) || 'ReactClass'
              var warningKey = componentName + '.' + callerName
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return
              }
              error(
                "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
                callerName,
                componentName
              )
              didWarnStateUpdateForUnmountedComponent[warningKey] = true
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function (publicInstance) {
              return false
            },
            enqueueForceUpdate: function (publicInstance, callback, callerName) {
              warnNoop(publicInstance, 'forceUpdate')
            },
            enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, 'replaceState')
            },
            enqueueSetState: function (publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, 'setState')
            },
          }
          var emptyObject = {}
          {
            Object.freeze(emptyObject)
          }
          function Component2(props, context, updater) {
            this.props = props
            this.context = context
            this.refs = emptyObject
            this.updater = updater || ReactNoopUpdateQueue
          }
          Component2.prototype.isReactComponent = {}
          Component2.prototype.setState = function (partialState, callback) {
            if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
              {
                throw Error(
                  'setState(...): takes an object of state variables to update or a function which returns an object of state variables.'
                )
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, 'setState')
          }
          Component2.prototype.forceUpdate = function (callback) {
            this.updater.enqueueForceUpdate(this, callback, 'forceUpdate')
          }
          {
            var deprecatedAPIs = {
              isMounted: [
                'isMounted',
                'Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.',
              ],
              replaceState: [
                'replaceState',
                'Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).',
              ],
            }
            var defineDeprecationWarning = function (methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function () {
                  warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1])
                  return void 0
                },
              })
            }
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName])
              }
            }
          }
          function ComponentDummy() {}
          ComponentDummy.prototype = Component2.prototype
          function PureComponent(props, context, updater) {
            this.props = props
            this.context = context
            this.refs = emptyObject
            this.updater = updater || ReactNoopUpdateQueue
          }
          var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy())
          pureComponentPrototype.constructor = PureComponent
          _assign(pureComponentPrototype, Component2.prototype)
          pureComponentPrototype.isPureReactComponent = true
          function createRef() {
            var refObject = {
              current: null,
            }
            {
              Object.seal(refObject)
            }
            return refObject
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || ''
            return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName)
          }
          function getContextName(type) {
            return type.displayName || 'Context'
          }
          function getComponentName(type) {
            if (type == null) {
              return null
            }
            {
              if (typeof type.tag === 'number') {
                error(
                  'Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.'
                )
              }
            }
            if (typeof type === 'function') {
              return type.displayName || type.name || null
            }
            if (typeof type === 'string') {
              return type
            }
            switch (type) {
              case exports.Fragment:
                return 'Fragment'
              case REACT_PORTAL_TYPE:
                return 'Portal'
              case exports.Profiler:
                return 'Profiler'
              case exports.StrictMode:
                return 'StrictMode'
              case exports.Suspense:
                return 'Suspense'
              case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList'
            }
            if (typeof type === 'object') {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type
                  return getContextName(context) + '.Consumer'
                case REACT_PROVIDER_TYPE:
                  var provider = type
                  return getContextName(provider._context) + '.Provider'
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, 'ForwardRef')
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type)
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render)
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type
                  var payload = lazyComponent._payload
                  var init3 = lazyComponent._init
                  try {
                    return getComponentName(init3(payload))
                  } catch (x) {
                    return null
                  }
                }
              }
            }
            return null
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true,
          }
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs
          {
            didWarnAboutStringRefs = {}
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, 'ref')) {
                var getter = Object.getOwnPropertyDescriptor(config, 'ref').get
                if (getter && getter.isReactWarning) {
                  return false
                }
              }
            }
            return config.ref !== void 0
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, 'key')) {
                var getter = Object.getOwnPropertyDescriptor(config, 'key').get
                if (getter && getter.isReactWarning) {
                  return false
                }
              }
            }
            return config.key !== void 0
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function () {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true
                  error(
                    '%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)',
                    displayName
                  )
                }
              }
            }
            warnAboutAccessingKey.isReactWarning = true
            Object.defineProperty(props, 'key', {
              get: warnAboutAccessingKey,
              configurable: true,
            })
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function () {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true
                  error(
                    '%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)',
                    displayName
                  )
                }
              }
            }
            warnAboutAccessingRef.isReactWarning = true
            Object.defineProperty(props, 'ref', {
              get: warnAboutAccessingRef,
              configurable: true,
            })
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (
                typeof config.ref === 'string' &&
                ReactCurrentOwner.current &&
                config.__self &&
                ReactCurrentOwner.current.stateNode !== config.__self
              ) {
                var componentName = getComponentName(ReactCurrentOwner.current.type)
                if (!didWarnAboutStringRefs[componentName]) {
                  error(
                    'Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',
                    componentName,
                    config.ref
                  )
                  didWarnAboutStringRefs[componentName] = true
                }
              }
            }
          }
          var ReactElement = function (type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner,
            }
            {
              element._store = {}
              Object.defineProperty(element._store, 'validated', {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false,
              })
              Object.defineProperty(element, '_self', {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2,
              })
              Object.defineProperty(element, '_source', {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source,
              })
              if (Object.freeze) {
                Object.freeze(element.props)
                Object.freeze(element)
              }
            }
            return element
          }
          function createElement3(type, config, children) {
            var propName
            var props = {}
            var key = null
            var ref = null
            var self2 = null
            var source = null
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref
                {
                  warnIfStringRefCannotBeAutoConverted(config)
                }
              }
              if (hasValidKey(config)) {
                key = '' + config.key
              }
              self2 = config.__self === void 0 ? null : config.__self
              source = config.__source === void 0 ? null : config.__source
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName]
                }
              }
            }
            var childrenLength = arguments.length - 2
            if (childrenLength === 1) {
              props.children = children
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength)
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2]
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray)
                }
              }
              props.children = childArray
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName]
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type
                if (key) {
                  defineKeyPropWarningGetter(props, displayName)
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName)
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props)
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(
              oldElement.type,
              newKey,
              oldElement.ref,
              oldElement._self,
              oldElement._source,
              oldElement._owner,
              oldElement.props
            )
            return newElement
          }
          function cloneElement(element, config, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error(
                  'React.cloneElement(...): The argument must be a React element, but you passed ' + element + '.'
                )
              }
            }
            var propName
            var props = _assign({}, element.props)
            var key = element.key
            var ref = element.ref
            var self2 = element._self
            var source = element._source
            var owner = element._owner
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref
                owner = ReactCurrentOwner.current
              }
              if (hasValidKey(config)) {
                key = '' + config.key
              }
              var defaultProps
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName]
                  } else {
                    props[propName] = config[propName]
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2
            if (childrenLength === 1) {
              props.children = children
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength)
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2]
              }
              props.children = childArray
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props)
          }
          function isValidElement2(object) {
            return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE
          }
          var SEPARATOR = '.'
          var SUBSEPARATOR = ':'
          function escape(key) {
            var escapeRegex = /[=:]/g
            var escaperLookup = {
              '=': '=0',
              ':': '=2',
            }
            var escapedString = key.replace(escapeRegex, function (match) {
              return escaperLookup[match]
            })
            return '$' + escapedString
          }
          var didWarnAboutMaps = false
          var userProvidedKeyEscapeRegex = /\/+/g
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, '$&/')
          }
          function getElementKey(element, index) {
            if (typeof element === 'object' && element !== null && element.key != null) {
              return escape('' + element.key)
            }
            return index.toString(36)
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children
            if (type === 'undefined' || type === 'boolean') {
              children = null
            }
            var invokeCallback = false
            if (children === null) {
              invokeCallback = true
            } else {
              switch (type) {
                case 'string':
                case 'number':
                  invokeCallback = true
                  break
                case 'object':
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true
                  }
              }
            }
            if (invokeCallback) {
              var _child = children
              var mappedChild = callback(_child)
              var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = ''
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + '/'
                }
                mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
                  return c
                })
              } else if (mappedChild != null) {
                if (isValidElement2(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    escapedPrefix +
                      (mappedChild.key && (!_child || _child.key !== mappedChild.key)
                        ? escapeUserProvidedKey('' + mappedChild.key) + '/'
                        : '') +
                      childKey
                  )
                }
                array.push(mappedChild)
              }
              return 1
            }
            var child
            var nextName
            var subtreeCount = 0
            var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i]
                nextName = nextNamePrefix + getElementKey(child, i)
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback)
              }
            } else {
              var iteratorFn = getIteratorFn(children)
              if (typeof iteratorFn === 'function') {
                var iterableChildren = children
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn('Using Maps as children is not supported. Use an array of keyed ReactElements instead.')
                    }
                    didWarnAboutMaps = true
                  }
                }
                var iterator = iteratorFn.call(iterableChildren)
                var step
                var ii = 0
                while (!(step = iterator.next()).done) {
                  child = step.value
                  nextName = nextNamePrefix + getElementKey(child, ii++)
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback)
                }
              } else if (type === 'object') {
                var childrenString = '' + children
                {
                  {
                    throw Error(
                      'Objects are not valid as a React child (found: ' +
                        (childrenString === '[object Object]'
                          ? 'object with keys {' + Object.keys(children).join(', ') + '}'
                          : childrenString) +
                        '). If you meant to render a collection of children, use an array instead.'
                    )
                  }
                }
              }
            }
            return subtreeCount
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children
            }
            var result = []
            var count = 0
            mapIntoArray(children, result, '', '', function (child) {
              return func.call(context, child, count++)
            })
            return result
          }
          function countChildren(children) {
            var n = 0
            mapChildren(children, function () {
              n++
            })
            return n
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(
              children,
              function () {
                forEachFunc.apply(this, arguments)
              },
              forEachContext
            )
          }
          function toArray(children) {
            return (
              mapChildren(children, function (child) {
                return child
              }) || []
            )
          }
          function onlyChild(children) {
            if (!isValidElement2(children)) {
              {
                throw Error('React.Children.only expected to receive a single React element child.')
              }
            }
            return children
          }
          function createContext2(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
                  error(
                    'createContext: Expected the optional second argument to be a function. Instead received: %s',
                    calculateChangedBits
                  )
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
            }
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context,
            }
            var hasWarnedAboutUsingNestedContextConsumers = false
            var hasWarnedAboutUsingConsumerProvider = false
            var hasWarnedAboutDisplayNameOnConsumer = false
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits,
              }
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function () {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true
                      error(
                        'Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?'
                      )
                    }
                    return context.Provider
                  },
                  set: function (_Provider) {
                    context.Provider = _Provider
                  },
                },
                _currentValue: {
                  get: function () {
                    return context._currentValue
                  },
                  set: function (_currentValue) {
                    context._currentValue = _currentValue
                  },
                },
                _currentValue2: {
                  get: function () {
                    return context._currentValue2
                  },
                  set: function (_currentValue2) {
                    context._currentValue2 = _currentValue2
                  },
                },
                _threadCount: {
                  get: function () {
                    return context._threadCount
                  },
                  set: function (_threadCount) {
                    context._threadCount = _threadCount
                  },
                },
                Consumer: {
                  get: function () {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true
                      error(
                        'Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?'
                      )
                    }
                    return context.Consumer
                  },
                },
                displayName: {
                  get: function () {
                    return context.displayName
                  },
                  set: function (displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn(
                        "Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.",
                        displayName
                      )
                      hasWarnedAboutDisplayNameOnConsumer = true
                    }
                  },
                },
              })
              context.Consumer = Consumer
            }
            {
              context._currentRenderer = null
              context._currentRenderer2 = null
            }
            return context
          }
          var Uninitialized = -1
          var Pending = 0
          var Resolved = 1
          var Rejected = 2
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result
              var thenable = ctor()
              var pending = payload
              pending._status = Pending
              pending._result = thenable
              thenable.then(
                function (moduleObject) {
                  if (payload._status === Pending) {
                    var defaultExport = moduleObject.default
                    {
                      if (defaultExport === void 0) {
                        error(
                          "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
                          moduleObject
                        )
                      }
                    }
                    var resolved = payload
                    resolved._status = Resolved
                    resolved._result = defaultExport
                  }
                },
                function (error2) {
                  if (payload._status === Pending) {
                    var rejected = payload
                    rejected._status = Rejected
                    rejected._result = error2
                  }
                }
              )
            }
            if (payload._status === Resolved) {
              return payload._result
            } else {
              throw payload._result
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor,
            }
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer,
            }
            {
              var defaultProps
              var propTypes
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function () {
                    return defaultProps
                  },
                  set: function (newDefaultProps) {
                    error(
                      'React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.'
                    )
                    defaultProps = newDefaultProps
                    Object.defineProperty(lazyType, 'defaultProps', {
                      enumerable: true,
                    })
                  },
                },
                propTypes: {
                  configurable: true,
                  get: function () {
                    return propTypes
                  },
                  set: function (newPropTypes) {
                    error(
                      'React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.'
                    )
                    propTypes = newPropTypes
                    Object.defineProperty(lazyType, 'propTypes', {
                      enumerable: true,
                    })
                  },
                },
              })
            }
            return lazyType
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error(
                  'forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).'
                )
              } else if (typeof render !== 'function') {
                error(
                  'forwardRef requires a render function but was given %s.',
                  render === null ? 'null' : typeof render
                )
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error(
                    'forwardRef render functions accept exactly two parameters: props and ref. %s',
                    render.length === 1
                      ? 'Did you forget to use the ref parameter?'
                      : 'Any additional parameter will be undefined.'
                  )
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error(
                    'forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?'
                  )
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render,
            }
            {
              var ownName
              Object.defineProperty(elementType, 'displayName', {
                enumerable: false,
                configurable: true,
                get: function () {
                  return ownName
                },
                set: function (name) {
                  ownName = name
                  if (render.displayName == null) {
                    render.displayName = name
                  }
                },
              })
            }
            return elementType
          }
          var enableScopeAPI = false
          function isValidElementType(type) {
            if (typeof type === 'string' || typeof type === 'function') {
              return true
            }
            if (
              type === exports.Fragment ||
              type === exports.Profiler ||
              type === REACT_DEBUG_TRACING_MODE_TYPE ||
              type === exports.StrictMode ||
              type === exports.Suspense ||
              type === REACT_SUSPENSE_LIST_TYPE ||
              type === REACT_LEGACY_HIDDEN_TYPE ||
              enableScopeAPI
            ) {
              return true
            }
            if (typeof type === 'object' && type !== null) {
              if (
                type.$$typeof === REACT_LAZY_TYPE ||
                type.$$typeof === REACT_MEMO_TYPE ||
                type.$$typeof === REACT_PROVIDER_TYPE ||
                type.$$typeof === REACT_CONTEXT_TYPE ||
                type.$$typeof === REACT_FORWARD_REF_TYPE ||
                type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
                type.$$typeof === REACT_BLOCK_TYPE ||
                type[0] === REACT_SERVER_BLOCK_TYPE
              ) {
                return true
              }
            }
            return false
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error(
                  'memo: The first argument must be a component. Instead received: %s',
                  type === null ? 'null' : typeof type
                )
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare,
            }
            {
              var ownName
              Object.defineProperty(elementType, 'displayName', {
                enumerable: false,
                configurable: true,
                get: function () {
                  return ownName
                },
                set: function (name) {
                  ownName = name
                  if (type.displayName == null) {
                    type.displayName = name
                  }
                },
              })
            }
            return elementType
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current
            if (!(dispatcher !== null)) {
              {
                throw Error(
                  'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.'
                )
              }
            }
            return dispatcher
          }
          function useContext4(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher()
            {
              if (unstable_observedBits !== void 0) {
                error(
                  'useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s',
                  unstable_observedBits,
                  typeof unstable_observedBits === 'number' && Array.isArray(arguments[2])
                    ? '\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks'
                    : ''
                )
              }
              if (Context._context !== void 0) {
                var realContext = Context._context
                if (realContext.Consumer === Context) {
                  error(
                    'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?'
                  )
                } else if (realContext.Provider === Context) {
                  error(
                    'Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?'
                  )
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits)
          }
          function useState4(initialState) {
            var dispatcher = resolveDispatcher()
            return dispatcher.useState(initialState)
          }
          function useReducer(reducer, initialArg, init3) {
            var dispatcher = resolveDispatcher()
            return dispatcher.useReducer(reducer, initialArg, init3)
          }
          function useRef2(initialValue) {
            var dispatcher = resolveDispatcher()
            return dispatcher.useRef(initialValue)
          }
          function useEffect4(create, deps) {
            var dispatcher = resolveDispatcher()
            return dispatcher.useEffect(create, deps)
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher()
            return dispatcher.useLayoutEffect(create, deps)
          }
          function useCallback3(callback, deps) {
            var dispatcher = resolveDispatcher()
            return dispatcher.useCallback(callback, deps)
          }
          function useMemo2(create, deps) {
            var dispatcher = resolveDispatcher()
            return dispatcher.useMemo(create, deps)
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher()
            return dispatcher.useImperativeHandle(ref, create, deps)
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher()
              return dispatcher.useDebugValue(value, formatterFn)
            }
          }
          var disabledDepth = 0
          var prevLog
          var prevInfo
          var prevWarn
          var prevError
          var prevGroup
          var prevGroupCollapsed
          var prevGroupEnd
          function disabledLog() {}
          disabledLog.__reactDisabledLog = true
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log
                prevInfo = console.info
                prevWarn = console.warn
                prevError = console.error
                prevGroup = console.group
                prevGroupCollapsed = console.groupCollapsed
                prevGroupEnd = console.groupEnd
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true,
                }
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props,
                })
              }
              disabledDepth++
            }
          }
          function reenableLogs() {
            {
              disabledDepth--
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true,
                }
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog,
                  }),
                  info: _assign({}, props, {
                    value: prevInfo,
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn,
                  }),
                  error: _assign({}, props, {
                    value: prevError,
                  }),
                  group: _assign({}, props, {
                    value: prevGroup,
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed,
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd,
                  }),
                })
              }
              if (disabledDepth < 0) {
                error('disabledDepth fell below zero. This is a bug in React. Please file an issue.')
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher
          var prefix
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error()
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/)
                  prefix = (match && match[1]) || ''
                }
              }
              return '\n' + prefix + name
            }
          }
          var reentry = false
          var componentFrameCache
          {
            var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map
            componentFrameCache = new PossiblyWeakMap()
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return ''
            }
            {
              var frame = componentFrameCache.get(fn)
              if (frame !== void 0) {
                return frame
              }
            }
            var control
            reentry = true
            var previousPrepareStackTrace = Error.prepareStackTrace
            Error.prepareStackTrace = void 0
            var previousDispatcher
            {
              previousDispatcher = ReactCurrentDispatcher$1.current
              ReactCurrentDispatcher$1.current = null
              disableLogs()
            }
            try {
              if (construct) {
                var Fake = function () {
                  throw Error()
                }
                Object.defineProperty(Fake.prototype, 'props', {
                  set: function () {
                    throw Error()
                  },
                })
                if (typeof Reflect === 'object' && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, [])
                  } catch (x) {
                    control = x
                  }
                  Reflect.construct(fn, [], Fake)
                } else {
                  try {
                    Fake.call()
                  } catch (x) {
                    control = x
                  }
                  fn.call(Fake.prototype)
                }
              } else {
                try {
                  throw Error()
                } catch (x) {
                  control = x
                }
                fn()
              }
            } catch (sample2) {
              if (sample2 && control && typeof sample2.stack === 'string') {
                var sampleLines = sample2.stack.split('\n')
                var controlLines = control.stack.split('\n')
                var s = sampleLines.length - 1
                var c = controlLines.length - 1
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--
                        c--
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ')
                          {
                            if (typeof fn === 'function') {
                              componentFrameCache.set(fn, _frame)
                            }
                          }
                          return _frame
                        }
                      } while (s >= 1 && c >= 0)
                    }
                    break
                  }
                }
              }
            } finally {
              reentry = false
              {
                ReactCurrentDispatcher$1.current = previousDispatcher
                reenableLogs()
              }
              Error.prepareStackTrace = previousPrepareStackTrace
            }
            var name = fn ? fn.displayName || fn.name : ''
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : ''
            {
              if (typeof fn === 'function') {
                componentFrameCache.set(fn, syntheticFrame)
              }
            }
            return syntheticFrame
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false)
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype
            return !!(prototype && prototype.isReactComponent)
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return ''
            }
            if (typeof type === 'function') {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type))
              }
            }
            if (typeof type === 'string') {
              return describeBuiltInComponentFrame(type)
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame('Suspense')
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList')
            }
            if (typeof type === 'object') {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render)
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn)
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render)
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type
                  var payload = lazyComponent._payload
                  var init3 = lazyComponent._init
                  try {
                    return describeUnknownElementTypeFrameInDEV(init3(payload), source, ownerFn)
                  } catch (x) {}
                }
              }
            }
            return ''
          }
          var loggedTypeFailures = {}
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner
                var stack = describeUnknownElementTypeFrameInDEV(
                  element.type,
                  element._source,
                  owner ? owner.type : null
                )
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack)
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null)
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty)
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0
                  try {
                    if (typeof typeSpecs[typeSpecName] !== 'function') {
                      var err = Error(
                        (componentName || 'React class') +
                          ': ' +
                          location +
                          ' type `' +
                          typeSpecName +
                          '` is invalid; it must be a function, usually from the `prop-types` package, but received `' +
                          typeof typeSpecs[typeSpecName] +
                          '`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
                      )
                      err.name = 'Invariant Violation'
                      throw err
                    }
                    error$1 = typeSpecs[typeSpecName](
                      values,
                      typeSpecName,
                      componentName,
                      location,
                      null,
                      'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'
                    )
                  } catch (ex) {
                    error$1 = ex
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element)
                    error(
                      '%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).',
                      componentName || 'React class',
                      location,
                      typeSpecName,
                      typeof error$1
                    )
                    setCurrentlyValidatingElement(null)
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true
                    setCurrentlyValidatingElement(element)
                    error('Failed %s type: %s', location, error$1.message)
                    setCurrentlyValidatingElement(null)
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner
                var stack = describeUnknownElementTypeFrameInDEV(
                  element.type,
                  element._source,
                  owner ? owner.type : null
                )
                setExtraStackFrame(stack)
              } else {
                setExtraStackFrame(null)
              }
            }
          }
          var propTypesMisspellWarningShown
          {
            propTypesMisspellWarningShown = false
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type)
              if (name) {
                return '\n\nCheck the render method of `' + name + '`.'
              }
            }
            return ''
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, '')
              var lineNumber = source.lineNumber
              return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.'
            }
            return ''
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source)
            }
            return ''
          }
          var ownerHasKeyUseWarning = {}
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum()
            if (!info) {
              var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name
              if (parentName) {
                info = '\n\nCheck the top-level render call using <' + parentName + '>.'
              }
            }
            return info
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return
            }
            element._store.validated = true
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType)
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true
            var childOwner = ''
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.'
            }
            {
              setCurrentlyValidatingElement$1(element)
              error(
                'Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',
                currentComponentErrorInfo,
                childOwner
              )
              setCurrentlyValidatingElement$1(null)
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== 'object') {
              return
            }
            if (Array.isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i]
                if (isValidElement2(child)) {
                  validateExplicitKey(child, parentType)
                }
              }
            } else if (isValidElement2(node)) {
              if (node._store) {
                node._store.validated = true
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node)
              if (typeof iteratorFn === 'function') {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node)
                  var step
                  while (!(step = iterator.next()).done) {
                    if (isValidElement2(step.value)) {
                      validateExplicitKey(step.value, parentType)
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type
              if (type === null || type === void 0 || typeof type === 'string') {
                return
              }
              var propTypes
              if (typeof type === 'function') {
                propTypes = type.propTypes
              } else if (
                typeof type === 'object' &&
                (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)
              ) {
                propTypes = type.propTypes
              } else {
                return
              }
              if (propTypes) {
                var name = getComponentName(type)
                checkPropTypes(propTypes, element.props, 'prop', name, element)
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true
                var _name = getComponentName(type)
                error(
                  'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?',
                  _name || 'Unknown'
                )
              }
              if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
                error(
                  'getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.'
                )
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props)
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i]
                if (key !== 'children' && key !== 'key') {
                  setCurrentlyValidatingElement$1(fragment)
                  error(
                    'Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.',
                    key
                  )
                  setCurrentlyValidatingElement$1(null)
                  break
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment)
                error('Invalid attribute `ref` supplied to `React.Fragment`.')
                setCurrentlyValidatingElement$1(null)
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type)
            if (!validType) {
              var info = ''
              if (type === void 0 || (typeof type === 'object' && type !== null && Object.keys(type).length === 0)) {
                info +=
                  " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props)
              if (sourceInfo) {
                info += sourceInfo
              } else {
                info += getDeclarationErrorAddendum()
              }
              var typeString
              if (type === null) {
                typeString = 'null'
              } else if (Array.isArray(type)) {
                typeString = 'array'
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />'
                info = ' Did you accidentally export a JSX literal instead of a component?'
              } else {
                typeString = typeof type
              }
              {
                error(
                  'React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s',
                  typeString,
                  info
                )
              }
            }
            var element = createElement3.apply(this, arguments)
            if (element == null) {
              return element
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type)
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element)
            } else {
              validatePropTypes(element)
            }
            return element
          }
          var didWarnAboutDeprecatedCreateFactory = false
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type)
            validatedFactory.type = type
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true
                warn(
                  'React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.'
                )
              }
              Object.defineProperty(validatedFactory, 'type', {
                enumerable: false,
                get: function () {
                  warn('Factory.type is deprecated. Access the class directly before passing it to createFactory.')
                  Object.defineProperty(this, 'type', {
                    value: type,
                  })
                  return type
                },
              })
            }
            return validatedFactory
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments)
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type)
            }
            validatePropTypes(newElement)
            return newElement
          }
          {
            try {
              var frozenObject = Object.freeze({})
              new Map([[frozenObject, null]])
              new Set([frozenObject])
            } catch (e) {}
          }
          var createElement$1 = createElementWithValidation
          var cloneElement$1 = cloneElementWithValidation
          var createFactory = createFactoryWithValidation
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild,
          }
          exports.Children = Children
          exports.Component = Component2
          exports.PureComponent = PureComponent
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals
          exports.cloneElement = cloneElement$1
          exports.createContext = createContext2
          exports.createElement = createElement$1
          exports.createFactory = createFactory
          exports.createRef = createRef
          exports.forwardRef = forwardRef
          exports.isValidElement = isValidElement2
          exports.lazy = lazy
          exports.memo = memo
          exports.useCallback = useCallback3
          exports.useContext = useContext4
          exports.useDebugValue = useDebugValue
          exports.useEffect = useEffect4
          exports.useImperativeHandle = useImperativeHandle
          exports.useLayoutEffect = useLayoutEffect
          exports.useMemo = useMemo2
          exports.useReducer = useReducer
          exports.useRef = useRef2
          exports.useState = useState4
          exports.version = ReactVersion
        })()
      }
    },
  })

  // node_modules/react/index.js
  var require_react = __commonJS({
    'node_modules/react/index.js'(exports, module2) {
      'use strict'
      if (false) {
        module2.exports = null
      } else {
        module2.exports = require_react_development()
      }
    },
  })

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    'node_modules/scheduler/cjs/scheduler.development.js'(exports) {
      'use strict'
      if (true) {
        ;(function () {
          'use strict'
          var enableSchedulerDebugging = false
          var enableProfiling = false
          var requestHostCallback
          var requestHostTimeout
          var cancelHostTimeout
          var requestPaint
          var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function'
          if (hasPerformanceNow) {
            var localPerformance = performance
            exports.unstable_now = function () {
              return localPerformance.now()
            }
          } else {
            var localDate = Date
            var initialTime = localDate.now()
            exports.unstable_now = function () {
              return localDate.now() - initialTime
            }
          }
          if (typeof window === 'undefined' || typeof MessageChannel !== 'function') {
            var _callback = null
            var _timeoutID = null
            var _flushCallback = function () {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now()
                  var hasRemainingTime = true
                  _callback(hasRemainingTime, currentTime)
                  _callback = null
                } catch (e) {
                  setTimeout(_flushCallback, 0)
                  throw e
                }
              }
            }
            requestHostCallback = function (cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb)
              } else {
                _callback = cb
                setTimeout(_flushCallback, 0)
              }
            }
            requestHostTimeout = function (cb, ms) {
              _timeoutID = setTimeout(cb, ms)
            }
            cancelHostTimeout = function () {
              clearTimeout(_timeoutID)
            }
            exports.unstable_shouldYield = function () {
              return false
            }
            requestPaint = exports.unstable_forceFrameRate = function () {}
          } else {
            var _setTimeout = window.setTimeout
            var _clearTimeout = window.clearTimeout
            if (typeof console !== 'undefined') {
              var requestAnimationFrame2 = window.requestAnimationFrame
              var cancelAnimationFrame2 = window.cancelAnimationFrame
              if (typeof requestAnimationFrame2 !== 'function') {
                console['error'](
                  "This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
                )
              }
              if (typeof cancelAnimationFrame2 !== 'function') {
                console['error'](
                  "This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
                )
              }
            }
            var isMessageLoopRunning = false
            var scheduledHostCallback = null
            var taskTimeoutID = -1
            var yieldInterval = 5
            var deadline = 0
            {
              exports.unstable_shouldYield = function () {
                return exports.unstable_now() >= deadline
              }
              requestPaint = function () {}
            }
            exports.unstable_forceFrameRate = function (fps) {
              if (fps < 0 || fps > 125) {
                console['error'](
                  'forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported'
                )
                return
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps)
              } else {
                yieldInterval = 5
              }
            }
            var performWorkUntilDeadline = function () {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now()
                deadline = currentTime + yieldInterval
                var hasTimeRemaining = true
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime)
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false
                    scheduledHostCallback = null
                  } else {
                    port.postMessage(null)
                  }
                } catch (error) {
                  port.postMessage(null)
                  throw error
                }
              } else {
                isMessageLoopRunning = false
              }
            }
            var channel = new MessageChannel()
            var port = channel.port2
            channel.port1.onmessage = performWorkUntilDeadline
            requestHostCallback = function (callback) {
              scheduledHostCallback = callback
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true
                port.postMessage(null)
              }
            }
            requestHostTimeout = function (callback, ms) {
              taskTimeoutID = _setTimeout(function () {
                callback(exports.unstable_now())
              }, ms)
            }
            cancelHostTimeout = function () {
              _clearTimeout(taskTimeoutID)
              taskTimeoutID = -1
            }
          }
          function push(heap, node) {
            var index = heap.length
            heap.push(node)
            siftUp(heap, node, index)
          }
          function peek(heap) {
            var first = heap[0]
            return first === void 0 ? null : first
          }
          function pop(heap) {
            var first = heap[0]
            if (first !== void 0) {
              var last = heap.pop()
              if (last !== first) {
                heap[0] = last
                siftDown(heap, last, 0)
              }
              return first
            } else {
              return null
            }
          }
          function siftUp(heap, node, i) {
            var index = i
            while (true) {
              var parentIndex = (index - 1) >>> 1
              var parent = heap[parentIndex]
              if (parent !== void 0 && compare(parent, node) > 0) {
                heap[parentIndex] = node
                heap[index] = parent
                index = parentIndex
              } else {
                return
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i
            var length = heap.length
            while (index < length) {
              var leftIndex = (index + 1) * 2 - 1
              var left = heap[leftIndex]
              var rightIndex = leftIndex + 1
              var right = heap[rightIndex]
              if (left !== void 0 && compare(left, node) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index] = right
                  heap[rightIndex] = node
                  index = rightIndex
                } else {
                  heap[index] = left
                  heap[leftIndex] = node
                  index = leftIndex
                }
              } else if (right !== void 0 && compare(right, node) < 0) {
                heap[index] = right
                heap[rightIndex] = node
                index = rightIndex
              } else {
                return
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex
            return diff !== 0 ? diff : a.id - b.id
          }
          var ImmediatePriority = 1
          var UserBlockingPriority = 2
          var NormalPriority = 3
          var LowPriority = 4
          var IdlePriority = 5
          function markTaskErrored(task, ms) {}
          var maxSigned31BitInt = 1073741823
          var IMMEDIATE_PRIORITY_TIMEOUT = -1
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250
          var NORMAL_PRIORITY_TIMEOUT = 5e3
          var LOW_PRIORITY_TIMEOUT = 1e4
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt
          var taskQueue = []
          var timerQueue = []
          var taskIdCounter = 1
          var currentTask = null
          var currentPriorityLevel = NormalPriority
          var isPerformingWork = false
          var isHostCallbackScheduled = false
          var isHostTimeoutScheduled = false
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue)
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue)
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue)
                timer.sortIndex = timer.expirationTime
                push(taskQueue, timer)
              } else {
                return
              }
              timer = peek(timerQueue)
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false
            advanceTimers(currentTime)
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true
                requestHostCallback(flushWork)
              } else {
                var firstTimer = peek(timerQueue)
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime)
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false
              cancelHostTimeout()
            }
            isPerformingWork = true
            var previousPriorityLevel = currentPriorityLevel
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2)
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now()
                    markTaskErrored(currentTask, currentTime)
                    currentTask.isQueued = false
                  }
                  throw error
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2)
              }
            } finally {
              currentTask = null
              currentPriorityLevel = previousPriorityLevel
              isPerformingWork = false
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2
            advanceTimers(currentTime)
            currentTask = peek(taskQueue)
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break
              }
              var callback = currentTask.callback
              if (typeof callback === 'function') {
                currentTask.callback = null
                currentPriorityLevel = currentTask.priorityLevel
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime
                var continuationCallback = callback(didUserCallbackTimeout)
                currentTime = exports.unstable_now()
                if (typeof continuationCallback === 'function') {
                  currentTask.callback = continuationCallback
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue)
                  }
                }
                advanceTimers(currentTime)
              } else {
                pop(taskQueue)
              }
              currentTask = peek(taskQueue)
            }
            if (currentTask !== null) {
              return true
            } else {
              var firstTimer = peek(timerQueue)
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime)
              }
              return false
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break
              default:
                priorityLevel = NormalPriority
            }
            var previousPriorityLevel = currentPriorityLevel
            currentPriorityLevel = priorityLevel
            try {
              return eventHandler()
            } finally {
              currentPriorityLevel = previousPriorityLevel
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority
                break
              default:
                priorityLevel = currentPriorityLevel
                break
            }
            var previousPriorityLevel = currentPriorityLevel
            currentPriorityLevel = priorityLevel
            try {
              return eventHandler()
            } finally {
              currentPriorityLevel = previousPriorityLevel
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel
            return function () {
              var previousPriorityLevel = currentPriorityLevel
              currentPriorityLevel = parentPriorityLevel
              try {
                return callback.apply(this, arguments)
              } finally {
                currentPriorityLevel = previousPriorityLevel
              }
            }
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now()
            var startTime
            if (typeof options === 'object' && options !== null) {
              var delay = options.delay
              if (typeof delay === 'number' && delay > 0) {
                startTime = currentTime + delay
              } else {
                startTime = currentTime
              }
            } else {
              startTime = currentTime
            }
            var timeout
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT
                break
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT
                break
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT
                break
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT
                break
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT
                break
            }
            var expirationTime = startTime + timeout
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1,
            }
            if (startTime > currentTime) {
              newTask.sortIndex = startTime
              push(timerQueue, newTask)
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout()
                } else {
                  isHostTimeoutScheduled = true
                }
                requestHostTimeout(handleTimeout, startTime - currentTime)
              }
            } else {
              newTask.sortIndex = expirationTime
              push(taskQueue, newTask)
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true
                requestHostCallback(flushWork)
              }
            }
            return newTask
          }
          function unstable_pauseExecution() {}
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true
              requestHostCallback(flushWork)
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue)
          }
          function unstable_cancelCallback(task) {
            task.callback = null
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel
          }
          var unstable_requestPaint = requestPaint
          var unstable_Profiling = null
          exports.unstable_IdlePriority = IdlePriority
          exports.unstable_ImmediatePriority = ImmediatePriority
          exports.unstable_LowPriority = LowPriority
          exports.unstable_NormalPriority = NormalPriority
          exports.unstable_Profiling = unstable_Profiling
          exports.unstable_UserBlockingPriority = UserBlockingPriority
          exports.unstable_cancelCallback = unstable_cancelCallback
          exports.unstable_continueExecution = unstable_continueExecution
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode
          exports.unstable_next = unstable_next
          exports.unstable_pauseExecution = unstable_pauseExecution
          exports.unstable_requestPaint = unstable_requestPaint
          exports.unstable_runWithPriority = unstable_runWithPriority
          exports.unstable_scheduleCallback = unstable_scheduleCallback
          exports.unstable_wrapCallback = unstable_wrapCallback
        })()
      }
    },
  })

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    'node_modules/scheduler/index.js'(exports, module2) {
      'use strict'
      if (false) {
        module2.exports = null
      } else {
        module2.exports = require_scheduler_development()
      }
    },
  })

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    'node_modules/scheduler/cjs/scheduler-tracing.development.js'(exports) {
      'use strict'
      if (true) {
        ;(function () {
          'use strict'
          var DEFAULT_THREAD_ID = 0
          var interactionIDCounter = 0
          var threadIDCounter = 0
          exports.__interactionsRef = null
          exports.__subscriberRef = null
          {
            exports.__interactionsRef = {
              current: new Set(),
            }
            exports.__subscriberRef = {
              current: null,
            }
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current
            exports.__interactionsRef.current = new Set()
            try {
              return callback()
            } finally {
              exports.__interactionsRef.current = prevInteractions
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp,
            }
            var prevInteractions = exports.__interactionsRef.current
            var interactions = new Set(prevInteractions)
            interactions.add(interaction)
            exports.__interactionsRef.current = interactions
            var subscriber = exports.__subscriberRef.current
            var returnValue
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction)
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID)
                }
              } finally {
                try {
                  returnValue = callback()
                } finally {
                  exports.__interactionsRef.current = prevInteractions
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID)
                    }
                  } finally {
                    interaction.__count--
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction)
                    }
                  }
                }
              }
            }
            return returnValue
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID
            var wrappedInteractions = exports.__interactionsRef.current
            var subscriber = exports.__subscriberRef.current
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID)
            }
            wrappedInteractions.forEach(function (interaction) {
              interaction.__count++
            })
            var hasRun = false
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current
              exports.__interactionsRef.current = wrappedInteractions
              subscriber = exports.__subscriberRef.current
              try {
                var returnValue
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID)
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments)
                  } finally {
                    exports.__interactionsRef.current = prevInteractions
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID)
                    }
                  }
                }
                return returnValue
              } finally {
                if (!hasRun) {
                  hasRun = true
                  wrappedInteractions.forEach(function (interaction) {
                    interaction.__count--
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction)
                    }
                  })
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID)
                }
              } finally {
                wrappedInteractions.forEach(function (interaction) {
                  interaction.__count--
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction)
                  }
                })
              }
            }
            return wrapped
          }
          var subscribers = null
          {
            subscribers = new Set()
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber)
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped,
                }
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber)
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false
            var caughtError = null
            subscribers.forEach(function (subscriber) {
              try {
                subscriber.onInteractionTraced(interaction)
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true
                  caughtError = error
                }
              }
            })
            if (didCatchError) {
              throw caughtError
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false
            var caughtError = null
            subscribers.forEach(function (subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction)
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true
                  caughtError = error
                }
              }
            })
            if (didCatchError) {
              throw caughtError
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false
            var caughtError = null
            subscribers.forEach(function (subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID)
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true
                  caughtError = error
                }
              }
            })
            if (didCatchError) {
              throw caughtError
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false
            var caughtError = null
            subscribers.forEach(function (subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID)
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true
                  caughtError = error
                }
              }
            })
            if (didCatchError) {
              throw caughtError
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false
            var caughtError = null
            subscribers.forEach(function (subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID)
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true
                  caughtError = error
                }
              }
            })
            if (didCatchError) {
              throw caughtError
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false
            var caughtError = null
            subscribers.forEach(function (subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID)
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true
                  caughtError = error
                }
              }
            })
            if (didCatchError) {
              throw caughtError
            }
          }
          exports.unstable_clear = unstable_clear
          exports.unstable_getCurrent = unstable_getCurrent
          exports.unstable_getThreadID = unstable_getThreadID
          exports.unstable_subscribe = unstable_subscribe
          exports.unstable_trace = unstable_trace
          exports.unstable_unsubscribe = unstable_unsubscribe
          exports.unstable_wrap = unstable_wrap
        })()
      }
    },
  })

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    'node_modules/scheduler/tracing.js'(exports, module2) {
      'use strict'
      if (false) {
        module2.exports = null
      } else {
        module2.exports = require_scheduler_tracing_development()
      }
    },
  })

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    'node_modules/react-dom/cjs/react-dom.development.js'(exports) {
      'use strict'
      if (true) {
        ;(function () {
          'use strict'
          var React10 = require_react()
          var _assign = require_object_assign()
          var Scheduler = require_scheduler()
          var tracing = require_tracing()
          var ReactSharedInternals = React10.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
          function warn(format) {
            {
              for (
                var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;
                _key < _len;
                _key++
              ) {
                args[_key - 1] = arguments[_key]
              }
              printWarning('warn', format, args)
            }
          }
          function error(format) {
            {
              for (
                var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;
                _key2 < _len2;
                _key2++
              ) {
                args[_key2 - 1] = arguments[_key2]
              }
              printWarning('error', format, args)
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame
              var stack = ReactDebugCurrentFrame2.getStackAddendum()
              if (stack !== '') {
                format += '%s'
                args = args.concat([stack])
              }
              var argsWithFormat = args.map(function (item) {
                return '' + item
              })
              argsWithFormat.unshift('Warning: ' + format)
              Function.prototype.apply.call(console[level], console, argsWithFormat)
            }
          }
          if (!React10) {
            {
              throw Error(
                'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.'
              )
            }
          }
          var FunctionComponent = 0
          var ClassComponent = 1
          var IndeterminateComponent = 2
          var HostRoot = 3
          var HostPortal = 4
          var HostComponent = 5
          var HostText = 6
          var Fragment = 7
          var Mode = 8
          var ContextConsumer = 9
          var ContextProvider = 10
          var ForwardRef = 11
          var Profiler = 12
          var SuspenseComponent = 13
          var MemoComponent = 14
          var SimpleMemoComponent = 15
          var LazyComponent = 16
          var IncompleteClassComponent = 17
          var DehydratedFragment = 18
          var SuspenseListComponent = 19
          var FundamentalComponent = 20
          var ScopeComponent = 21
          var Block = 22
          var OffscreenComponent = 23
          var LegacyHiddenComponent = 24
          var enableProfilerTimer = true
          var enableFundamentalAPI = false
          var enableNewReconciler = false
          var warnAboutStringRefs = false
          var allNativeEvents = new Set()
          var registrationNameDependencies = {}
          var possibleRegistrationNames = {}
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies)
            registerDirectEvent(registrationName + 'Capture', dependencies)
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error(
                  'EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.',
                  registrationName
                )
              }
            }
            registrationNameDependencies[registrationName] = dependencies
            {
              var lowerCasedName = registrationName.toLowerCase()
              possibleRegistrationNames[lowerCasedName] = registrationName
              if (registrationName === 'onDoubleClick') {
                possibleRegistrationNames.ondblclick = registrationName
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i])
            }
          }
          var canUseDOM = !!(
            typeof window !== 'undefined' &&
            typeof window.document !== 'undefined' &&
            typeof window.document.createElement !== 'undefined'
          )
          var RESERVED = 0
          var STRING = 1
          var BOOLEANISH_STRING = 2
          var BOOLEAN = 3
          var OVERLOADED_BOOLEAN = 4
          var NUMERIC = 5
          var POSITIVE_NUMERIC = 6
          var ATTRIBUTE_NAME_START_CHAR =
            ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD'
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040'
          var ROOT_ATTRIBUTE_NAME = 'data-reactroot'
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
            '^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$'
          )
          var hasOwnProperty = Object.prototype.hasOwnProperty
          var illegalAttributeNameCache = {}
          var validatedAttributeNameCache = {}
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true
              return true
            }
            illegalAttributeNameCache[attributeName] = true
            {
              error('Invalid attribute name: `%s`', attributeName)
            }
            return false
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED
            }
            if (isCustomComponentTag) {
              return false
            }
            if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
              return true
            }
            return false
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false
            }
            switch (typeof value) {
              case 'function':
              case 'symbol':
                return true
              case 'boolean': {
                if (isCustomComponentTag) {
                  return false
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5)
                  return prefix2 !== 'data-' && prefix2 !== 'aria-'
                }
              }
              default:
                return false
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === 'undefined') {
              return true
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true
            }
            if (isCustomComponentTag) {
              return false
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value
                case OVERLOADED_BOOLEAN:
                  return value === false
                case NUMERIC:
                  return isNaN(value)
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1
              }
            }
            return false
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null
          }
          function PropertyInfoRecord(
            name,
            type,
            mustUseProperty,
            attributeName,
            attributeNamespace,
            sanitizeURL2,
            removeEmptyString
          ) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN
            this.attributeName = attributeName
            this.attributeNamespace = attributeNamespace
            this.mustUseProperty = mustUseProperty
            this.propertyName = name
            this.type = type
            this.sanitizeURL = sanitizeURL2
            this.removeEmptyString = removeEmptyString
          }
          var properties = {}
          var reservedProps = [
            'children',
            'dangerouslySetInnerHTML',
            'defaultValue',
            'defaultChecked',
            'innerHTML',
            'suppressContentEditableWarning',
            'suppressHydrationWarning',
            'style',
          ]
          reservedProps.forEach(function (name) {
            properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false)
          })
          ;[
            ['acceptCharset', 'accept-charset'],
            ['className', 'class'],
            ['htmlFor', 'for'],
            ['httpEquiv', 'http-equiv'],
          ].forEach(function (_ref) {
            var name = _ref[0],
              attributeName = _ref[1]
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false)
          })
          ;['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            )
          })
          ;['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false)
          })
          ;[
            'allowFullScreen',
            'async',
            'autoFocus',
            'autoPlay',
            'controls',
            'default',
            'defer',
            'disabled',
            'disablePictureInPicture',
            'disableRemotePlayback',
            'formNoValidate',
            'hidden',
            'loop',
            'noModule',
            'noValidate',
            'open',
            'playsInline',
            'readOnly',
            'required',
            'reversed',
            'scoped',
            'seamless',
            'itemScope',
          ].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false)
          })
          ;['checked', 'multiple', 'muted', 'selected'].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false)
          })
          ;['capture', 'download'].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false)
          })
          ;['cols', 'rows', 'size', 'span'].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false)
          })
          ;['rowSpan', 'start'].forEach(function (name) {
            properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false)
          })
          var CAMELIZE = /[\-\:]([a-z])/g
          var capitalize = function (token) {
            return token[1].toUpperCase()
          }
          ;[
            'accent-height',
            'alignment-baseline',
            'arabic-form',
            'baseline-shift',
            'cap-height',
            'clip-path',
            'clip-rule',
            'color-interpolation',
            'color-interpolation-filters',
            'color-profile',
            'color-rendering',
            'dominant-baseline',
            'enable-background',
            'fill-opacity',
            'fill-rule',
            'flood-color',
            'flood-opacity',
            'font-family',
            'font-size',
            'font-size-adjust',
            'font-stretch',
            'font-style',
            'font-variant',
            'font-weight',
            'glyph-name',
            'glyph-orientation-horizontal',
            'glyph-orientation-vertical',
            'horiz-adv-x',
            'horiz-origin-x',
            'image-rendering',
            'letter-spacing',
            'lighting-color',
            'marker-end',
            'marker-mid',
            'marker-start',
            'overline-position',
            'overline-thickness',
            'paint-order',
            'panose-1',
            'pointer-events',
            'rendering-intent',
            'shape-rendering',
            'stop-color',
            'stop-opacity',
            'strikethrough-position',
            'strikethrough-thickness',
            'stroke-dasharray',
            'stroke-dashoffset',
            'stroke-linecap',
            'stroke-linejoin',
            'stroke-miterlimit',
            'stroke-opacity',
            'stroke-width',
            'text-anchor',
            'text-decoration',
            'text-rendering',
            'underline-position',
            'underline-thickness',
            'unicode-bidi',
            'unicode-range',
            'units-per-em',
            'v-alphabetic',
            'v-hanging',
            'v-ideographic',
            'v-mathematical',
            'vector-effect',
            'vert-adv-y',
            'vert-origin-x',
            'vert-origin-y',
            'word-spacing',
            'writing-mode',
            'xmlns:xlink',
            'x-height',
          ].forEach(function (attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize)
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false)
          })
          ;['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(
            function (attributeName) {
              var name = attributeName.replace(CAMELIZE, capitalize)
              properties[name] = new PropertyInfoRecord(
                name,
                STRING,
                false,
                attributeName,
                'http://www.w3.org/1999/xlink',
                false,
                false
              )
            }
          )
          ;['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize)
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              'http://www.w3.org/XML/1998/namespace',
              false,
              false
            )
          })
          ;['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              false,
              false
            )
          })
          var xlinkHref = 'xlinkHref'
          properties[xlinkHref] = new PropertyInfoRecord(
            'xlinkHref',
            STRING,
            false,
            'xlink:href',
            'http://www.w3.org/1999/xlink',
            true,
            false
          )
          ;['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              true,
              true
            )
          })
          var isJavaScriptProtocol =
            /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i
          var didWarn = false
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true
                error(
                  'A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.',
                  JSON.stringify(url)
                )
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName
                return node[propertyName]
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL('' + expected)
                }
                var attributeName = propertyInfo.attributeName
                var stringValue = null
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName)
                    if (value === '') {
                      return true
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value
                    }
                    if (value === '' + expected) {
                      return expected
                    }
                    return value
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName)
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected
                  }
                  stringValue = node.getAttribute(attributeName)
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue
                } else if (stringValue === '' + expected) {
                  return expected
                } else {
                  return stringValue
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null
              }
              var value = node.getAttribute(name)
              if (value === '' + expected) {
                return expected
              }
              return value
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name)
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name
                if (value === null) {
                  node.removeAttribute(_attributeName)
                } else {
                  node.setAttribute(_attributeName, '' + value)
                }
              }
              return
            }
            var mustUseProperty = propertyInfo.mustUseProperty
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName
              if (value === null) {
                var type = propertyInfo.type
                node[propertyName] = type === BOOLEAN ? false : ''
              } else {
                node[propertyName] = value
              }
              return
            }
            var attributeName = propertyInfo.attributeName,
              attributeNamespace = propertyInfo.attributeNamespace
            if (value === null) {
              node.removeAttribute(attributeName)
            } else {
              var _type = propertyInfo.type
              var attributeValue
              if (_type === BOOLEAN || (_type === OVERLOADED_BOOLEAN && value === true)) {
                attributeValue = ''
              } else {
                {
                  attributeValue = '' + value
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString())
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue)
              } else {
                node.setAttribute(attributeName, attributeValue)
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103
          var REACT_PORTAL_TYPE = 60106
          var REACT_FRAGMENT_TYPE = 60107
          var REACT_STRICT_MODE_TYPE = 60108
          var REACT_PROFILER_TYPE = 60114
          var REACT_PROVIDER_TYPE = 60109
          var REACT_CONTEXT_TYPE = 60110
          var REACT_FORWARD_REF_TYPE = 60112
          var REACT_SUSPENSE_TYPE = 60113
          var REACT_SUSPENSE_LIST_TYPE = 60120
          var REACT_MEMO_TYPE = 60115
          var REACT_LAZY_TYPE = 60116
          var REACT_BLOCK_TYPE = 60121
          var REACT_SERVER_BLOCK_TYPE = 60122
          var REACT_FUNDAMENTAL_TYPE = 60117
          var REACT_SCOPE_TYPE = 60119
          var REACT_OPAQUE_ID_TYPE = 60128
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129
          var REACT_OFFSCREEN_TYPE = 60130
          var REACT_LEGACY_HIDDEN_TYPE = 60131
          if (typeof Symbol === 'function' && Symbol.for) {
            var symbolFor = Symbol.for
            REACT_ELEMENT_TYPE = symbolFor('react.element')
            REACT_PORTAL_TYPE = symbolFor('react.portal')
            REACT_FRAGMENT_TYPE = symbolFor('react.fragment')
            REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode')
            REACT_PROFILER_TYPE = symbolFor('react.profiler')
            REACT_PROVIDER_TYPE = symbolFor('react.provider')
            REACT_CONTEXT_TYPE = symbolFor('react.context')
            REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref')
            REACT_SUSPENSE_TYPE = symbolFor('react.suspense')
            REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list')
            REACT_MEMO_TYPE = symbolFor('react.memo')
            REACT_LAZY_TYPE = symbolFor('react.lazy')
            REACT_BLOCK_TYPE = symbolFor('react.block')
            REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block')
            REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental')
            REACT_SCOPE_TYPE = symbolFor('react.scope')
            REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id')
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode')
            REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen')
            REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden')
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator
          var FAUX_ITERATOR_SYMBOL = '@@iterator'
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== 'object') {
              return null
            }
            var maybeIterator =
              (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) || maybeIterable[FAUX_ITERATOR_SYMBOL]
            if (typeof maybeIterator === 'function') {
              return maybeIterator
            }
            return null
          }
          var disabledDepth = 0
          var prevLog
          var prevInfo
          var prevWarn
          var prevError
          var prevGroup
          var prevGroupCollapsed
          var prevGroupEnd
          function disabledLog() {}
          disabledLog.__reactDisabledLog = true
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log
                prevInfo = console.info
                prevWarn = console.warn
                prevError = console.error
                prevGroup = console.group
                prevGroupCollapsed = console.groupCollapsed
                prevGroupEnd = console.groupEnd
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true,
                }
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props,
                })
              }
              disabledDepth++
            }
          }
          function reenableLogs() {
            {
              disabledDepth--
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true,
                }
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog,
                  }),
                  info: _assign({}, props, {
                    value: prevInfo,
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn,
                  }),
                  error: _assign({}, props, {
                    value: prevError,
                  }),
                  group: _assign({}, props, {
                    value: prevGroup,
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed,
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd,
                  }),
                })
              }
              if (disabledDepth < 0) {
                error('disabledDepth fell below zero. This is a bug in React. Please file an issue.')
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher
          var prefix
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error()
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/)
                  prefix = (match && match[1]) || ''
                }
              }
              return '\n' + prefix + name
            }
          }
          var reentry = false
          var componentFrameCache
          {
            var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map
            componentFrameCache = new PossiblyWeakMap()
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return ''
            }
            {
              var frame = componentFrameCache.get(fn)
              if (frame !== void 0) {
                return frame
              }
            }
            var control
            reentry = true
            var previousPrepareStackTrace = Error.prepareStackTrace
            Error.prepareStackTrace = void 0
            var previousDispatcher
            {
              previousDispatcher = ReactCurrentDispatcher.current
              ReactCurrentDispatcher.current = null
              disableLogs()
            }
            try {
              if (construct) {
                var Fake = function () {
                  throw Error()
                }
                Object.defineProperty(Fake.prototype, 'props', {
                  set: function () {
                    throw Error()
                  },
                })
                if (typeof Reflect === 'object' && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, [])
                  } catch (x) {
                    control = x
                  }
                  Reflect.construct(fn, [], Fake)
                } else {
                  try {
                    Fake.call()
                  } catch (x) {
                    control = x
                  }
                  fn.call(Fake.prototype)
                }
              } else {
                try {
                  throw Error()
                } catch (x) {
                  control = x
                }
                fn()
              }
            } catch (sample2) {
              if (sample2 && control && typeof sample2.stack === 'string') {
                var sampleLines = sample2.stack.split('\n')
                var controlLines = control.stack.split('\n')
                var s = sampleLines.length - 1
                var c = controlLines.length - 1
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--
                        c--
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ')
                          {
                            if (typeof fn === 'function') {
                              componentFrameCache.set(fn, _frame)
                            }
                          }
                          return _frame
                        }
                      } while (s >= 1 && c >= 0)
                    }
                    break
                  }
                }
              }
            } finally {
              reentry = false
              {
                ReactCurrentDispatcher.current = previousDispatcher
                reenableLogs()
              }
              Error.prepareStackTrace = previousPrepareStackTrace
            }
            var name = fn ? fn.displayName || fn.name : ''
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : ''
            {
              if (typeof fn === 'function') {
                componentFrameCache.set(fn, syntheticFrame)
              }
            }
            return syntheticFrame
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true)
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false)
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype
            return !!(prototype && prototype.isReactComponent)
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return ''
            }
            if (typeof type === 'function') {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type))
              }
            }
            if (typeof type === 'string') {
              return describeBuiltInComponentFrame(type)
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense')
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList')
            }
            if (typeof type === 'object') {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render)
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn)
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render)
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type
                  var payload = lazyComponent._payload
                  var init3 = lazyComponent._init
                  try {
                    return describeUnknownElementTypeFrameInDEV(init3(payload), source, ownerFn)
                  } catch (x) {}
                }
              }
            }
            return ''
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null
            var source = fiber._debugSource
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type)
              case LazyComponent:
                return describeBuiltInComponentFrame('Lazy')
              case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense')
              case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList')
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type)
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render)
              case Block:
                return describeFunctionComponentFrame(fiber.type._render)
              case ClassComponent:
                return describeClassComponentFrame(fiber.type)
              default:
                return ''
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = ''
              var node = workInProgress2
              do {
                info += describeFiber(node)
                node = node.return
              } while (node)
              return info
            } catch (x) {
              return '\nError generating stack: ' + x.message + '\n' + x.stack
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || ''
            return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName)
          }
          function getContextName(type) {
            return type.displayName || 'Context'
          }
          function getComponentName(type) {
            if (type == null) {
              return null
            }
            {
              if (typeof type.tag === 'number') {
                error(
                  'Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.'
                )
              }
            }
            if (typeof type === 'function') {
              return type.displayName || type.name || null
            }
            if (typeof type === 'string') {
              return type
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return 'Fragment'
              case REACT_PORTAL_TYPE:
                return 'Portal'
              case REACT_PROFILER_TYPE:
                return 'Profiler'
              case REACT_STRICT_MODE_TYPE:
                return 'StrictMode'
              case REACT_SUSPENSE_TYPE:
                return 'Suspense'
              case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList'
            }
            if (typeof type === 'object') {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type
                  return getContextName(context) + '.Consumer'
                case REACT_PROVIDER_TYPE:
                  var provider = type
                  return getContextName(provider._context) + '.Provider'
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, 'ForwardRef')
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type)
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render)
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type
                  var payload = lazyComponent._payload
                  var init3 = lazyComponent._init
                  try {
                    return getComponentName(init3(payload))
                  } catch (x) {
                    return null
                  }
                }
              }
            }
            return null
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame
          var current = null
          var isRendering = false
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null
              }
              var owner = current._debugOwner
              if (owner !== null && typeof owner !== 'undefined') {
                return getComponentName(owner.type)
              }
            }
            return null
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return ''
              }
              return getStackByFiberInDevAndProd(current)
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null
              current = null
              isRendering = false
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev
              current = fiber
              isRendering = false
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering
            }
          }
          function getIsRendering() {
            {
              return isRendering
            }
          }
          function toString(value) {
            return '' + value
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case 'boolean':
              case 'number':
              case 'object':
              case 'string':
              case 'undefined':
                return value
              default:
                return ''
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true,
          }
          function checkControlledValueProps(tagName, props) {
            {
              if (
                !(
                  hasReadOnlyValue[props.type] ||
                  props.onChange ||
                  props.onInput ||
                  props.readOnly ||
                  props.disabled ||
                  props.value == null
                )
              ) {
                error(
                  'You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.'
                )
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error(
                  'You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.'
                )
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type
            var nodeName = elem.nodeName
            return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio')
          }
          function getTracker(node) {
            return node._valueTracker
          }
          function detachTracker(node) {
            node._valueTracker = null
          }
          function getValueFromNode(node) {
            var value = ''
            if (!node) {
              return value
            }
            if (isCheckable(node)) {
              value = node.checked ? 'true' : 'false'
            } else {
              value = node.value
            }
            return value
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? 'checked' : 'value'
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField)
            var currentValue = '' + node[valueField]
            if (
              node.hasOwnProperty(valueField) ||
              typeof descriptor === 'undefined' ||
              typeof descriptor.get !== 'function' ||
              typeof descriptor.set !== 'function'
            ) {
              return
            }
            var get2 = descriptor.get,
              set2 = descriptor.set
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function () {
                return get2.call(this)
              },
              set: function (value) {
                currentValue = '' + value
                set2.call(this, value)
              },
            })
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable,
            })
            var tracker = {
              getValue: function () {
                return currentValue
              },
              setValue: function (value) {
                currentValue = '' + value
              },
              stopTracking: function () {
                detachTracker(node)
                delete node[valueField]
              },
            }
            return tracker
          }
          function track(node) {
            if (getTracker(node)) {
              return
            }
            node._valueTracker = trackValueOnNode(node)
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false
            }
            var tracker = getTracker(node)
            if (!tracker) {
              return true
            }
            var lastValue = tracker.getValue()
            var nextValue = getValueFromNode(node)
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue)
              return true
            }
            return false
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== 'undefined' ? document : void 0)
            if (typeof doc === 'undefined') {
              return null
            }
            try {
              return doc.activeElement || doc.body
            } catch (e) {
              return doc.body
            }
          }
          var didWarnValueDefaultValue = false
          var didWarnCheckedDefaultChecked = false
          var didWarnControlledToUncontrolled = false
          var didWarnUncontrolledToControlled = false
          function isControlled(props) {
            var usesChecked = props.type === 'checkbox' || props.type === 'radio'
            return usesChecked ? props.checked != null : props.value != null
          }
          function getHostProps(element, props) {
            var node = element
            var checked = props.checked
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked,
            })
            return hostProps
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps('input', props)
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error(
                  '%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components',
                  getCurrentFiberOwnerNameInDevOrNull() || 'A component',
                  props.type
                )
                didWarnCheckedDefaultChecked = true
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error(
                  '%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components',
                  getCurrentFiberOwnerNameInDevOrNull() || 'A component',
                  props.type
                )
                didWarnValueDefaultValue = true
              }
            }
            var node = element
            var defaultValue = props.defaultValue == null ? '' : props.defaultValue
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props),
            }
          }
          function updateChecked(element, props) {
            var node = element
            var checked = props.checked
            if (checked != null) {
              setValueForProperty(node, 'checked', checked, false)
            }
          }
          function updateWrapper(element, props) {
            var node = element
            {
              var controlled = isControlled(props)
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error(
                  'A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components'
                )
                didWarnUncontrolledToControlled = true
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error(
                  'A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components'
                )
                didWarnControlledToUncontrolled = true
              }
            }
            updateChecked(element, props)
            var value = getToStringValue(props.value)
            var type = props.type
            if (value != null) {
              if (type === 'number') {
                if ((value === 0 && node.value === '') || node.value != value) {
                  node.value = toString(value)
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value)
              }
            } else if (type === 'submit' || type === 'reset') {
              node.removeAttribute('value')
              return
            }
            {
              if (props.hasOwnProperty('value')) {
                setDefaultValue(node, props.type, value)
              } else if (props.hasOwnProperty('defaultValue')) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue))
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element
            if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
              var type = props.type
              var isButton = type === 'submit' || type === 'reset'
              if (isButton && (props.value === void 0 || props.value === null)) {
                return
              }
              var initialValue = toString(node._wrapperState.initialValue)
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue
                  }
                }
              }
              {
                node.defaultValue = initialValue
              }
            }
            var name = node.name
            if (name !== '') {
              node.name = ''
            }
            {
              node.defaultChecked = !node.defaultChecked
              node.defaultChecked = !!node._wrapperState.initialChecked
            }
            if (name !== '') {
              node.name = name
            }
          }
          function restoreControlledState(element, props) {
            var node = element
            updateWrapper(node, props)
            updateNamedCousins(node, props)
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name
            if (props.type === 'radio' && name != null) {
              var queryRoot = rootNode
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode
              }
              var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]')
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i]
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode)
                if (!otherProps) {
                  {
                    throw Error(
                      'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.'
                    )
                  }
                }
                updateValueIfChanged(otherNode)
                updateWrapper(otherNode, otherProps)
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue)
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value)
              }
            }
          }
          var didWarnSelectedSetOnOption = false
          var didWarnInvalidChild = false
          function flattenChildren(children) {
            var content = ''
            React10.Children.forEach(children, function (child) {
              if (child == null) {
                return
              }
              content += child
            })
            return content
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === 'object' && props.children !== null) {
                React10.Children.forEach(props.children, function (child) {
                  if (child == null) {
                    return
                  }
                  if (typeof child === 'string' || typeof child === 'number') {
                    return
                  }
                  if (typeof child.type !== 'string') {
                    return
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true
                    error('Only strings and numbers are supported as <option> children.')
                  }
                })
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error('Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.')
                didWarnSelectedSetOnOption = true
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute('value', toString(getToStringValue(props.value)))
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign(
              {
                children: void 0,
              },
              props
            )
            var content = flattenChildren(props.children)
            if (content) {
              hostProps.children = content
            }
            return hostProps
          }
          var didWarnValueDefaultValue$1
          {
            didWarnValueDefaultValue$1 = false
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull()
            if (ownerName) {
              return '\n\nCheck the render method of `' + ownerName + '`.'
            }
            return ''
          }
          var valuePropNames = ['value', 'defaultValue']
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps('select', props)
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i]
                if (props[propName] == null) {
                  continue
                }
                var isArray2 = Array.isArray(props[propName])
                if (props.multiple && !isArray2) {
                  error(
                    'The `%s` prop supplied to <select> must be an array if `multiple` is true.%s',
                    propName,
                    getDeclarationErrorAddendum()
                  )
                } else if (!props.multiple && isArray2) {
                  error(
                    'The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s',
                    propName,
                    getDeclarationErrorAddendum()
                  )
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options
            if (multiple) {
              var selectedValues = propValue
              var selectedValue = {}
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue['$' + selectedValues[i]] = true
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty('$' + options2[_i].value)
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue))
              var defaultSelected = null
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true
                  }
                  return
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2]
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0,
            })
          }
          function initWrapperState$1(element, props) {
            var node = element
            {
              checkSelectPropTypes(props)
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple,
            }
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error(
                  'Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components'
                )
                didWarnValueDefaultValue$1 = true
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element
            node.multiple = !!props.multiple
            var value = props.value
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false)
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true)
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element
            var wasMultiple = node._wrapperState.wasMultiple
            node._wrapperState.wasMultiple = !!props.multiple
            var value = props.value
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false)
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true)
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : '', false)
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element
            var value = props.value
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false)
            }
          }
          var didWarnValDefaultVal = false
          function getHostProps$3(element, props) {
            var node = element
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.')
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue),
            })
            return hostProps
          }
          function initWrapperState$2(element, props) {
            var node = element
            {
              checkControlledValueProps('textarea', props)
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error(
                  '%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components',
                  getCurrentFiberOwnerNameInDevOrNull() || 'A component'
                )
                didWarnValDefaultVal = true
              }
            }
            var initialValue = props.value
            if (initialValue == null) {
              var children = props.children,
                defaultValue = props.defaultValue
              if (children != null) {
                {
                  error('Use the `defaultValue` or `value` props instead of setting children on <textarea>.')
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error('If you supply `defaultValue` on a <textarea>, do not pass children.')
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error('<textarea> can only have at most one child.')
                      }
                    }
                    children = children[0]
                  }
                  defaultValue = children
                }
              }
              if (defaultValue == null) {
                defaultValue = ''
              }
              initialValue = defaultValue
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue),
            }
          }
          function updateWrapper$1(element, props) {
            var node = element
            var value = getToStringValue(props.value)
            var defaultValue = getToStringValue(props.defaultValue)
            if (value != null) {
              var newValue = toString(value)
              if (newValue !== node.value) {
                node.value = newValue
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue)
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element
            var textContent = node.textContent
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== '' && textContent !== null) {
                node.value = textContent
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props)
          }
          var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml'
          var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML'
          var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE,
          }
          function getIntrinsicNamespace(type) {
            switch (type) {
              case 'svg':
                return SVG_NAMESPACE
              case 'math':
                return MATH_NAMESPACE
              default:
                return HTML_NAMESPACE
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type)
            }
            if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
              return HTML_NAMESPACE
            }
            return parentNamespace
          }
          var createMicrosoftUnsafeLocalFunction = function (func) {
            if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
              return function (arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function () {
                  return func(arg0, arg1, arg2, arg3)
                })
              }
            } else {
              return func
            }
          }
          var reusableSVGContainer
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!('innerHTML' in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement('div')
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>'
                var svgNode = reusableSVGContainer.firstChild
                while (node.firstChild) {
                  node.removeChild(node.firstChild)
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild)
                }
                return
              }
            }
            node.innerHTML = html
          })
          var ELEMENT_NODE = 1
          var TEXT_NODE = 3
          var COMMENT_NODE = 8
          var DOCUMENT_NODE = 9
          var DOCUMENT_FRAGMENT_NODE = 11
          var setTextContent = function (node, text) {
            if (text) {
              var firstChild = node.firstChild
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text
                return
              }
            }
            node.textContent = text
          }
          var shorthandToLonghand = {
            animation: [
              'animationDelay',
              'animationDirection',
              'animationDuration',
              'animationFillMode',
              'animationIterationCount',
              'animationName',
              'animationPlayState',
              'animationTimingFunction',
            ],
            background: [
              'backgroundAttachment',
              'backgroundClip',
              'backgroundColor',
              'backgroundImage',
              'backgroundOrigin',
              'backgroundPositionX',
              'backgroundPositionY',
              'backgroundRepeat',
              'backgroundSize',
            ],
            backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
            border: [
              'borderBottomColor',
              'borderBottomStyle',
              'borderBottomWidth',
              'borderImageOutset',
              'borderImageRepeat',
              'borderImageSlice',
              'borderImageSource',
              'borderImageWidth',
              'borderLeftColor',
              'borderLeftStyle',
              'borderLeftWidth',
              'borderRightColor',
              'borderRightStyle',
              'borderRightWidth',
              'borderTopColor',
              'borderTopStyle',
              'borderTopWidth',
            ],
            borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
            borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
            borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
            borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
            borderImage: [
              'borderImageOutset',
              'borderImageRepeat',
              'borderImageSlice',
              'borderImageSource',
              'borderImageWidth',
            ],
            borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
            borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
            borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
            borderRadius: [
              'borderBottomLeftRadius',
              'borderBottomRightRadius',
              'borderTopLeftRadius',
              'borderTopRightRadius',
            ],
            borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
            borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
            borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
            borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
            columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
            columns: ['columnCount', 'columnWidth'],
            flex: ['flexBasis', 'flexGrow', 'flexShrink'],
            flexFlow: ['flexDirection', 'flexWrap'],
            font: [
              'fontFamily',
              'fontFeatureSettings',
              'fontKerning',
              'fontLanguageOverride',
              'fontSize',
              'fontSizeAdjust',
              'fontStretch',
              'fontStyle',
              'fontVariant',
              'fontVariantAlternates',
              'fontVariantCaps',
              'fontVariantEastAsian',
              'fontVariantLigatures',
              'fontVariantNumeric',
              'fontVariantPosition',
              'fontWeight',
              'lineHeight',
            ],
            fontVariant: [
              'fontVariantAlternates',
              'fontVariantCaps',
              'fontVariantEastAsian',
              'fontVariantLigatures',
              'fontVariantNumeric',
              'fontVariantPosition',
            ],
            gap: ['columnGap', 'rowGap'],
            grid: [
              'gridAutoColumns',
              'gridAutoFlow',
              'gridAutoRows',
              'gridTemplateAreas',
              'gridTemplateColumns',
              'gridTemplateRows',
            ],
            gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
            gridColumn: ['gridColumnEnd', 'gridColumnStart'],
            gridColumnGap: ['columnGap'],
            gridGap: ['columnGap', 'rowGap'],
            gridRow: ['gridRowEnd', 'gridRowStart'],
            gridRowGap: ['rowGap'],
            gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
            listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
            margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
            marker: ['markerEnd', 'markerMid', 'markerStart'],
            mask: [
              'maskClip',
              'maskComposite',
              'maskImage',
              'maskMode',
              'maskOrigin',
              'maskPositionX',
              'maskPositionY',
              'maskRepeat',
              'maskSize',
            ],
            maskPosition: ['maskPositionX', 'maskPositionY'],
            outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
            overflow: ['overflowX', 'overflowY'],
            padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
            placeContent: ['alignContent', 'justifyContent'],
            placeItems: ['alignItems', 'justifyItems'],
            placeSelf: ['alignSelf', 'justifySelf'],
            textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
            textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
            transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
            wordWrap: ['overflowWrap'],
          }
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true,
          }
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1)
          }
          var prefixes = ['Webkit', 'ms', 'Moz', 'O']
          Object.keys(isUnitlessNumber).forEach(function (prop) {
            prefixes.forEach(function (prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop]
            })
          })
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === 'boolean' || value === ''
            if (isEmpty) {
              return ''
            }
            if (
              !isCustomProperty &&
              typeof value === 'number' &&
              value !== 0 &&
              !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])
            ) {
              return value + 'px'
            }
            return ('' + value).trim()
          }
          var uppercasePattern = /([A-Z])/g
          var msPattern = /^ms-/
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-')
          }
          var warnValidStyle = function () {}
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/
            var msPattern$1 = /^-ms-/
            var hyphenPattern = /-(.)/g
            var badStyleValueWithSemicolonPattern = /;\s*$/
            var warnedStyleNames = {}
            var warnedStyleValues = {}
            var warnedForNaNValue = false
            var warnedForInfinityValue = false
            var camelize = function (string) {
              return string.replace(hyphenPattern, function (_, character) {
                return character.toUpperCase()
              })
            }
            var warnHyphenatedStyleName = function (name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return
              }
              warnedStyleNames[name] = true
              error('Unsupported style property %s. Did you mean %s?', name, camelize(name.replace(msPattern$1, 'ms-')))
            }
            var warnBadVendoredStyleName = function (name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return
              }
              warnedStyleNames[name] = true
              error(
                'Unsupported vendor-prefixed style property %s. Did you mean %s?',
                name,
                name.charAt(0).toUpperCase() + name.slice(1)
              )
            }
            var warnStyleValueWithSemicolon = function (name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return
              }
              warnedStyleValues[value] = true
              error(
                `Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`,
                name,
                value.replace(badStyleValueWithSemicolonPattern, '')
              )
            }
            var warnStyleValueIsNaN = function (name, value) {
              if (warnedForNaNValue) {
                return
              }
              warnedForNaNValue = true
              error('`NaN` is an invalid value for the `%s` css style property.', name)
            }
            var warnStyleValueIsInfinity = function (name, value) {
              if (warnedForInfinityValue) {
                return
              }
              warnedForInfinityValue = true
              error('`Infinity` is an invalid value for the `%s` css style property.', name)
            }
            warnValidStyle = function (name, value) {
              if (name.indexOf('-') > -1) {
                warnHyphenatedStyleName(name)
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name)
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value)
              }
              if (typeof value === 'number') {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value)
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value)
                }
              }
            }
          }
          var warnValidStyle$1 = warnValidStyle
          function createDangerousStringForStyles(styles) {
            {
              var serialized = ''
              var delimiter = ''
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue
                }
                var styleValue = styles[styleName]
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf('--') === 0
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':'
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty)
                  delimiter = ';'
                }
              }
              return serialized || null
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue
              }
              var isCustomProperty = styleName.indexOf('--') === 0
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName])
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty)
              if (styleName === 'float') {
                styleName = 'cssFloat'
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue)
              } else {
                style2[styleName] = styleValue
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === 'boolean' || value === ''
          }
          function expandShorthandMap(styles) {
            var expanded = {}
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key]
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key
              }
            }
            return expanded
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return
              }
              var expandedUpdates = expandShorthandMap(styleUpdates)
              var expandedStyles = expandShorthandMap(nextStyles)
              var warnedAbout = {}
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key]
                var correctOriginalKey = expandedStyles[key]
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + ',' + correctOriginalKey
                  if (warnedAbout[warningKey]) {
                    continue
                  }
                  warnedAbout[warningKey] = true
                  error(
                    "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",
                    isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating',
                    originalKey,
                    correctOriginalKey
                  )
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true,
          }
          var voidElementTags = _assign(
            {
              menuitem: true,
            },
            omittedCloseTags
          )
          var HTML = '__html'
          function assertValidProps(tag, props) {
            if (!props) {
              return
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(
                    tag + ' is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.'
                  )
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.')
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error(
                    '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.'
                  )
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error(
                  'A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.'
                )
              }
            }
            if (!(props.style == null || typeof props.style === 'object')) {
              {
                throw Error(
                  "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
                )
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf('-') === -1) {
              return typeof props.is === 'string'
            }
            switch (tagName) {
              case 'annotation-xml':
              case 'color-profile':
              case 'font-face':
              case 'font-face-src':
              case 'font-face-uri':
              case 'font-face-format':
              case 'font-face-name':
              case 'missing-glyph':
                return false
              default:
                return true
            }
          }
          var possibleStandardNames = {
            accept: 'accept',
            acceptcharset: 'acceptCharset',
            'accept-charset': 'acceptCharset',
            accesskey: 'accessKey',
            action: 'action',
            allowfullscreen: 'allowFullScreen',
            alt: 'alt',
            as: 'as',
            async: 'async',
            autocapitalize: 'autoCapitalize',
            autocomplete: 'autoComplete',
            autocorrect: 'autoCorrect',
            autofocus: 'autoFocus',
            autoplay: 'autoPlay',
            autosave: 'autoSave',
            capture: 'capture',
            cellpadding: 'cellPadding',
            cellspacing: 'cellSpacing',
            challenge: 'challenge',
            charset: 'charSet',
            checked: 'checked',
            children: 'children',
            cite: 'cite',
            class: 'className',
            classid: 'classID',
            classname: 'className',
            cols: 'cols',
            colspan: 'colSpan',
            content: 'content',
            contenteditable: 'contentEditable',
            contextmenu: 'contextMenu',
            controls: 'controls',
            controlslist: 'controlsList',
            coords: 'coords',
            crossorigin: 'crossOrigin',
            dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
            data: 'data',
            datetime: 'dateTime',
            default: 'default',
            defaultchecked: 'defaultChecked',
            defaultvalue: 'defaultValue',
            defer: 'defer',
            dir: 'dir',
            disabled: 'disabled',
            disablepictureinpicture: 'disablePictureInPicture',
            disableremoteplayback: 'disableRemotePlayback',
            download: 'download',
            draggable: 'draggable',
            enctype: 'encType',
            enterkeyhint: 'enterKeyHint',
            for: 'htmlFor',
            form: 'form',
            formmethod: 'formMethod',
            formaction: 'formAction',
            formenctype: 'formEncType',
            formnovalidate: 'formNoValidate',
            formtarget: 'formTarget',
            frameborder: 'frameBorder',
            headers: 'headers',
            height: 'height',
            hidden: 'hidden',
            high: 'high',
            href: 'href',
            hreflang: 'hrefLang',
            htmlfor: 'htmlFor',
            httpequiv: 'httpEquiv',
            'http-equiv': 'httpEquiv',
            icon: 'icon',
            id: 'id',
            innerhtml: 'innerHTML',
            inputmode: 'inputMode',
            integrity: 'integrity',
            is: 'is',
            itemid: 'itemID',
            itemprop: 'itemProp',
            itemref: 'itemRef',
            itemscope: 'itemScope',
            itemtype: 'itemType',
            keyparams: 'keyParams',
            keytype: 'keyType',
            kind: 'kind',
            label: 'label',
            lang: 'lang',
            list: 'list',
            loop: 'loop',
            low: 'low',
            manifest: 'manifest',
            marginwidth: 'marginWidth',
            marginheight: 'marginHeight',
            max: 'max',
            maxlength: 'maxLength',
            media: 'media',
            mediagroup: 'mediaGroup',
            method: 'method',
            min: 'min',
            minlength: 'minLength',
            multiple: 'multiple',
            muted: 'muted',
            name: 'name',
            nomodule: 'noModule',
            nonce: 'nonce',
            novalidate: 'noValidate',
            open: 'open',
            optimum: 'optimum',
            pattern: 'pattern',
            placeholder: 'placeholder',
            playsinline: 'playsInline',
            poster: 'poster',
            preload: 'preload',
            profile: 'profile',
            radiogroup: 'radioGroup',
            readonly: 'readOnly',
            referrerpolicy: 'referrerPolicy',
            rel: 'rel',
            required: 'required',
            reversed: 'reversed',
            role: 'role',
            rows: 'rows',
            rowspan: 'rowSpan',
            sandbox: 'sandbox',
            scope: 'scope',
            scoped: 'scoped',
            scrolling: 'scrolling',
            seamless: 'seamless',
            selected: 'selected',
            shape: 'shape',
            size: 'size',
            sizes: 'sizes',
            span: 'span',
            spellcheck: 'spellCheck',
            src: 'src',
            srcdoc: 'srcDoc',
            srclang: 'srcLang',
            srcset: 'srcSet',
            start: 'start',
            step: 'step',
            style: 'style',
            summary: 'summary',
            tabindex: 'tabIndex',
            target: 'target',
            title: 'title',
            type: 'type',
            usemap: 'useMap',
            value: 'value',
            width: 'width',
            wmode: 'wmode',
            wrap: 'wrap',
            about: 'about',
            accentheight: 'accentHeight',
            'accent-height': 'accentHeight',
            accumulate: 'accumulate',
            additive: 'additive',
            alignmentbaseline: 'alignmentBaseline',
            'alignment-baseline': 'alignmentBaseline',
            allowreorder: 'allowReorder',
            alphabetic: 'alphabetic',
            amplitude: 'amplitude',
            arabicform: 'arabicForm',
            'arabic-form': 'arabicForm',
            ascent: 'ascent',
            attributename: 'attributeName',
            attributetype: 'attributeType',
            autoreverse: 'autoReverse',
            azimuth: 'azimuth',
            basefrequency: 'baseFrequency',
            baselineshift: 'baselineShift',
            'baseline-shift': 'baselineShift',
            baseprofile: 'baseProfile',
            bbox: 'bbox',
            begin: 'begin',
            bias: 'bias',
            by: 'by',
            calcmode: 'calcMode',
            capheight: 'capHeight',
            'cap-height': 'capHeight',
            clip: 'clip',
            clippath: 'clipPath',
            'clip-path': 'clipPath',
            clippathunits: 'clipPathUnits',
            cliprule: 'clipRule',
            'clip-rule': 'clipRule',
            color: 'color',
            colorinterpolation: 'colorInterpolation',
            'color-interpolation': 'colorInterpolation',
            colorinterpolationfilters: 'colorInterpolationFilters',
            'color-interpolation-filters': 'colorInterpolationFilters',
            colorprofile: 'colorProfile',
            'color-profile': 'colorProfile',
            colorrendering: 'colorRendering',
            'color-rendering': 'colorRendering',
            contentscripttype: 'contentScriptType',
            contentstyletype: 'contentStyleType',
            cursor: 'cursor',
            cx: 'cx',
            cy: 'cy',
            d: 'd',
            datatype: 'datatype',
            decelerate: 'decelerate',
            descent: 'descent',
            diffuseconstant: 'diffuseConstant',
            direction: 'direction',
            display: 'display',
            divisor: 'divisor',
            dominantbaseline: 'dominantBaseline',
            'dominant-baseline': 'dominantBaseline',
            dur: 'dur',
            dx: 'dx',
            dy: 'dy',
            edgemode: 'edgeMode',
            elevation: 'elevation',
            enablebackground: 'enableBackground',
            'enable-background': 'enableBackground',
            end: 'end',
            exponent: 'exponent',
            externalresourcesrequired: 'externalResourcesRequired',
            fill: 'fill',
            fillopacity: 'fillOpacity',
            'fill-opacity': 'fillOpacity',
            fillrule: 'fillRule',
            'fill-rule': 'fillRule',
            filter: 'filter',
            filterres: 'filterRes',
            filterunits: 'filterUnits',
            floodopacity: 'floodOpacity',
            'flood-opacity': 'floodOpacity',
            floodcolor: 'floodColor',
            'flood-color': 'floodColor',
            focusable: 'focusable',
            fontfamily: 'fontFamily',
            'font-family': 'fontFamily',
            fontsize: 'fontSize',
            'font-size': 'fontSize',
            fontsizeadjust: 'fontSizeAdjust',
            'font-size-adjust': 'fontSizeAdjust',
            fontstretch: 'fontStretch',
            'font-stretch': 'fontStretch',
            fontstyle: 'fontStyle',
            'font-style': 'fontStyle',
            fontvariant: 'fontVariant',
            'font-variant': 'fontVariant',
            fontweight: 'fontWeight',
            'font-weight': 'fontWeight',
            format: 'format',
            from: 'from',
            fx: 'fx',
            fy: 'fy',
            g1: 'g1',
            g2: 'g2',
            glyphname: 'glyphName',
            'glyph-name': 'glyphName',
            glyphorientationhorizontal: 'glyphOrientationHorizontal',
            'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
            glyphorientationvertical: 'glyphOrientationVertical',
            'glyph-orientation-vertical': 'glyphOrientationVertical',
            glyphref: 'glyphRef',
            gradienttransform: 'gradientTransform',
            gradientunits: 'gradientUnits',
            hanging: 'hanging',
            horizadvx: 'horizAdvX',
            'horiz-adv-x': 'horizAdvX',
            horizoriginx: 'horizOriginX',
            'horiz-origin-x': 'horizOriginX',
            ideographic: 'ideographic',
            imagerendering: 'imageRendering',
            'image-rendering': 'imageRendering',
            in2: 'in2',
            in: 'in',
            inlist: 'inlist',
            intercept: 'intercept',
            k1: 'k1',
            k2: 'k2',
            k3: 'k3',
            k4: 'k4',
            k: 'k',
            kernelmatrix: 'kernelMatrix',
            kernelunitlength: 'kernelUnitLength',
            kerning: 'kerning',
            keypoints: 'keyPoints',
            keysplines: 'keySplines',
            keytimes: 'keyTimes',
            lengthadjust: 'lengthAdjust',
            letterspacing: 'letterSpacing',
            'letter-spacing': 'letterSpacing',
            lightingcolor: 'lightingColor',
            'lighting-color': 'lightingColor',
            limitingconeangle: 'limitingConeAngle',
            local: 'local',
            markerend: 'markerEnd',
            'marker-end': 'markerEnd',
            markerheight: 'markerHeight',
            markermid: 'markerMid',
            'marker-mid': 'markerMid',
            markerstart: 'markerStart',
            'marker-start': 'markerStart',
            markerunits: 'markerUnits',
            markerwidth: 'markerWidth',
            mask: 'mask',
            maskcontentunits: 'maskContentUnits',
            maskunits: 'maskUnits',
            mathematical: 'mathematical',
            mode: 'mode',
            numoctaves: 'numOctaves',
            offset: 'offset',
            opacity: 'opacity',
            operator: 'operator',
            order: 'order',
            orient: 'orient',
            orientation: 'orientation',
            origin: 'origin',
            overflow: 'overflow',
            overlineposition: 'overlinePosition',
            'overline-position': 'overlinePosition',
            overlinethickness: 'overlineThickness',
            'overline-thickness': 'overlineThickness',
            paintorder: 'paintOrder',
            'paint-order': 'paintOrder',
            panose1: 'panose1',
            'panose-1': 'panose1',
            pathlength: 'pathLength',
            patterncontentunits: 'patternContentUnits',
            patterntransform: 'patternTransform',
            patternunits: 'patternUnits',
            pointerevents: 'pointerEvents',
            'pointer-events': 'pointerEvents',
            points: 'points',
            pointsatx: 'pointsAtX',
            pointsaty: 'pointsAtY',
            pointsatz: 'pointsAtZ',
            prefix: 'prefix',
            preservealpha: 'preserveAlpha',
            preserveaspectratio: 'preserveAspectRatio',
            primitiveunits: 'primitiveUnits',
            property: 'property',
            r: 'r',
            radius: 'radius',
            refx: 'refX',
            refy: 'refY',
            renderingintent: 'renderingIntent',
            'rendering-intent': 'renderingIntent',
            repeatcount: 'repeatCount',
            repeatdur: 'repeatDur',
            requiredextensions: 'requiredExtensions',
            requiredfeatures: 'requiredFeatures',
            resource: 'resource',
            restart: 'restart',
            result: 'result',
            results: 'results',
            rotate: 'rotate',
            rx: 'rx',
            ry: 'ry',
            scale: 'scale',
            security: 'security',
            seed: 'seed',
            shaperendering: 'shapeRendering',
            'shape-rendering': 'shapeRendering',
            slope: 'slope',
            spacing: 'spacing',
            specularconstant: 'specularConstant',
            specularexponent: 'specularExponent',
            speed: 'speed',
            spreadmethod: 'spreadMethod',
            startoffset: 'startOffset',
            stddeviation: 'stdDeviation',
            stemh: 'stemh',
            stemv: 'stemv',
            stitchtiles: 'stitchTiles',
            stopcolor: 'stopColor',
            'stop-color': 'stopColor',
            stopopacity: 'stopOpacity',
            'stop-opacity': 'stopOpacity',
            strikethroughposition: 'strikethroughPosition',
            'strikethrough-position': 'strikethroughPosition',
            strikethroughthickness: 'strikethroughThickness',
            'strikethrough-thickness': 'strikethroughThickness',
            string: 'string',
            stroke: 'stroke',
            strokedasharray: 'strokeDasharray',
            'stroke-dasharray': 'strokeDasharray',
            strokedashoffset: 'strokeDashoffset',
            'stroke-dashoffset': 'strokeDashoffset',
            strokelinecap: 'strokeLinecap',
            'stroke-linecap': 'strokeLinecap',
            strokelinejoin: 'strokeLinejoin',
            'stroke-linejoin': 'strokeLinejoin',
            strokemiterlimit: 'strokeMiterlimit',
            'stroke-miterlimit': 'strokeMiterlimit',
            strokewidth: 'strokeWidth',
            'stroke-width': 'strokeWidth',
            strokeopacity: 'strokeOpacity',
            'stroke-opacity': 'strokeOpacity',
            suppresscontenteditablewarning: 'suppressContentEditableWarning',
            suppresshydrationwarning: 'suppressHydrationWarning',
            surfacescale: 'surfaceScale',
            systemlanguage: 'systemLanguage',
            tablevalues: 'tableValues',
            targetx: 'targetX',
            targety: 'targetY',
            textanchor: 'textAnchor',
            'text-anchor': 'textAnchor',
            textdecoration: 'textDecoration',
            'text-decoration': 'textDecoration',
            textlength: 'textLength',
            textrendering: 'textRendering',
            'text-rendering': 'textRendering',
            to: 'to',
            transform: 'transform',
            typeof: 'typeof',
            u1: 'u1',
            u2: 'u2',
            underlineposition: 'underlinePosition',
            'underline-position': 'underlinePosition',
            underlinethickness: 'underlineThickness',
            'underline-thickness': 'underlineThickness',
            unicode: 'unicode',
            unicodebidi: 'unicodeBidi',
            'unicode-bidi': 'unicodeBidi',
            unicoderange: 'unicodeRange',
            'unicode-range': 'unicodeRange',
            unitsperem: 'unitsPerEm',
            'units-per-em': 'unitsPerEm',
            unselectable: 'unselectable',
            valphabetic: 'vAlphabetic',
            'v-alphabetic': 'vAlphabetic',
            values: 'values',
            vectoreffect: 'vectorEffect',
            'vector-effect': 'vectorEffect',
            version: 'version',
            vertadvy: 'vertAdvY',
            'vert-adv-y': 'vertAdvY',
            vertoriginx: 'vertOriginX',
            'vert-origin-x': 'vertOriginX',
            vertoriginy: 'vertOriginY',
            'vert-origin-y': 'vertOriginY',
            vhanging: 'vHanging',
            'v-hanging': 'vHanging',
            videographic: 'vIdeographic',
            'v-ideographic': 'vIdeographic',
            viewbox: 'viewBox',
            viewtarget: 'viewTarget',
            visibility: 'visibility',
            vmathematical: 'vMathematical',
            'v-mathematical': 'vMathematical',
            vocab: 'vocab',
            widths: 'widths',
            wordspacing: 'wordSpacing',
            'word-spacing': 'wordSpacing',
            writingmode: 'writingMode',
            'writing-mode': 'writingMode',
            x1: 'x1',
            x2: 'x2',
            x: 'x',
            xchannelselector: 'xChannelSelector',
            xheight: 'xHeight',
            'x-height': 'xHeight',
            xlinkactuate: 'xlinkActuate',
            'xlink:actuate': 'xlinkActuate',
            xlinkarcrole: 'xlinkArcrole',
            'xlink:arcrole': 'xlinkArcrole',
            xlinkhref: 'xlinkHref',
            'xlink:href': 'xlinkHref',
            xlinkrole: 'xlinkRole',
            'xlink:role': 'xlinkRole',
            xlinkshow: 'xlinkShow',
            'xlink:show': 'xlinkShow',
            xlinktitle: 'xlinkTitle',
            'xlink:title': 'xlinkTitle',
            xlinktype: 'xlinkType',
            'xlink:type': 'xlinkType',
            xmlbase: 'xmlBase',
            'xml:base': 'xmlBase',
            xmllang: 'xmlLang',
            'xml:lang': 'xmlLang',
            xmlns: 'xmlns',
            'xml:space': 'xmlSpace',
            xmlnsxlink: 'xmlnsXlink',
            'xmlns:xlink': 'xmlnsXlink',
            xmlspace: 'xmlSpace',
            y1: 'y1',
            y2: 'y2',
            y: 'y',
            ychannelselector: 'yChannelSelector',
            z: 'z',
            zoomandpan: 'zoomAndPan',
          }
          var ariaProperties = {
            'aria-current': 0,
            'aria-details': 0,
            'aria-disabled': 0,
            'aria-hidden': 0,
            'aria-invalid': 0,
            'aria-keyshortcuts': 0,
            'aria-label': 0,
            'aria-roledescription': 0,
            'aria-autocomplete': 0,
            'aria-checked': 0,
            'aria-expanded': 0,
            'aria-haspopup': 0,
            'aria-level': 0,
            'aria-modal': 0,
            'aria-multiline': 0,
            'aria-multiselectable': 0,
            'aria-orientation': 0,
            'aria-placeholder': 0,
            'aria-pressed': 0,
            'aria-readonly': 0,
            'aria-required': 0,
            'aria-selected': 0,
            'aria-sort': 0,
            'aria-valuemax': 0,
            'aria-valuemin': 0,
            'aria-valuenow': 0,
            'aria-valuetext': 0,
            'aria-atomic': 0,
            'aria-busy': 0,
            'aria-live': 0,
            'aria-relevant': 0,
            'aria-dropeffect': 0,
            'aria-grabbed': 0,
            'aria-activedescendant': 0,
            'aria-colcount': 0,
            'aria-colindex': 0,
            'aria-colspan': 0,
            'aria-controls': 0,
            'aria-describedby': 0,
            'aria-errormessage': 0,
            'aria-flowto': 0,
            'aria-labelledby': 0,
            'aria-owns': 0,
            'aria-posinset': 0,
            'aria-rowcount': 0,
            'aria-rowindex': 0,
            'aria-rowspan': 0,
            'aria-setsize': 0,
          }
          var warnedProperties = {}
          var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$')
          var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$')
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true
              }
              if (rARIACamel.test(name)) {
                var ariaName = 'aria-' + name.slice(4).toLowerCase()
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null
                if (correctName == null) {
                  error(
                    'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.',
                    name
                  )
                  warnedProperties[name] = true
                  return true
                }
                if (name !== correctName) {
                  error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName)
                  warnedProperties[name] = true
                  return true
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase()
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null
                if (standardName == null) {
                  warnedProperties[name] = true
                  return false
                }
                if (name !== standardName) {
                  error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName)
                  warnedProperties[name] = true
                  return true
                }
              }
            }
            return true
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = []
              for (var key in props) {
                var isValid = validateProperty(type, key)
                if (!isValid) {
                  invalidProps.push(key)
                }
              }
              var unknownPropString = invalidProps
                .map(function (prop) {
                  return '`' + prop + '`'
                })
                .join(', ')
              if (invalidProps.length === 1) {
                error(
                  'Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props',
                  unknownPropString,
                  type
                )
              } else if (invalidProps.length > 1) {
                error(
                  'Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props',
                  unknownPropString,
                  type
                )
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return
            }
            warnInvalidARIAProps(type, props)
          }
          var didWarnValueNull = false
          function validateProperties$1(type, props) {
            {
              if (type !== 'input' && type !== 'textarea' && type !== 'select') {
                return
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true
                if (type === 'select' && props.multiple) {
                  error(
                    '`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.',
                    type
                  )
                } else {
                  error(
                    '`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.',
                    type
                  )
                }
              }
            }
          }
          var validateProperty$1 = function () {}
          {
            var warnedProperties$1 = {}
            var _hasOwnProperty = Object.prototype.hasOwnProperty
            var EVENT_NAME_REGEX = /^on./
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/
            var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$')
            var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$')
            validateProperty$1 = function (tagName, name, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true
              }
              var lowerCasedName = name.toLowerCase()
              if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
                error(
                  'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.'
                )
                warnedProperties$1[name] = true
                return true
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies,
                  possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName)
                  ? possibleRegistrationNames2[lowerCasedName]
                  : null
                if (registrationName != null) {
                  error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName)
                  warnedProperties$1[name] = true
                  return true
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error('Unknown event handler property `%s`. It will be ignored.', name)
                  warnedProperties$1[name] = true
                  return true
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error(
                    'Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.',
                    name
                  )
                }
                warnedProperties$1[name] = true
                return true
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true
              }
              if (lowerCasedName === 'innerhtml') {
                error(
                  'Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.'
                )
                warnedProperties$1[name] = true
                return true
              }
              if (lowerCasedName === 'aria') {
                error(
                  'The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.'
                )
                warnedProperties$1[name] = true
                return true
              }
              if (lowerCasedName === 'is' && value !== null && value !== void 0 && typeof value !== 'string') {
                error(
                  'Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.',
                  typeof value
                )
                warnedProperties$1[name] = true
                return true
              }
              if (typeof value === 'number' && isNaN(value)) {
                error('Received NaN for the `%s` attribute. If this is expected, cast the value to a string.', name)
                warnedProperties$1[name] = true
                return true
              }
              var propertyInfo = getPropertyInfo(name)
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName]
                if (standardName !== name) {
                  error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName)
                  warnedProperties$1[name] = true
                  return true
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error(
                  'React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.',
                  name,
                  lowerCasedName
                )
                warnedProperties$1[name] = true
                return true
              }
              if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
                    value,
                    name,
                    name,
                    value,
                    name
                  )
                } else {
                  error(
                    'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
                    value,
                    name,
                    name,
                    value,
                    name,
                    name,
                    name
                  )
                }
                warnedProperties$1[name] = true
                return true
              }
              if (isReserved) {
                return true
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true
                return false
              }
              if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error(
                  'Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?',
                  value,
                  name,
                  value === 'false'
                    ? 'The browser will interpret it as a truthy value.'
                    : 'Although this works, it will not work as expected if you pass the string "false".',
                  name,
                  value
                )
                warnedProperties$1[name] = true
                return true
              }
              return true
            }
          }
          var warnUnknownProperties = function (type, props, eventRegistry) {
            {
              var unknownProps = []
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry)
                if (!isValid) {
                  unknownProps.push(key)
                }
              }
              var unknownPropString = unknownProps
                .map(function (prop) {
                  return '`' + prop + '`'
                })
                .join(', ')
              if (unknownProps.length === 1) {
                error(
                  'Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ',
                  unknownPropString,
                  type
                )
              } else if (unknownProps.length > 1) {
                error(
                  'Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ',
                  unknownPropString,
                  type
                )
              }
            }
          }
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return
            }
            warnUnknownProperties(type, props, eventRegistry)
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1
          var IS_NON_DELEGATED = 1 << 1
          var IS_CAPTURE_PHASE = 1 << 2
          var IS_REPLAYED = 1 << 4
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS =
            IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target
          }
          var restoreImpl = null
          var restoreTarget = null
          var restoreQueue = null
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target)
            if (!internalInstance) {
              return
            }
            if (!(typeof restoreImpl === 'function')) {
              {
                throw Error(
                  'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            }
            var stateNode = internalInstance.stateNode
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode)
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props)
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target)
              } else {
                restoreQueue = [target]
              }
            } else {
              restoreTarget = target
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return
            }
            var target = restoreTarget
            var queuedTargets = restoreQueue
            restoreTarget = null
            restoreQueue = null
            restoreStateOfTarget(target)
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i])
              }
            }
          }
          var batchedUpdatesImpl = function (fn, bookkeeping) {
            return fn(bookkeeping)
          }
          var discreteUpdatesImpl = function (fn, a, b, c, d) {
            return fn(a, b, c, d)
          }
          var flushDiscreteUpdatesImpl = function () {}
          var batchedEventUpdatesImpl = batchedUpdatesImpl
          var isInsideEventHandler = false
          var isBatchingEventUpdates = false
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore()
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl()
              restoreStateIfNeeded()
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping)
            }
            isInsideEventHandler = true
            try {
              return batchedUpdatesImpl(fn, bookkeeping)
            } finally {
              isInsideEventHandler = false
              finishEventHandler()
            }
          }
          function batchedEventUpdates(fn, a, b) {
            if (isBatchingEventUpdates) {
              return fn(a, b)
            }
            isBatchingEventUpdates = true
            try {
              return batchedEventUpdatesImpl(fn, a, b)
            } finally {
              isBatchingEventUpdates = false
              finishEventHandler()
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var prevIsInsideEventHandler = isInsideEventHandler
            isInsideEventHandler = true
            try {
              return discreteUpdatesImpl(fn, a, b, c, d)
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler
              if (!isInsideEventHandler) {
                finishEventHandler()
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl()
              }
            }
          }
          function setBatchingImplementation(
            _batchedUpdatesImpl,
            _discreteUpdatesImpl,
            _flushDiscreteUpdatesImpl,
            _batchedEventUpdatesImpl
          ) {
            batchedUpdatesImpl = _batchedUpdatesImpl
            discreteUpdatesImpl = _discreteUpdatesImpl
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl
          }
          function isInteractive(tag) {
            return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea'
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case 'onClick':
              case 'onClickCapture':
              case 'onDoubleClick':
              case 'onDoubleClickCapture':
              case 'onMouseDown':
              case 'onMouseDownCapture':
              case 'onMouseMove':
              case 'onMouseMoveCapture':
              case 'onMouseUp':
              case 'onMouseUpCapture':
              case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type))
              default:
                return false
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode
            if (stateNode === null) {
              return null
            }
            var props = getFiberCurrentPropsFromNode(stateNode)
            if (props === null) {
              return null
            }
            var listener = props[registrationName]
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null
            }
            if (!(!listener || typeof listener === 'function')) {
              {
                throw Error(
                  'Expected `' +
                    registrationName +
                    '` listener to be a function, instead got a value of `' +
                    typeof listener +
                    '` type.'
                )
              }
            }
            return listener
          }
          var passiveBrowserEventsSupported = false
          if (canUseDOM) {
            try {
              var options = {}
              Object.defineProperty(options, 'passive', {
                get: function () {
                  passiveBrowserEventsSupported = true
                },
              })
              window.addEventListener('test', options, options)
              window.removeEventListener('test', options, options)
            } catch (e) {
              passiveBrowserEventsSupported = false
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3)
            try {
              func.apply(context, funcArgs)
            } catch (error2) {
              this.onError(error2)
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd
          {
            if (
              typeof window !== 'undefined' &&
              typeof window.dispatchEvent === 'function' &&
              typeof document !== 'undefined' &&
              typeof document.createEvent === 'function'
            ) {
              var fakeNode = document.createElement('react')
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (!(typeof document !== 'undefined')) {
                  {
                    throw Error(
                      'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.'
                    )
                  }
                }
                var evt = document.createEvent('Event')
                var didCall = false
                var didError = true
                var windowEvent = window.event
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event')
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false)
                  if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
                    window.event = windowEvent
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3)
                function callCallback2() {
                  didCall = true
                  restoreAfterDispatch()
                  func.apply(context, funcArgs)
                  didError = false
                }
                var error2
                var didSetError = false
                var isCrossOriginError = false
                function handleWindowError(event) {
                  error2 = event.error
                  didSetError = true
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === 'object') {
                      try {
                        error2._suppressLogging = true
                      } catch (inner) {}
                    }
                  }
                }
                var evtType = 'react-' + (name ? name : 'invokeguardedcallback')
                window.addEventListener('error', handleWindowError)
                fakeNode.addEventListener(evtType, callCallback2, false)
                evt.initEvent(evtType, false, false)
                fakeNode.dispatchEvent(evt)
                if (windowEventDescriptor) {
                  Object.defineProperty(window, 'event', windowEventDescriptor)
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(
                      `An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`
                    )
                  } else if (isCrossOriginError) {
                    error2 = new Error(
                      "A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information."
                    )
                  }
                  this.onError(error2)
                }
                window.removeEventListener('error', handleWindowError)
                if (!didCall) {
                  restoreAfterDispatch()
                  return invokeGuardedCallbackProd.apply(this, arguments)
                }
              }
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl
          var hasError = false
          var caughtError = null
          var hasRethrowError = false
          var rethrowError = null
          var reporter = {
            onError: function (error2) {
              hasError = true
              caughtError = error2
            },
          }
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false
            caughtError = null
            invokeGuardedCallbackImpl$1.apply(reporter, arguments)
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments)
            if (hasError) {
              var error2 = clearCaughtError()
              if (!hasRethrowError) {
                hasRethrowError = true
                rethrowError = error2
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError
              hasRethrowError = false
              rethrowError = null
              throw error2
            }
          }
          function hasCaughtError() {
            return hasError
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError
              hasError = false
              caughtError = null
              return error2
            } else {
              {
                {
                  throw Error(
                    'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.'
                  )
                }
              }
            }
          }
          function get(key) {
            return key._reactInternals
          }
          function has(key) {
            return key._reactInternals !== void 0
          }
          function set(key, value) {
            key._reactInternals = value
          }
          var NoFlags = 0
          var PerformedWork = 1
          var Placement = 2
          var Update = 4
          var PlacementAndUpdate = 6
          var Deletion = 8
          var ContentReset = 16
          var Callback = 32
          var DidCapture = 64
          var Ref = 128
          var Snapshot = 256
          var Passive = 512
          var PassiveUnmountPendingDev = 8192
          var Hydrating = 1024
          var HydratingAndUpdate = 1028
          var LifecycleEffectMask = 932
          var HostEffectMask = 2047
          var Incomplete = 2048
          var ShouldCapture = 4096
          var ForceUpdateForLegacySuspense = 16384
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner
          function getNearestMountedFiber(fiber) {
            var node = fiber
            var nearestMounted = fiber
            if (!fiber.alternate) {
              var nextNode = node
              do {
                node = nextNode
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return
                }
                nextNode = node.return
              } while (nextNode)
            } else {
              while (node.return) {
                node = node.return
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted
            }
            return null
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState
              if (suspenseState === null) {
                var current2 = fiber.alternate
                if (current2 !== null) {
                  suspenseState = current2.memoizedState
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated
              }
            }
            return null
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner
                var instance = ownerFiber.stateNode
                if (!instance._warnedAboutRefsInRender) {
                  error(
                    '%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.',
                    getComponentName(ownerFiber.type) || 'A component'
                  )
                }
                instance._warnedAboutRefsInRender = true
              }
            }
            var fiber = get(component)
            if (!fiber) {
              return false
            }
            return getNearestMountedFiber(fiber) === fiber
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error('Unable to find node on an unmounted component.')
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber)
              if (!(nearestMounted !== null)) {
                {
                  throw Error('Unable to find node on an unmounted component.')
                }
              }
              if (nearestMounted !== fiber) {
                return null
              }
              return fiber
            }
            var a = fiber
            var b = alternate
            while (true) {
              var parentA = a.return
              if (parentA === null) {
                break
              }
              var parentB = parentA.alternate
              if (parentB === null) {
                var nextParent = parentA.return
                if (nextParent !== null) {
                  a = b = nextParent
                  continue
                }
                break
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA)
                    return fiber
                  }
                  if (child === b) {
                    assertIsMounted(parentA)
                    return alternate
                  }
                  child = child.sibling
                }
                {
                  {
                    throw Error('Unable to find node on an unmounted component.')
                  }
                }
              }
              if (a.return !== b.return) {
                a = parentA
                b = parentB
              } else {
                var didFindChild = false
                var _child = parentA.child
                while (_child) {
                  if (_child === a) {
                    didFindChild = true
                    a = parentA
                    b = parentB
                    break
                  }
                  if (_child === b) {
                    didFindChild = true
                    b = parentA
                    a = parentB
                    break
                  }
                  _child = _child.sibling
                }
                if (!didFindChild) {
                  _child = parentB.child
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true
                      a = parentB
                      b = parentA
                      break
                    }
                    if (_child === b) {
                      didFindChild = true
                      b = parentB
                      a = parentA
                      break
                    }
                    _child = _child.sibling
                  }
                  if (!didFindChild) {
                    {
                      throw Error(
                        'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.'
                      )
                    }
                  }
                }
              }
              if (!(a.alternate === b)) {
                {
                  throw Error(
                    "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
                  )
                }
              }
            }
            if (!(a.tag === HostRoot)) {
              {
                throw Error('Unable to find node on an unmounted component.')
              }
            }
            if (a.stateNode.current === a) {
              return fiber
            }
            return alternate
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent)
            if (!currentParent) {
              return null
            }
            var node = currentParent
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node
              } else if (node.child) {
                node.child.return = node
                node = node.child
                continue
              }
              if (node === currentParent) {
                return null
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null
                }
                node = node.return
              }
              node.sibling.return = node.return
              node = node.sibling
            }
            return null
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent)
            if (!currentParent) {
              return null
            }
            var node = currentParent
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node
                node = node.child
                continue
              }
              if (node === currentParent) {
                return null
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null
                }
                node = node.return
              }
              node.sibling.return = node.return
              node = node.sibling
            }
            return null
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber
            var parentFiberAlternate = parentFiber.alternate
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true
              }
              node = node.return
            }
            return false
          }
          var attemptUserBlockingHydration
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn
          }
          var attemptContinuousHydration
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn
          }
          var attemptHydrationAtCurrentPriority
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn
          }
          var attemptHydrationAtPriority
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn
          }
          var hasScheduledReplayAttempt = false
          var queuedDiscreteEvents = []
          var queuedFocus = null
          var queuedDrag = null
          var queuedMouse = null
          var queuedPointers = new Map()
          var queuedPointerCaptures = new Map()
          var queuedExplicitHydrationTargets = []
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0
          }
          var discreteReplayableEvents = [
            'mousedown',
            'mouseup',
            'touchcancel',
            'touchend',
            'touchstart',
            'auxclick',
            'dblclick',
            'pointercancel',
            'pointerdown',
            'pointerup',
            'dragend',
            'dragstart',
            'drop',
            'compositionend',
            'compositionstart',
            'keydown',
            'keypress',
            'keyup',
            'input',
            'textInput',
            'copy',
            'cut',
            'paste',
            'click',
            'change',
            'contextmenu',
            'reset',
            'submit',
          ]
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1
          }
          function createQueuedReplayableEvent(
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          ) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer],
            }
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            )
            queuedDiscreteEvents.push(queuedEvent)
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case 'focusin':
              case 'focusout':
                queuedFocus = null
                break
              case 'dragenter':
              case 'dragleave':
                queuedDrag = null
                break
              case 'mouseover':
              case 'mouseout':
                queuedMouse = null
                break
              case 'pointerover':
              case 'pointerout': {
                var pointerId = nativeEvent.pointerId
                queuedPointers.delete(pointerId)
                break
              }
              case 'gotpointercapture':
              case 'lostpointercapture': {
                var _pointerId = nativeEvent.pointerId
                queuedPointerCaptures.delete(_pointerId)
                break
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(
            existingQueuedEvent,
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          ) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              )
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn)
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2)
                }
              }
              return queuedEvent
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags
            var targetContainers = existingQueuedEvent.targetContainers
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer)
            }
            return existingQueuedEvent
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case 'focusin': {
                var focusEvent = nativeEvent
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedFocus,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  focusEvent
                )
                return true
              }
              case 'dragenter': {
                var dragEvent = nativeEvent
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedDrag,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  dragEvent
                )
                return true
              }
              case 'mouseover': {
                var mouseEvent = nativeEvent
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedMouse,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  mouseEvent
                )
                return true
              }
              case 'pointerover': {
                var pointerEvent = nativeEvent
                var pointerId = pointerEvent.pointerId
                queuedPointers.set(
                  pointerId,
                  accumulateOrCreateContinuousQueuedReplayableEvent(
                    queuedPointers.get(pointerId) || null,
                    blockedOn,
                    domEventName,
                    eventSystemFlags,
                    targetContainer,
                    pointerEvent
                  )
                )
                return true
              }
              case 'gotpointercapture': {
                var _pointerEvent = nativeEvent
                var _pointerId2 = _pointerEvent.pointerId
                queuedPointerCaptures.set(
                  _pointerId2,
                  accumulateOrCreateContinuousQueuedReplayableEvent(
                    queuedPointerCaptures.get(_pointerId2) || null,
                    blockedOn,
                    domEventName,
                    eventSystemFlags,
                    targetContainer,
                    _pointerEvent
                  )
                )
                return true
              }
            }
            return false
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target)
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst)
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted)
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function () {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
                        attemptHydrationAtCurrentPriority(nearestMounted)
                      })
                    })
                    return
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted)
                    return
                  }
                }
              }
            }
            queuedTarget.blockedOn = null
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false
            }
            var targetContainers = queuedEvent.targetContainers
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0]
              var nextBlockedOn = attemptToDispatchEvent(
                queuedEvent.domEventName,
                queuedEvent.eventSystemFlags,
                targetContainer,
                queuedEvent.nativeEvent
              )
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn)
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3)
                }
                queuedEvent.blockedOn = nextBlockedOn
                return false
              }
              targetContainers.shift()
            }
            return true
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key)
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0]
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn)
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4)
                }
                break
              }
              var targetContainers = nextDiscreteEvent.targetContainers
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0]
                var nextBlockedOn = attemptToDispatchEvent(
                  nextDiscreteEvent.domEventName,
                  nextDiscreteEvent.eventSystemFlags,
                  targetContainer,
                  nextDiscreteEvent.nativeEvent
                )
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn
                  break
                }
                targetContainers.shift()
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift()
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap)
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap)
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents)
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked)
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i]
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked)
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked)
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked)
            }
            var unblock = function (queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked)
            }
            queuedPointers.forEach(unblock)
            queuedPointerCaptures.forEach(unblock)
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i]
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0]
              if (nextExplicitTarget.blockedOn !== null) {
                break
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget)
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift()
                }
              }
            }
          }
          var DiscreteEvent = 0
          var UserBlockingEvent = 1
          var ContinuousEvent = 2
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {}
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase()
            prefixes2['Webkit' + styleProp] = 'webkit' + eventName
            prefixes2['Moz' + styleProp] = 'moz' + eventName
            return prefixes2
          }
          var vendorPrefixes = {
            animationend: makePrefixMap('Animation', 'AnimationEnd'),
            animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
            animationstart: makePrefixMap('Animation', 'AnimationStart'),
            transitionend: makePrefixMap('Transition', 'TransitionEnd'),
          }
          var prefixedEventNames = {}
          var style = {}
          if (canUseDOM) {
            style = document.createElement('div').style
            if (!('AnimationEvent' in window)) {
              delete vendorPrefixes.animationend.animation
              delete vendorPrefixes.animationiteration.animation
              delete vendorPrefixes.animationstart.animation
            }
            if (!('TransitionEvent' in window)) {
              delete vendorPrefixes.transitionend.transition
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName]
            } else if (!vendorPrefixes[eventName]) {
              return eventName
            }
            var prefixMap = vendorPrefixes[eventName]
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return (prefixedEventNames[eventName] = prefixMap[styleProp])
              }
            }
            return eventName
          }
          var ANIMATION_END = getVendorPrefixedEventName('animationend')
          var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration')
          var ANIMATION_START = getVendorPrefixedEventName('animationstart')
          var TRANSITION_END = getVendorPrefixedEventName('transitionend')
          var topLevelEventsToReactNames = new Map()
          var eventPriorities = new Map()
          var discreteEventPairsForSimpleEventPlugin = [
            'cancel',
            'cancel',
            'click',
            'click',
            'close',
            'close',
            'contextmenu',
            'contextMenu',
            'copy',
            'copy',
            'cut',
            'cut',
            'auxclick',
            'auxClick',
            'dblclick',
            'doubleClick',
            'dragend',
            'dragEnd',
            'dragstart',
            'dragStart',
            'drop',
            'drop',
            'focusin',
            'focus',
            'focusout',
            'blur',
            'input',
            'input',
            'invalid',
            'invalid',
            'keydown',
            'keyDown',
            'keypress',
            'keyPress',
            'keyup',
            'keyUp',
            'mousedown',
            'mouseDown',
            'mouseup',
            'mouseUp',
            'paste',
            'paste',
            'pause',
            'pause',
            'play',
            'play',
            'pointercancel',
            'pointerCancel',
            'pointerdown',
            'pointerDown',
            'pointerup',
            'pointerUp',
            'ratechange',
            'rateChange',
            'reset',
            'reset',
            'seeked',
            'seeked',
            'submit',
            'submit',
            'touchcancel',
            'touchCancel',
            'touchend',
            'touchEnd',
            'touchstart',
            'touchStart',
            'volumechange',
            'volumeChange',
          ]
          var otherDiscreteEvents = [
            'change',
            'selectionchange',
            'textInput',
            'compositionstart',
            'compositionend',
            'compositionupdate',
          ]
          var userBlockingPairsForSimpleEventPlugin = [
            'drag',
            'drag',
            'dragenter',
            'dragEnter',
            'dragexit',
            'dragExit',
            'dragleave',
            'dragLeave',
            'dragover',
            'dragOver',
            'mousemove',
            'mouseMove',
            'mouseout',
            'mouseOut',
            'mouseover',
            'mouseOver',
            'pointermove',
            'pointerMove',
            'pointerout',
            'pointerOut',
            'pointerover',
            'pointerOver',
            'scroll',
            'scroll',
            'toggle',
            'toggle',
            'touchmove',
            'touchMove',
            'wheel',
            'wheel',
          ]
          var continuousPairsForSimpleEventPlugin = [
            'abort',
            'abort',
            ANIMATION_END,
            'animationEnd',
            ANIMATION_ITERATION,
            'animationIteration',
            ANIMATION_START,
            'animationStart',
            'canplay',
            'canPlay',
            'canplaythrough',
            'canPlayThrough',
            'durationchange',
            'durationChange',
            'emptied',
            'emptied',
            'encrypted',
            'encrypted',
            'ended',
            'ended',
            'error',
            'error',
            'gotpointercapture',
            'gotPointerCapture',
            'load',
            'load',
            'loadeddata',
            'loadedData',
            'loadedmetadata',
            'loadedMetadata',
            'loadstart',
            'loadStart',
            'lostpointercapture',
            'lostPointerCapture',
            'playing',
            'playing',
            'progress',
            'progress',
            'seeking',
            'seeking',
            'stalled',
            'stalled',
            'suspend',
            'suspend',
            'timeupdate',
            'timeUpdate',
            TRANSITION_END,
            'transitionEnd',
            'waiting',
            'waiting',
          ]
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i += 2) {
              var topEvent = eventTypes[i]
              var event = eventTypes[i + 1]
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1)
              var reactName = 'on' + capitalizedEvent
              eventPriorities.set(topEvent, priority)
              topLevelEventsToReactNames.set(topEvent, reactName)
              registerTwoPhaseEvent(reactName, [topEvent])
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i++) {
              eventPriorities.set(eventTypes[i], priority)
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName)
            return priority === void 0 ? ContinuousEvent : priority
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent)
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent)
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent)
            setEventPriorities(otherDiscreteEvents, DiscreteEvent)
          }
          var Scheduler_now = Scheduler.unstable_now
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error(
                  'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling'
                )
              }
            }
          }
          var ImmediatePriority = 99
          var UserBlockingPriority = 98
          var NormalPriority = 97
          var LowPriority = 96
          var IdlePriority = 95
          var NoPriority = 90
          var initialTimeMs = Scheduler_now()
          var SyncLanePriority = 15
          var SyncBatchedLanePriority = 14
          var InputDiscreteHydrationLanePriority = 13
          var InputDiscreteLanePriority = 12
          var InputContinuousHydrationLanePriority = 11
          var InputContinuousLanePriority = 10
          var DefaultHydrationLanePriority = 9
          var DefaultLanePriority = 8
          var TransitionHydrationPriority = 7
          var TransitionPriority = 6
          var RetryLanePriority = 5
          var SelectiveHydrationLanePriority = 4
          var IdleHydrationLanePriority = 3
          var IdleLanePriority = 2
          var OffscreenLanePriority = 1
          var NoLanePriority = 0
          var TotalLanes = 31
          var NoLanes = 0
          var NoLane = 0
          var SyncLane = 1
          var SyncBatchedLane = 2
          var InputDiscreteHydrationLane = 4
          var InputDiscreteLanes = 24
          var InputContinuousHydrationLane = 32
          var InputContinuousLanes = 192
          var DefaultHydrationLane = 256
          var DefaultLanes = 3584
          var TransitionHydrationLane = 4096
          var TransitionLanes = 4186112
          var RetryLanes = 62914560
          var SomeRetryLane = 33554432
          var SelectiveHydrationLane = 67108864
          var NonIdleLanes = 134217727
          var IdleHydrationLane = 134217728
          var IdleLanes = 805306368
          var OffscreenLane = 1073741824
          var NoTimestamp = -1
          function setCurrentUpdateLanePriority(newLanePriority) {}
          var return_highestLanePriority = DefaultLanePriority
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority
              return SyncLane
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority
              return SyncBatchedLane
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority
              return InputDiscreteHydrationLane
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority
              return inputDiscreteLanes
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority
              return InputContinuousHydrationLane
            }
            var inputContinuousLanes = InputContinuousLanes & lanes
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority
              return inputContinuousLanes
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority
              return DefaultHydrationLane
            }
            var defaultLanes = DefaultLanes & lanes
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority
              return defaultLanes
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority
              return TransitionHydrationLane
            }
            var transitionLanes = TransitionLanes & lanes
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority
              return transitionLanes
            }
            var retryLanes = RetryLanes & lanes
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority
              return retryLanes
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority
              return SelectiveHydrationLane
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority
              return IdleHydrationLane
            }
            var idleLanes = IdleLanes & lanes
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority
              return idleLanes
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority
              return OffscreenLane
            }
            {
              error('Should have found matching lanes. This is a bug in React.')
            }
            return_highestLanePriority = DefaultLanePriority
            return lanes
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority
              case UserBlockingPriority:
                return InputContinuousLanePriority
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority
              case IdlePriority:
                return IdleLanePriority
              default:
                return NoLanePriority
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority
              case NoLanePriority:
                return NoPriority
              default: {
                {
                  throw Error('Invalid update priority: ' + lanePriority + '. This is a bug in React.')
                }
              }
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority
              return NoLanes
            }
            var nextLanes = NoLanes
            var nextLanePriority = NoLanePriority
            var expiredLanes = root2.expiredLanes
            var suspendedLanes = root2.suspendedLanes
            var pingedLanes = root2.pingedLanes
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes
              nextLanePriority = return_highestLanePriority = SyncLanePriority
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes)
                  nextLanePriority = return_highestLanePriority
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes)
                    nextLanePriority = return_highestLanePriority
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes)
                  nextLanePriority = return_highestLanePriority
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes)
                    nextLanePriority = return_highestLanePriority
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes)
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes)
              var wipLanePriority = return_highestLanePriority
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes
              } else {
                return_highestLanePriority = nextLanePriority
              }
            }
            var entangledLanes = root2.entangledLanes
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements
              var lanes = nextLanes & entangledLanes
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes)
                var lane = 1 << index2
                nextLanes |= entanglements[index2]
                lanes &= ~lane
              }
            }
            return nextLanes
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes
            var mostRecentEventTime = NoTimestamp
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes)
              var lane = 1 << index2
              var eventTime = eventTimes[index2]
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime
              }
              lanes &= ~lane
            }
            return mostRecentEventTime
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane)
            var priority = return_highestLanePriority
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3
            } else {
              return NoTimestamp
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes
            var suspendedLanes = root2.suspendedLanes
            var pingedLanes = root2.pingedLanes
            var expirationTimes = root2.expirationTimes
            var lanes = pendingLanes
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes)
              var lane = 1 << index2
              var expirationTime = expirationTimes[index2]
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime)
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane
              }
              lanes &= ~lane
            }
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane
            }
            return NoLanes
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break
              case SyncLanePriority:
                return SyncLane
              case SyncBatchedLanePriority:
                return SyncBatchedLane
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes)
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes)
                }
                return _lane
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes)
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes)
                }
                return _lane2
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes)
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes)
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes)
                  }
                }
                return _lane3
              }
              case TransitionPriority:
              case RetryLanePriority:
                break
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes)
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes)
                }
                return lane
            }
            {
              {
                throw Error('Invalid update priority: ' + lanePriority + '. This is a bug in React.')
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes)
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes)
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes)
              }
            }
            return lane
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes)
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes)
            }
            return lane
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes
          }
          function getLowestPriorityLane(lanes) {
            var index2 = 31 - clz32(lanes)
            return index2 < 0 ? NoLanes : 1 << index2
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes)
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes)
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane)
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset
          }
          function mergeLanes(a, b) {
            return a | b
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset
          }
          function laneToLanes(lane) {
            return lane
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b
          }
          function createLaneMap(initial) {
            var laneMap = []
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial)
            }
            return laneMap
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane
            var higherPriorityLanes = updateLane - 1
            root2.suspendedLanes &= higherPriorityLanes
            root2.pingedLanes &= higherPriorityLanes
            var eventTimes = root2.eventTimes
            var index2 = laneToIndex(updateLane)
            eventTimes[index2] = eventTime
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes
            root2.pingedLanes &= ~suspendedLanes
            var expirationTimes = root2.expirationTimes
            var lanes = suspendedLanes
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes)
              var lane = 1 << index2
              expirationTimes[index2] = NoTimestamp
              lanes &= ~lane
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes
          }
          function markDiscreteUpdatesExpired(root2) {
            root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes
          }
          function markRootMutableRead(root2, updateLane) {
            root2.mutableReadLanes |= updateLane & root2.pendingLanes
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes
            root2.pendingLanes = remainingLanes
            root2.suspendedLanes = 0
            root2.pingedLanes = 0
            root2.expiredLanes &= remainingLanes
            root2.mutableReadLanes &= remainingLanes
            root2.entangledLanes &= remainingLanes
            var entanglements = root2.entanglements
            var eventTimes = root2.eventTimes
            var expirationTimes = root2.expirationTimes
            var lanes = noLongerPendingLanes
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes)
              var lane = 1 << index2
              entanglements[index2] = NoLanes
              eventTimes[index2] = NoTimestamp
              expirationTimes[index2] = NoTimestamp
              lanes &= ~lane
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            root2.entangledLanes |= entangledLanes
            var entanglements = root2.entanglements
            var lanes = entangledLanes
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes)
              var lane = 1 << index2
              entanglements[index2] |= entangledLanes
              lanes &= ~lane
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback
          var log = Math.log
          var LN2 = Math.LN2
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32
            }
            return (31 - ((log(lanes) / LN2) | 0)) | 0
          }
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority,
            runWithPriority = Scheduler.unstable_runWithPriority
          var _enabled = true
          function setEnabled(enabled) {
            _enabled = !!enabled
          }
          function isEnabled() {
            return _enabled
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName)
            var listenerWrapper
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent
                break
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate
                break
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent
                break
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer)
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp)
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent)
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(
                UserBlockingPriority$1,
                dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent)
              )
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return
            }
            var allowReplay = true
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent)
              return
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent)
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent)
              }
              return
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)
                return
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return
              }
              clearIfContinuousEvent(domEventName, nativeEvent)
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer)
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent)
            var targetInst = getClosestInstanceFromNode(nativeEventTarget)
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst)
              if (nearestMounted === null) {
                targetInst = null
              } else {
                var tag = nearestMounted.tag
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted)
                  if (instance !== null) {
                    return instance
                  }
                  targetInst = null
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted)
                  }
                  targetInst = null
                } else if (nearestMounted !== targetInst) {
                  targetInst = null
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer)
            return null
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false)
            return listener
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true)
            return listener
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive,
            })
            return listener
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive,
            })
            return listener
          }
          var root = null
          var startText = null
          var fallbackText = null
          function initialize(nativeEventTarget) {
            root = nativeEventTarget
            startText = getText()
            return true
          }
          function reset() {
            root = null
            startText = null
            fallbackText = null
          }
          function getData() {
            if (fallbackText) {
              return fallbackText
            }
            var start
            var startValue = startText
            var startLength = startValue.length
            var end
            var endValue = getText()
            var endLength = endValue.length
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break
              }
            }
            var minEnd = startLength - start
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0
            fallbackText = endValue.slice(start, sliceTail)
            return fallbackText
          }
          function getText() {
            if ('value' in root) {
              return root.value
            }
            return root.textContent
          }
          function getEventCharCode(nativeEvent) {
            var charCode
            var keyCode = nativeEvent.keyCode
            if ('charCode' in nativeEvent) {
              charCode = nativeEvent.charCode
              if (charCode === 0 && keyCode === 13) {
                charCode = 13
              }
            } else {
              charCode = keyCode
            }
            if (charCode === 10) {
              charCode = 13
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode
            }
            return 0
          }
          function functionThatReturnsTrue() {
            return true
          }
          function functionThatReturnsFalse() {
            return false
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName
              this._targetInst = targetInst
              this.type = reactEventType
              this.nativeEvent = nativeEvent
              this.target = nativeEventTarget
              this.currentTarget = null
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue
                }
                var normalize2 = Interface[_propName]
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent)
                } else {
                  this[_propName] = nativeEvent[_propName]
                }
              }
              var defaultPrevented =
                nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse
              }
              this.isPropagationStopped = functionThatReturnsFalse
              return this
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function () {
                this.defaultPrevented = true
                var event = this.nativeEvent
                if (!event) {
                  return
                }
                if (event.preventDefault) {
                  event.preventDefault()
                } else if (typeof event.returnValue !== 'unknown') {
                  event.returnValue = false
                }
                this.isDefaultPrevented = functionThatReturnsTrue
              },
              stopPropagation: function () {
                var event = this.nativeEvent
                if (!event) {
                  return
                }
                if (event.stopPropagation) {
                  event.stopPropagation()
                } else if (typeof event.cancelBubble !== 'unknown') {
                  event.cancelBubble = true
                }
                this.isPropagationStopped = functionThatReturnsTrue
              },
              persist: function () {},
              isPersistent: functionThatReturnsTrue,
            })
            return SyntheticBaseEvent
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function (event) {
              return event.timeStamp || Date.now()
            },
            defaultPrevented: 0,
            isTrusted: 0,
          }
          var SyntheticEvent = createSyntheticEvent(EventInterface)
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0,
          })
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface)
          var lastMovementX
          var lastMovementY
          var lastMouseEvent
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX
                lastMovementY = event.screenY - lastMouseEvent.screenY
              } else {
                lastMovementX = 0
                lastMovementY = 0
              }
              lastMouseEvent = event
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function (event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement
              return event.relatedTarget
            },
            movementX: function (event) {
              if ('movementX' in event) {
                return event.movementX
              }
              updateMouseMovementPolyfillState(event)
              return lastMovementX
            },
            movementY: function (event) {
              if ('movementY' in event) {
                return event.movementY
              }
              return lastMovementY
            },
          })
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface)
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0,
          })
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface)
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0,
          })
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface)
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0,
          })
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface)
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function (event) {
              return 'clipboardData' in event ? event.clipboardData : window.clipboardData
            },
          })
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface)
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0,
          })
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface)
          var SyntheticInputEvent = SyntheticCompositionEvent
          var normalizeKey = {
            Esc: 'Escape',
            Spacebar: ' ',
            Left: 'ArrowLeft',
            Up: 'ArrowUp',
            Right: 'ArrowRight',
            Down: 'ArrowDown',
            Del: 'Delete',
            Win: 'OS',
            Menu: 'ContextMenu',
            Apps: 'ContextMenu',
            Scroll: 'ScrollLock',
            MozPrintableKey: 'Unidentified',
          }
          var translateToKey = {
            8: 'Backspace',
            9: 'Tab',
            12: 'Clear',
            13: 'Enter',
            16: 'Shift',
            17: 'Control',
            18: 'Alt',
            19: 'Pause',
            20: 'CapsLock',
            27: 'Escape',
            32: ' ',
            33: 'PageUp',
            34: 'PageDown',
            35: 'End',
            36: 'Home',
            37: 'ArrowLeft',
            38: 'ArrowUp',
            39: 'ArrowRight',
            40: 'ArrowDown',
            45: 'Insert',
            46: 'Delete',
            112: 'F1',
            113: 'F2',
            114: 'F3',
            115: 'F4',
            116: 'F5',
            117: 'F6',
            118: 'F7',
            119: 'F8',
            120: 'F9',
            121: 'F10',
            122: 'F11',
            123: 'F12',
            144: 'NumLock',
            145: 'ScrollLock',
            224: 'Meta',
          }
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key
              if (key !== 'Unidentified') {
                return key
              }
            }
            if (nativeEvent.type === 'keypress') {
              var charCode = getEventCharCode(nativeEvent)
              return charCode === 13 ? 'Enter' : String.fromCharCode(charCode)
            }
            if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
              return translateToKey[nativeEvent.keyCode] || 'Unidentified'
            }
            return ''
          }
          var modifierKeyToProp = {
            Alt: 'altKey',
            Control: 'ctrlKey',
            Meta: 'metaKey',
            Shift: 'shiftKey',
          }
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this
            var nativeEvent = syntheticEvent.nativeEvent
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg)
            }
            var keyProp = modifierKeyToProp[keyArg]
            return keyProp ? !!nativeEvent[keyProp] : false
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function (event) {
              if (event.type === 'keypress') {
                return getEventCharCode(event)
              }
              return 0
            },
            keyCode: function (event) {
              if (event.type === 'keydown' || event.type === 'keyup') {
                return event.keyCode
              }
              return 0
            },
            which: function (event) {
              if (event.type === 'keypress') {
                return getEventCharCode(event)
              }
              if (event.type === 'keydown' || event.type === 'keyup') {
                return event.keyCode
              }
              return 0
            },
          })
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface)
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0,
          })
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface)
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState,
          })
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface)
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0,
          })
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface)
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function (event) {
              return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0
            },
            deltaY: function (event) {
              return 'deltaY' in event
                ? event.deltaY
                : 'wheelDeltaY' in event
                ? -event.wheelDeltaY
                : 'wheelDelta' in event
                ? -event.wheelDelta
                : 0
            },
            deltaZ: 0,
            deltaMode: 0,
          })
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface)
          var END_KEYCODES = [9, 13, 27, 32]
          var START_KEYCODE = 229
          var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window
          var documentMode = null
          if (canUseDOM && 'documentMode' in document) {
            documentMode = document.documentMode
          }
          var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode
          var useFallbackCompositionData =
            canUseDOM && (!canUseCompositionEvent || (documentMode && documentMode > 8 && documentMode <= 11))
          var SPACEBAR_CODE = 32
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE)
          function registerEvents() {
            registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste'])
            registerTwoPhaseEvent('onCompositionEnd', [
              'compositionend',
              'focusout',
              'keydown',
              'keypress',
              'keyup',
              'mousedown',
            ])
            registerTwoPhaseEvent('onCompositionStart', [
              'compositionstart',
              'focusout',
              'keydown',
              'keypress',
              'keyup',
              'mousedown',
            ])
            registerTwoPhaseEvent('onCompositionUpdate', [
              'compositionupdate',
              'focusout',
              'keydown',
              'keypress',
              'keyup',
              'mousedown',
            ])
          }
          var hasSpaceKeypress = false
          function isKeypressCommand(nativeEvent) {
            return (
              (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
              !(nativeEvent.ctrlKey && nativeEvent.altKey)
            )
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case 'compositionstart':
                return 'onCompositionStart'
              case 'compositionend':
                return 'onCompositionEnd'
              case 'compositionupdate':
                return 'onCompositionUpdate'
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case 'keyup':
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1
              case 'keydown':
                return nativeEvent.keyCode !== START_KEYCODE
              case 'keypress':
              case 'mousedown':
              case 'focusout':
                return true
              default:
                return false
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail
            if (typeof detail === 'object' && 'data' in detail) {
              return detail.data
            }
            return null
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === 'ko'
          }
          var isComposing = false
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType
            var fallbackData
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName)
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = 'onCompositionStart'
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = 'onCompositionEnd'
            }
            if (!eventType) {
              return null
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === 'onCompositionStart') {
                isComposing = initialize(nativeEventTarget)
              } else if (eventType === 'onCompositionEnd') {
                if (isComposing) {
                  fallbackData = getData()
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType)
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget)
              dispatchQueue.push({
                event,
                listeners,
              })
              if (fallbackData) {
                event.data = fallbackData
              } else {
                var customData = getDataFromCustomEvent(nativeEvent)
                if (customData !== null) {
                  event.data = customData
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case 'compositionend':
                return getDataFromCustomEvent(nativeEvent)
              case 'keypress':
                var which = nativeEvent.which
                if (which !== SPACEBAR_CODE) {
                  return null
                }
                hasSpaceKeypress = true
                return SPACEBAR_CHAR
              case 'textInput':
                var chars = nativeEvent.data
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null
                }
                return chars
              default:
                return null
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (
                domEventName === 'compositionend' ||
                (!canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent))
              ) {
                var chars = getData()
                reset()
                isComposing = false
                return chars
              }
              return null
            }
            switch (domEventName) {
              case 'paste':
                return null
              case 'keypress':
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which)
                  }
                }
                return null
              case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data
              default:
                return null
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent)
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent)
            }
            if (!chars) {
              return null
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput')
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget)
              dispatchQueue.push({
                event,
                listeners,
              })
              event.data = chars
            }
          }
          function extractEvents(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags,
            targetContainer
          ) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget)
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget)
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            'datetime-local': true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true,
          }
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase()
            if (nodeName === 'input') {
              return !!supportedInputTypes[elem.type]
            }
            if (nodeName === 'textarea') {
              return true
            }
            return false
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false
            }
            var eventName = 'on' + eventNameSuffix
            var isSupported = eventName in document
            if (!isSupported) {
              var element = document.createElement('div')
              element.setAttribute(eventName, 'return;')
              isSupported = typeof element[eventName] === 'function'
            }
            return isSupported
          }
          function registerEvents$1() {
            registerTwoPhaseEvent('onChange', [
              'change',
              'click',
              'focusin',
              'focusout',
              'input',
              'keydown',
              'keyup',
              'selectionchange',
            ])
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target)
            var listeners = accumulateTwoPhaseListeners(inst, 'onChange')
            if (listeners.length > 0) {
              var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target)
              dispatchQueue.push({
                event,
                listeners,
              })
            }
          }
          var activeElement = null
          var activeElementInst = null
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase()
            return nodeName === 'select' || (nodeName === 'input' && elem.type === 'file')
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = []
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent))
            batchedUpdates(runEventInBatch, dispatchQueue)
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0)
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst)
            if (updateValueIfChanged(targetNode)) {
              return targetInst
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === 'change') {
              return targetInst
            }
          }
          var isInputEventSupported = false
          if (canUseDOM) {
            isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9)
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target
            activeElementInst = targetInst
            activeElement.attachEvent('onpropertychange', handlePropertyChange)
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return
            }
            activeElement.detachEvent('onpropertychange', handlePropertyChange)
            activeElement = null
            activeElementInst = null
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== 'value') {
              return
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent)
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === 'focusin') {
              stopWatchingForValueChange()
              startWatchingForValueChange(target, targetInst)
            } else if (domEventName === 'focusout') {
              stopWatchingForValueChange()
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
              return getInstIfValueChanged(activeElementInst)
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName
            return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio')
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === 'click') {
              return getInstIfValueChanged(targetInst)
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === 'input' || domEventName === 'change') {
              return getInstIfValueChanged(targetInst)
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState
            if (!state || !state.controlled || node.type !== 'number') {
              return
            }
            {
              setDefaultValue(node, 'number', node.value)
            }
          }
          function extractEvents$1(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags,
            targetContainer
          ) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window
            var getTargetInstFunc, handleEventFunc
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill
                handleEventFunc = handleEventsForInputEventPolyfill
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst)
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget)
                return
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst)
            }
            if (domEventName === 'focusout') {
              handleControlledInputBlur(targetNode)
            }
          }
          function registerEvents$2() {
            registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover'])
            registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover'])
            registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover'])
            registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover'])
          }
          function extractEvents$2(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags,
            targetContainer
          ) {
            var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover'
            var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout'
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return
            }
            var win
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget
            } else {
              var doc = nativeEventTarget.ownerDocument
              if (doc) {
                win = doc.defaultView || doc.parentWindow
              } else {
                win = window
              }
            }
            var from
            var to
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement
              from = targetInst
              to = _related ? getClosestInstanceFromNode(_related) : null
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to)
                if (to !== nearestMounted || (to.tag !== HostComponent && to.tag !== HostText)) {
                  to = null
                }
              }
            } else {
              from = null
              to = targetInst
            }
            if (from === to) {
              return
            }
            var SyntheticEventCtor = SyntheticMouseEvent
            var leaveEventType = 'onMouseLeave'
            var enterEventType = 'onMouseEnter'
            var eventTypePrefix = 'mouse'
            if (domEventName === 'pointerout' || domEventName === 'pointerover') {
              SyntheticEventCtor = SyntheticPointerEvent
              leaveEventType = 'onPointerLeave'
              enterEventType = 'onPointerEnter'
              eventTypePrefix = 'pointer'
            }
            var fromNode = from == null ? win : getNodeFromInstance(from)
            var toNode = to == null ? win : getNodeFromInstance(to)
            var leave = new SyntheticEventCtor(
              leaveEventType,
              eventTypePrefix + 'leave',
              from,
              nativeEvent,
              nativeEventTarget
            )
            leave.target = fromNode
            leave.relatedTarget = toNode
            var enter = null
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget)
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(
                enterEventType,
                eventTypePrefix + 'enter',
                to,
                nativeEvent,
                nativeEventTarget
              )
              enterEvent.target = toNode
              enterEvent.relatedTarget = fromNode
              enter = enterEvent
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to)
          }
          function is(x, y) {
            return (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y)
          }
          var objectIs = typeof Object.is === 'function' ? Object.is : is
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true
            }
            if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
              return false
            }
            var keysA = Object.keys(objA)
            var keysB = Object.keys(objB)
            if (keysA.length !== keysB.length) {
              return false
            }
            for (var i = 0; i < keysA.length; i++) {
              if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                return false
              }
            }
            return true
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild
            }
            return node
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling
              }
              node = node.parentNode
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2)
            var nodeStart = 0
            var nodeEnd = 0
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart,
                  }
                }
                nodeStart = nodeEnd
              }
              node = getLeafNode(getSiblingNode(node))
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument
            var win = (ownerDocument && ownerDocument.defaultView) || window
            var selection = win.getSelection && win.getSelection()
            if (!selection || selection.rangeCount === 0) {
              return null
            }
            var anchorNode = selection.anchorNode,
              anchorOffset = selection.anchorOffset,
              focusNode = selection.focusNode,
              focusOffset = selection.focusOffset
            try {
              anchorNode.nodeType
              focusNode.nodeType
            } catch (e) {
              return null
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset)
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0
            var start = -1
            var end = -1
            var indexWithinAnchor = 0
            var indexWithinFocus = 0
            var node = outerNode
            var parentNode = null
            outer: while (true) {
              var next = null
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length
                }
                if ((next = node.firstChild) === null) {
                  break
                }
                parentNode = node
                node = next
              }
              while (true) {
                if (node === outerNode) {
                  break outer
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length
                }
                if ((next = node.nextSibling) !== null) {
                  break
                }
                node = parentNode
                parentNode = node.parentNode
              }
              node = next
            }
            if (start === -1 || end === -1) {
              return null
            }
            return {
              start,
              end,
            }
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document
            var win = (doc && doc.defaultView) || window
            if (!win.getSelection) {
              return
            }
            var selection = win.getSelection()
            var length = node.textContent.length
            var start = Math.min(offsets.start, length)
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length)
            if (!selection.extend && start > end) {
              var temp = end
              end = start
              start = temp
            }
            var startMarker = getNodeForCharacterOffset(node, start)
            var endMarker = getNodeForCharacterOffset(node, end)
            if (startMarker && endMarker) {
              if (
                selection.rangeCount === 1 &&
                selection.anchorNode === startMarker.node &&
                selection.anchorOffset === startMarker.offset &&
                selection.focusNode === endMarker.node &&
                selection.focusOffset === endMarker.offset
              ) {
                return
              }
              var range = doc.createRange()
              range.setStart(startMarker.node, startMarker.offset)
              selection.removeAllRanges()
              if (start > end) {
                selection.addRange(range)
                selection.extend(endMarker.node, endMarker.offset)
              } else {
                range.setEnd(endMarker.node, endMarker.offset)
                selection.addRange(range)
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false
            } else if (outerNode === innerNode) {
              return true
            } else if (isTextNode(outerNode)) {
              return false
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode)
            } else if ('contains' in outerNode) {
              return outerNode.contains(innerNode)
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16)
            } else {
              return false
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node)
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === 'string'
            } catch (err) {
              return false
            }
          }
          function getActiveElementDeep() {
            var win = window
            var element = getActiveElement()
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow
              } else {
                return element
              }
              element = getActiveElement(win.document)
            }
            return element
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase()
            return (
              nodeName &&
              ((nodeName === 'input' &&
                (elem.type === 'text' ||
                  elem.type === 'search' ||
                  elem.type === 'tel' ||
                  elem.type === 'url' ||
                  elem.type === 'password')) ||
                nodeName === 'textarea' ||
                elem.contentEditable === 'true')
            )
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep()
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null,
            }
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep()
            var priorFocusedElem = priorSelectionInformation.focusedElem
            var priorSelectionRange = priorSelectionInformation.selectionRange
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange)
              }
              var ancestors = []
              var ancestor = priorFocusedElem
              while ((ancestor = ancestor.parentNode)) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop,
                  })
                }
              }
              if (typeof priorFocusedElem.focus === 'function') {
                priorFocusedElem.focus()
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i]
                info.element.scrollLeft = info.left
                info.element.scrollTop = info.top
              }
            }
          }
          function getSelection(input) {
            var selection
            if ('selectionStart' in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd,
              }
            } else {
              selection = getOffsets(input)
            }
            return (
              selection || {
                start: 0,
                end: 0,
              }
            )
          }
          function setSelection(input, offsets) {
            var start = offsets.start
            var end = offsets.end
            if (end === void 0) {
              end = start
            }
            if ('selectionStart' in input) {
              input.selectionStart = start
              input.selectionEnd = Math.min(end, input.value.length)
            } else {
              setOffsets(input, offsets)
            }
          }
          var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11
          function registerEvents$3() {
            registerTwoPhaseEvent('onSelect', [
              'focusout',
              'contextmenu',
              'dragend',
              'focusin',
              'keydown',
              'keyup',
              'mousedown',
              'mouseup',
              'selectionchange',
            ])
          }
          var activeElement$1 = null
          var activeElementInst$1 = null
          var lastSelection = null
          var mouseDown = false
          function getSelection$1(node) {
            if ('selectionStart' in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd,
              }
            } else {
              var win = (node.ownerDocument && node.ownerDocument.defaultView) || window
              var selection = win.getSelection()
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset,
              }
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget
              ? eventTarget.document
              : eventTarget.nodeType === DOCUMENT_NODE
              ? eventTarget
              : eventTarget.ownerDocument
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget)
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return
            }
            var currentSelection = getSelection$1(activeElement$1)
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect')
              if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget)
                dispatchQueue.push({
                  event,
                  listeners,
                })
                event.target = activeElement$1
              }
            }
          }
          function extractEvents$3(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags,
            targetContainer
          ) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window
            switch (domEventName) {
              case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                  activeElement$1 = targetNode
                  activeElementInst$1 = targetInst
                  lastSelection = null
                }
                break
              case 'focusout':
                activeElement$1 = null
                activeElementInst$1 = null
                lastSelection = null
                break
              case 'mousedown':
                mouseDown = true
                break
              case 'contextmenu':
              case 'mouseup':
              case 'dragend':
                mouseDown = false
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget)
                break
              case 'selectionchange':
                if (skipSelectionChangeEvent) {
                  break
                }
              case 'keydown':
              case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget)
            }
          }
          function extractEvents$4(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags,
            targetContainer
          ) {
            var reactName = topLevelEventsToReactNames.get(domEventName)
            if (reactName === void 0) {
              return
            }
            var SyntheticEventCtor = SyntheticEvent
            var reactEventType = domEventName
            switch (domEventName) {
              case 'keypress':
                if (getEventCharCode(nativeEvent) === 0) {
                  return
                }
              case 'keydown':
              case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent
                break
              case 'focusin':
                reactEventType = 'focus'
                SyntheticEventCtor = SyntheticFocusEvent
                break
              case 'focusout':
                reactEventType = 'blur'
                SyntheticEventCtor = SyntheticFocusEvent
                break
              case 'beforeblur':
              case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent
                break
              case 'click':
                if (nativeEvent.button === 2) {
                  return
                }
              case 'auxclick':
              case 'dblclick':
              case 'mousedown':
              case 'mousemove':
              case 'mouseup':
              case 'mouseout':
              case 'mouseover':
              case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent
                break
              case 'drag':
              case 'dragend':
              case 'dragenter':
              case 'dragexit':
              case 'dragleave':
              case 'dragover':
              case 'dragstart':
              case 'drop':
                SyntheticEventCtor = SyntheticDragEvent
                break
              case 'touchcancel':
              case 'touchend':
              case 'touchmove':
              case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent
                break
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent
                break
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent
                break
              case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent
                break
              case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent
                break
              case 'copy':
              case 'cut':
              case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent
                break
              case 'gotpointercapture':
              case 'lostpointercapture':
              case 'pointercancel':
              case 'pointerdown':
              case 'pointermove':
              case 'pointerout':
              case 'pointerover':
              case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent
                break
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === 'scroll'
              var _listeners = accumulateSinglePhaseListeners(
                targetInst,
                reactName,
                nativeEvent.type,
                inCapturePhase,
                accumulateTargetOnly
              )
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget)
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners,
                })
              }
            }
          }
          registerSimpleEvents()
          registerEvents$2()
          registerEvents$1()
          registerEvents$3()
          registerEvents()
          function extractEvents$5(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags,
            targetContainer
          ) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags)
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags)
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget)
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget)
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget)
            }
          }
          var mediaEventTypes = [
            'abort',
            'canplay',
            'canplaythrough',
            'durationchange',
            'emptied',
            'encrypted',
            'ended',
            'error',
            'loadeddata',
            'loadedmetadata',
            'loadstart',
            'pause',
            'play',
            'playing',
            'progress',
            'ratechange',
            'seeked',
            'seeking',
            'stalled',
            'suspend',
            'timeupdate',
            'volumechange',
            'waiting',
          ]
          var nonDelegatedEvents = new Set(
            ['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes)
          )
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || 'unknown-event'
            event.currentTarget = currentTarget
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event)
            event.currentTarget = null
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i],
                  instance = _dispatchListeners$i.instance,
                  currentTarget = _dispatchListeners$i.currentTarget,
                  listener = _dispatchListeners$i.listener
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return
                }
                executeDispatch(event, listener, currentTarget)
                previousInstance = instance
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i],
                  _instance = _dispatchListeners$_i.instance,
                  _currentTarget = _dispatchListeners$_i.currentTarget,
                  _listener = _dispatchListeners$_i.listener
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return
                }
                executeDispatch(event, _listener, _currentTarget)
                previousInstance = _instance
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i],
                event = _dispatchQueue$i.event,
                listeners = _dispatchQueue$i.listeners
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase)
            }
            rethrowCaughtError()
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent)
            var dispatchQueue = []
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags)
            processDispatchQueue(dispatchQueue, eventSystemFlags)
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false
            var listenerSet = getEventListenerSet(targetElement)
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener)
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener)
              listenerSet.add(listenerSetKey)
            }
          }
          var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2)
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return
              }
              rootContainerElement[listeningMarker] = true
              allNativeEvents.forEach(function (domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null)
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null)
              })
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0
            var target = rootContainerElement
            if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== 'scroll') {
                return
              }
              eventSystemFlags |= IS_NON_DELEGATED
              target = targetElement
            }
            var listenerSet = getEventListenerSet(target)
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener)
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener)
              listenerSet.add(listenerSetKey)
            }
          }
          function addTrappedEventListener(
            targetContainer,
            domEventName,
            eventSystemFlags,
            isCapturePhaseListener,
            isDeferredListenerForLegacyFBSupport
          ) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags)
            var isPassiveListener = void 0
            if (passiveBrowserEventsSupported) {
              if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
                isPassiveListener = true
              }
            }
            targetContainer = targetContainer
            var unsubscribeListener
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(
                  targetContainer,
                  domEventName,
                  listener,
                  isPassiveListener
                )
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener)
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(
                  targetContainer,
                  domEventName,
                  listener,
                  isPassiveListener
                )
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener)
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return (
              grandContainer === targetContainer ||
              (grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer)
            )
          }
          function dispatchEventForPluginEventSystem(
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetInst,
            targetContainer
          ) {
            var ancestorInst = targetInst
            if (
              (eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 &&
              (eventSystemFlags & IS_NON_DELEGATED) === 0
            ) {
              var targetContainerNode = targetContainer
              if (targetInst !== null) {
                var node = targetInst
                mainLoop: while (true) {
                  if (node === null) {
                    return
                  }
                  var nodeTag = node.tag
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return
                          }
                        }
                        grandNode = grandNode.return
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container)
                      if (parentNode === null) {
                        return
                      }
                      var parentTag = parentNode.tag
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode
                        continue mainLoop
                      }
                      container = container.parentNode
                    }
                  }
                  node = node.return
                }
              }
            }
            batchedEventUpdates(function () {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst)
            })
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget,
            }
          }
          function accumulateSinglePhaseListeners(
            targetFiber,
            reactName,
            nativeEventType,
            inCapturePhase,
            accumulateTargetOnly
          ) {
            var captureName = reactName !== null ? reactName + 'Capture' : null
            var reactEventName = inCapturePhase ? captureName : reactName
            var listeners = []
            var instance = targetFiber
            var lastHostComponent = null
            while (instance !== null) {
              var _instance2 = instance,
                stateNode = _instance2.stateNode,
                tag = _instance2.tag
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName)
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent))
                  }
                }
              }
              if (accumulateTargetOnly) {
                break
              }
              instance = instance.return
            }
            return listeners
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + 'Capture'
            var listeners = []
            var instance = targetFiber
            while (instance !== null) {
              var _instance3 = instance,
                stateNode = _instance3.stateNode,
                tag = _instance3.tag
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode
                var captureListener = getListener(instance, captureName)
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget))
                }
                var bubbleListener = getListener(instance, reactName)
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget))
                }
              }
              instance = instance.return
            }
            return listeners
          }
          function getParent(inst) {
            if (inst === null) {
              return null
            }
            do {
              inst = inst.return
            } while (inst && inst.tag !== HostComponent)
            if (inst) {
              return inst
            }
            return null
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA
            var nodeB = instB
            var depthA = 0
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++
            }
            var depthB = 0
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA)
              depthA--
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB)
              depthB--
            }
            var depth = depthA
            while (depth--) {
              if (nodeA === nodeB || (nodeB !== null && nodeA === nodeB.alternate)) {
                return nodeA
              }
              nodeA = getParent(nodeA)
              nodeB = getParent(nodeB)
            }
            return null
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName
            var listeners = []
            var instance = target
            while (instance !== null) {
              if (instance === common) {
                break
              }
              var _instance4 = instance,
                alternate = _instance4.alternate,
                stateNode = _instance4.stateNode,
                tag = _instance4.tag
              if (alternate !== null && alternate === common) {
                break
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName)
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget))
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName)
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget))
                  }
                }
              }
              instance = instance.return
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners,
              })
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false)
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true)
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + '__' + (capture ? 'capture' : 'bubble')
          }
          var didWarnInvalidHydration = false
          var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML'
          var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning'
          var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning'
          var AUTOFOCUS = 'autoFocus'
          var CHILDREN = 'children'
          var STYLE = 'style'
          var HTML$1 = '__html'
          var HTML_NAMESPACE$1 = Namespaces.html
          var warnedUnknownTags
          var suppressHydrationWarning
          var validatePropertiesInDevelopment
          var warnForTextDifference
          var warnForPropDifference
          var warnForExtraAttributes
          var warnForInvalidEventListener
          var canDiffStyleForHydrationWarning
          var normalizeMarkupForTextOrAttribute
          var normalizeHTML
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true,
            }
            validatePropertiesInDevelopment = function (type, props) {
              validateProperties(type, props)
              validateProperties$1(type, props)
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames,
              })
            }
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g
            normalizeMarkupForTextOrAttribute = function (markup) {
              var markupString = typeof markup === 'string' ? markup : '' + markup
              return markupString
                .replace(NORMALIZE_NEWLINES_REGEX, '\n')
                .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '')
            }
            warnForTextDifference = function (serverText, clientText) {
              if (didWarnInvalidHydration) {
                return
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText)
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText)
              if (normalizedServerText === normalizedClientText) {
                return
              }
              didWarnInvalidHydration = true
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText)
            }
            warnForPropDifference = function (propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue)
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue)
              if (normalizedServerValue === normalizedClientValue) {
                return
              }
              didWarnInvalidHydration = true
              error(
                'Prop `%s` did not match. Server: %s Client: %s',
                propName,
                JSON.stringify(normalizedServerValue),
                JSON.stringify(normalizedClientValue)
              )
            }
            warnForExtraAttributes = function (attributeNames) {
              if (didWarnInvalidHydration) {
                return
              }
              didWarnInvalidHydration = true
              var names = []
              attributeNames.forEach(function (name) {
                names.push(name)
              })
              error('Extra attributes from the server: %s', names)
            }
            warnForInvalidEventListener = function (registrationName, listener) {
              if (listener === false) {
                error(
                  'Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
                  registrationName,
                  registrationName,
                  registrationName
                )
              } else {
                error(
                  'Expected `%s` listener to be a function, instead got a value of `%s` type.',
                  registrationName,
                  typeof listener
                )
              }
            }
            normalizeHTML = function (parent, html) {
              var testElement =
                parent.namespaceURI === HTML_NAMESPACE$1
                  ? parent.ownerDocument.createElement(parent.tagName)
                  : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName)
              testElement.innerHTML = html
              return testElement.innerHTML
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE
              ? rootContainerElement
              : rootContainerElement.ownerDocument
          }
          function noop() {}
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue
              }
              var nextProp = nextProps[propKey]
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp)
                  }
                }
                setValueForStyles(domElement, nextProp)
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml)
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                  var canSetTextContent = tag !== 'textarea' || nextProp !== ''
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp)
                  }
                } else if (typeof nextProp === 'number') {
                  setTextContent(domElement, '' + nextProp)
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING);
              else if (propKey === AUTOFOCUS);
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== 'function') {
                    warnForInvalidEventListener(propKey, nextProp)
                  }
                  if (propKey === 'onScroll') {
                    listenToNonDelegatedEvent('scroll', domElement)
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag)
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i]
              var propValue = updatePayload[i + 1]
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue)
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue)
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue)
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag)
              }
            }
          }
          function createElement3(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement)
            var domElement
            var namespaceURI = parentNamespace
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type)
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props)
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error(
                    '<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.',
                    type
                  )
                }
              }
              if (type === 'script') {
                var div = ownerDocument.createElement('div')
                div.innerHTML = '<script></script>'
                var firstChild = div.firstChild
                domElement = div.removeChild(firstChild)
              } else if (typeof props.is === 'string') {
                domElement = ownerDocument.createElement(type, {
                  is: props.is,
                })
              } else {
                domElement = ownerDocument.createElement(type)
                if (type === 'select') {
                  var node = domElement
                  if (props.multiple) {
                    node.multiple = true
                  } else if (props.size) {
                    node.size = props.size
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type)
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (
                  !isCustomComponentTag &&
                  Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' &&
                  !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)
                ) {
                  warnedUnknownTags[type] = true
                  error(
                    'The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.',
                    type
                  )
                }
              }
            }
            return domElement
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text)
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps)
            {
              validatePropertiesInDevelopment(tag, rawProps)
            }
            var props
            switch (tag) {
              case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement)
                listenToNonDelegatedEvent('close', domElement)
                props = rawProps
                break
              case 'iframe':
              case 'object':
              case 'embed':
                listenToNonDelegatedEvent('load', domElement)
                props = rawProps
                break
              case 'video':
              case 'audio':
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement)
                }
                props = rawProps
                break
              case 'source':
                listenToNonDelegatedEvent('error', domElement)
                props = rawProps
                break
              case 'img':
              case 'image':
              case 'link':
                listenToNonDelegatedEvent('error', domElement)
                listenToNonDelegatedEvent('load', domElement)
                props = rawProps
                break
              case 'details':
                listenToNonDelegatedEvent('toggle', domElement)
                props = rawProps
                break
              case 'input':
                initWrapperState(domElement, rawProps)
                props = getHostProps(domElement, rawProps)
                listenToNonDelegatedEvent('invalid', domElement)
                break
              case 'option':
                validateProps(domElement, rawProps)
                props = getHostProps$1(domElement, rawProps)
                break
              case 'select':
                initWrapperState$1(domElement, rawProps)
                props = getHostProps$2(domElement, rawProps)
                listenToNonDelegatedEvent('invalid', domElement)
                break
              case 'textarea':
                initWrapperState$2(domElement, rawProps)
                props = getHostProps$3(domElement, rawProps)
                listenToNonDelegatedEvent('invalid', domElement)
                break
              default:
                props = rawProps
            }
            assertValidProps(tag, props)
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag)
            switch (tag) {
              case 'input':
                track(domElement)
                postMountWrapper(domElement, rawProps, false)
                break
              case 'textarea':
                track(domElement)
                postMountWrapper$3(domElement)
                break
              case 'option':
                postMountWrapper$1(domElement, rawProps)
                break
              case 'select':
                postMountWrapper$2(domElement, rawProps)
                break
              default:
                if (typeof props.onClick === 'function') {
                  trapClickOnNonInteractiveElement(domElement)
                }
                break
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps)
            }
            var updatePayload = null
            var lastProps
            var nextProps
            switch (tag) {
              case 'input':
                lastProps = getHostProps(domElement, lastRawProps)
                nextProps = getHostProps(domElement, nextRawProps)
                updatePayload = []
                break
              case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps)
                nextProps = getHostProps$1(domElement, nextRawProps)
                updatePayload = []
                break
              case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps)
                nextProps = getHostProps$2(domElement, nextRawProps)
                updatePayload = []
                break
              case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps)
                nextProps = getHostProps$3(domElement, nextRawProps)
                updatePayload = []
                break
              default:
                lastProps = lastRawProps
                nextProps = nextRawProps
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
                  trapClickOnNonInteractiveElement(domElement)
                }
                break
            }
            assertValidProps(tag, nextProps)
            var propKey
            var styleName
            var styleUpdates = null
            for (propKey in lastProps) {
              if (
                nextProps.hasOwnProperty(propKey) ||
                !lastProps.hasOwnProperty(propKey) ||
                lastProps[propKey] == null
              ) {
                continue
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey]
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {}
                    }
                    styleUpdates[styleName] = ''
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN);
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING);
              else if (propKey === AUTOFOCUS);
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = []
                }
              } else {
                ;(updatePayload = updatePayload || []).push(propKey, null)
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey]
              var lastProp = lastProps != null ? lastProps[propKey] : void 0
              if (
                !nextProps.hasOwnProperty(propKey) ||
                nextProp === lastProp ||
                (nextProp == null && lastProp == null)
              ) {
                continue
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp)
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {}
                      }
                      styleUpdates[styleName] = ''
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {}
                      }
                      styleUpdates[styleName] = nextProp[styleName]
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = []
                    }
                    updatePayload.push(propKey, styleUpdates)
                  }
                  styleUpdates = nextProp
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    ;(updatePayload = updatePayload || []).push(propKey, nextHtml)
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') {
                  ;(updatePayload = updatePayload || []).push(propKey, '' + nextProp)
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING);
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== 'function') {
                    warnForInvalidEventListener(propKey, nextProp)
                  }
                  if (propKey === 'onScroll') {
                    listenToNonDelegatedEvent('scroll', domElement)
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = []
                }
              } else if (
                typeof nextProp === 'object' &&
                nextProp !== null &&
                nextProp.$$typeof === REACT_OPAQUE_ID_TYPE
              ) {
                nextProp.toString()
              } else {
                ;(updatePayload = updatePayload || []).push(propKey, nextProp)
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE])
              }
              ;(updatePayload = updatePayload || []).push(STYLE, styleUpdates)
            }
            return updatePayload
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps)
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps)
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps)
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag)
            switch (tag) {
              case 'input':
                updateWrapper(domElement, nextRawProps)
                break
              case 'textarea':
                updateWrapper$1(domElement, nextRawProps)
                break
              case 'select':
                postUpdateWrapper(domElement, nextRawProps)
                break
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase()
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null
              }
              return possibleStandardNames[lowerCasedName] || null
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag
            var extraAttributeNames
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true
              isCustomComponentTag = isCustomComponent(tag, rawProps)
              validatePropertiesInDevelopment(tag, rawProps)
            }
            switch (tag) {
              case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement)
                listenToNonDelegatedEvent('close', domElement)
                break
              case 'iframe':
              case 'object':
              case 'embed':
                listenToNonDelegatedEvent('load', domElement)
                break
              case 'video':
              case 'audio':
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement)
                }
                break
              case 'source':
                listenToNonDelegatedEvent('error', domElement)
                break
              case 'img':
              case 'image':
              case 'link':
                listenToNonDelegatedEvent('error', domElement)
                listenToNonDelegatedEvent('load', domElement)
                break
              case 'details':
                listenToNonDelegatedEvent('toggle', domElement)
                break
              case 'input':
                initWrapperState(domElement, rawProps)
                listenToNonDelegatedEvent('invalid', domElement)
                break
              case 'option':
                validateProps(domElement, rawProps)
                break
              case 'select':
                initWrapperState$1(domElement, rawProps)
                listenToNonDelegatedEvent('invalid', domElement)
                break
              case 'textarea':
                initWrapperState$2(domElement, rawProps)
                listenToNonDelegatedEvent('invalid', domElement)
                break
            }
            assertValidProps(tag, rawProps)
            {
              extraAttributeNames = new Set()
              var attributes = domElement.attributes
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase()
                switch (name) {
                  case 'data-reactroot':
                    break
                  case 'value':
                    break
                  case 'checked':
                    break
                  case 'selected':
                    break
                  default:
                    extraAttributeNames.add(attributes[_i].name)
                }
              }
            }
            var updatePayload = null
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue
              }
              var nextProp = rawProps[propKey]
              if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp)
                    }
                    updatePayload = [CHILDREN, nextProp]
                  }
                } else if (typeof nextProp === 'number') {
                  if (domElement.textContent !== '' + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp)
                    }
                    updatePayload = [CHILDREN, '' + nextProp]
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== 'function') {
                    warnForInvalidEventListener(propKey, nextProp)
                  }
                  if (propKey === 'onScroll') {
                    listenToNonDelegatedEvent('scroll', domElement)
                  }
                }
              } else if (typeof isCustomComponentTag === 'boolean') {
                var serverValue = void 0
                var propertyInfo = getPropertyInfo(propKey)
                if (suppressHydrationWarning);
                else if (
                  propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                  propKey === SUPPRESS_HYDRATION_WARNING ||
                  propKey === 'value' ||
                  propKey === 'checked' ||
                  propKey === 'selected'
                );
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml)
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML)
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey)
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp)
                    serverValue = domElement.getAttribute('style')
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle)
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase())
                  serverValue = getValueForAttribute(domElement, propKey, nextProp)
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp)
                  }
                } else if (
                  !shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) &&
                  !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)
                ) {
                  var isMismatchDueToBadCasing = false
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName)
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo)
                  } else {
                    var ownNamespace = parentNamespace
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag)
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase())
                    } else {
                      var standardName = getPossibleStandardName(propKey)
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true
                        extraAttributeNames.delete(standardName)
                      }
                      extraAttributeNames.delete(propKey)
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp)
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp)
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames)
              }
            }
            switch (tag) {
              case 'input':
                track(domElement)
                postMountWrapper(domElement, rawProps, true)
                break
              case 'textarea':
                track(domElement)
                postMountWrapper$3(domElement)
                break
              case 'select':
              case 'option':
                break
              default:
                if (typeof rawProps.onClick === 'function') {
                  trapClickOnNonInteractiveElement(domElement)
                }
                break
            }
            return updatePayload
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text
            return isDifferent
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text)
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return
              }
              didWarnInvalidHydration = true
              error(
                'Did not expect server HTML to contain a <%s> in <%s>.',
                child.nodeName.toLowerCase(),
                parentNode.nodeName.toLowerCase()
              )
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return
              }
              didWarnInvalidHydration = true
              error(
                'Did not expect server HTML to contain the text node "%s" in <%s>.',
                child.nodeValue,
                parentNode.nodeName.toLowerCase()
              )
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return
              }
              didWarnInvalidHydration = true
              error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase())
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === '') {
                return
              }
              if (didWarnInvalidHydration) {
                return
              }
              didWarnInvalidHydration = true
              error(
                'Expected server HTML to contain a matching text node for "%s" in <%s>.',
                text,
                parentNode.nodeName.toLowerCase()
              )
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case 'input':
                restoreControlledState(domElement, props)
                return
              case 'textarea':
                restoreControlledState$2(domElement, props)
                return
              case 'select':
                restoreControlledState$1(domElement, props)
                return
            }
          }
          var validateDOMNesting = function () {}
          var updatedAncestorInfo = function () {}
          {
            var specialTags = [
              'address',
              'applet',
              'area',
              'article',
              'aside',
              'base',
              'basefont',
              'bgsound',
              'blockquote',
              'body',
              'br',
              'button',
              'caption',
              'center',
              'col',
              'colgroup',
              'dd',
              'details',
              'dir',
              'div',
              'dl',
              'dt',
              'embed',
              'fieldset',
              'figcaption',
              'figure',
              'footer',
              'form',
              'frame',
              'frameset',
              'h1',
              'h2',
              'h3',
              'h4',
              'h5',
              'h6',
              'head',
              'header',
              'hgroup',
              'hr',
              'html',
              'iframe',
              'img',
              'input',
              'isindex',
              'li',
              'link',
              'listing',
              'main',
              'marquee',
              'menu',
              'menuitem',
              'meta',
              'nav',
              'noembed',
              'noframes',
              'noscript',
              'object',
              'ol',
              'p',
              'param',
              'plaintext',
              'pre',
              'script',
              'section',
              'select',
              'source',
              'style',
              'summary',
              'table',
              'tbody',
              'td',
              'template',
              'textarea',
              'tfoot',
              'th',
              'thead',
              'title',
              'tr',
              'track',
              'ul',
              'wbr',
              'xmp',
            ]
            var inScopeTags = [
              'applet',
              'caption',
              'html',
              'table',
              'td',
              'th',
              'marquee',
              'object',
              'template',
              'foreignObject',
              'desc',
              'title',
            ]
            var buttonScopeTags = inScopeTags.concat(['button'])
            var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt']
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null,
            }
            updatedAncestorInfo = function (oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo)
              var info = {
                tag,
              }
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null
                ancestorInfo.buttonTagInScope = null
                ancestorInfo.nobrTagInScope = null
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
                ancestorInfo.listItemTagAutoclosing = null
                ancestorInfo.dlItemTagAutoclosing = null
              }
              ancestorInfo.current = info
              if (tag === 'form') {
                ancestorInfo.formTag = info
              }
              if (tag === 'a') {
                ancestorInfo.aTagInScope = info
              }
              if (tag === 'button') {
                ancestorInfo.buttonTagInScope = info
              }
              if (tag === 'nobr') {
                ancestorInfo.nobrTagInScope = info
              }
              if (tag === 'p') {
                ancestorInfo.pTagInButtonScope = info
              }
              if (tag === 'li') {
                ancestorInfo.listItemTagAutoclosing = info
              }
              if (tag === 'dd' || tag === 'dt') {
                ancestorInfo.dlItemTagAutoclosing = info
              }
              return ancestorInfo
            }
            var isTagValidWithParent = function (tag, parentTag) {
              switch (parentTag) {
                case 'select':
                  return tag === 'option' || tag === 'optgroup' || tag === '#text'
                case 'optgroup':
                  return tag === 'option' || tag === '#text'
                case 'option':
                  return tag === '#text'
                case 'tr':
                  return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template'
                case 'tbody':
                case 'thead':
                case 'tfoot':
                  return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template'
                case 'colgroup':
                  return tag === 'col' || tag === 'template'
                case 'table':
                  return (
                    tag === 'caption' ||
                    tag === 'colgroup' ||
                    tag === 'tbody' ||
                    tag === 'tfoot' ||
                    tag === 'thead' ||
                    tag === 'style' ||
                    tag === 'script' ||
                    tag === 'template'
                  )
                case 'head':
                  return (
                    tag === 'base' ||
                    tag === 'basefont' ||
                    tag === 'bgsound' ||
                    tag === 'link' ||
                    tag === 'meta' ||
                    tag === 'title' ||
                    tag === 'noscript' ||
                    tag === 'noframes' ||
                    tag === 'style' ||
                    tag === 'script' ||
                    tag === 'template'
                  )
                case 'html':
                  return tag === 'head' || tag === 'body' || tag === 'frameset'
                case 'frameset':
                  return tag === 'frame'
                case '#document':
                  return tag === 'html'
              }
              switch (tag) {
                case 'h1':
                case 'h2':
                case 'h3':
                case 'h4':
                case 'h5':
                case 'h6':
                  return (
                    parentTag !== 'h1' &&
                    parentTag !== 'h2' &&
                    parentTag !== 'h3' &&
                    parentTag !== 'h4' &&
                    parentTag !== 'h5' &&
                    parentTag !== 'h6'
                  )
                case 'rp':
                case 'rt':
                  return impliedEndTags.indexOf(parentTag) === -1
                case 'body':
                case 'caption':
                case 'col':
                case 'colgroup':
                case 'frameset':
                case 'frame':
                case 'head':
                case 'html':
                case 'tbody':
                case 'td':
                case 'tfoot':
                case 'th':
                case 'thead':
                case 'tr':
                  return parentTag == null
              }
              return true
            }
            var findInvalidAncestorForTag = function (tag, ancestorInfo) {
              switch (tag) {
                case 'address':
                case 'article':
                case 'aside':
                case 'blockquote':
                case 'center':
                case 'details':
                case 'dialog':
                case 'dir':
                case 'div':
                case 'dl':
                case 'fieldset':
                case 'figcaption':
                case 'figure':
                case 'footer':
                case 'header':
                case 'hgroup':
                case 'main':
                case 'menu':
                case 'nav':
                case 'ol':
                case 'p':
                case 'section':
                case 'summary':
                case 'ul':
                case 'pre':
                case 'listing':
                case 'table':
                case 'hr':
                case 'xmp':
                case 'h1':
                case 'h2':
                case 'h3':
                case 'h4':
                case 'h5':
                case 'h6':
                  return ancestorInfo.pTagInButtonScope
                case 'form':
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope
                case 'li':
                  return ancestorInfo.listItemTagAutoclosing
                case 'dd':
                case 'dt':
                  return ancestorInfo.dlItemTagAutoclosing
                case 'button':
                  return ancestorInfo.buttonTagInScope
                case 'a':
                  return ancestorInfo.aTagInScope
                case 'nobr':
                  return ancestorInfo.nobrTagInScope
              }
              return null
            }
            var didWarn$1 = {}
            validateDOMNesting = function (childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo
              var parentInfo = ancestorInfo.current
              var parentTag = parentInfo && parentInfo.tag
              if (childText != null) {
                if (childTag != null) {
                  error('validateDOMNesting: when childText is passed, childTag should be null')
                }
                childTag = '#text'
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo)
              var invalidParentOrAncestor = invalidParent || invalidAncestor
              if (!invalidParentOrAncestor) {
                return
              }
              var ancestorTag = invalidParentOrAncestor.tag
              var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag
              if (didWarn$1[warnKey]) {
                return
              }
              didWarn$1[warnKey] = true
              var tagDisplayName = childTag
              var whitespaceInfo = ''
              if (childTag === '#text') {
                if (/\S/.test(childText)) {
                  tagDisplayName = 'Text nodes'
                } else {
                  tagDisplayName = 'Whitespace text nodes'
                  whitespaceInfo =
                    " Make sure you don't have any extra whitespace between tags on each line of your source code."
                }
              } else {
                tagDisplayName = '<' + childTag + '>'
              }
              if (invalidParent) {
                var info = ''
                if (ancestorTag === 'table' && childTag === 'tr') {
                  info +=
                    ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.'
                }
                error(
                  'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s',
                  tagDisplayName,
                  ancestorTag,
                  whitespaceInfo,
                  info
                )
              } else {
                error('validateDOMNesting(...): %s cannot appear as a descendant of <%s>.', tagDisplayName, ancestorTag)
              }
            }
          }
          var SUPPRESS_HYDRATION_WARNING$1
          {
            SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning'
          }
          var SUSPENSE_START_DATA = '$'
          var SUSPENSE_END_DATA = '/$'
          var SUSPENSE_PENDING_START_DATA = '$?'
          var SUSPENSE_FALLBACK_START_DATA = '$!'
          var STYLE$1 = 'style'
          var eventsEnabled = null
          var selectionInformation = null
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case 'button':
              case 'input':
              case 'select':
              case 'textarea':
                return !!props.autoFocus
            }
            return false
          }
          function getRootHostContext(rootContainerInstance) {
            var type
            var namespace
            var nodeType = rootContainerInstance.nodeType
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment'
                var root2 = rootContainerInstance.documentElement
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, '')
                break
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance
                var ownNamespace = container.namespaceURI || null
                type = container.tagName
                namespace = getChildNamespace(ownNamespace, type)
                break
              }
            }
            {
              var validatedTag = type.toLowerCase()
              var ancestorInfo = updatedAncestorInfo(null, validatedTag)
              return {
                namespace,
                ancestorInfo,
              }
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext
              var namespace = getChildNamespace(parentHostContextDev.namespace, type)
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type)
              return {
                namespace,
                ancestorInfo,
              }
            }
          }
          function getPublicInstance(instance) {
            return instance
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled()
            selectionInformation = getSelectionInformation()
            var activeInstance = null
            setEnabled(false)
            return activeInstance
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation)
            setEnabled(eventsEnabled)
            eventsEnabled = null
            selectionInformation = null
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace
            {
              var hostContextDev = hostContext
              validateDOMNesting(type, null, hostContextDev.ancestorInfo)
              if (typeof props.children === 'string' || typeof props.children === 'number') {
                var string = '' + props.children
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type)
                validateDOMNesting(null, string, ownAncestorInfo)
              }
              parentNamespace = hostContextDev.namespace
            }
            var domElement = createElement3(type, props, rootContainerInstance, parentNamespace)
            precacheFiberNode(internalInstanceHandle, domElement)
            updateFiberProps(domElement, props)
            return domElement
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child)
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance)
            return shouldAutoFocusHostComponent(type, props)
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext
              if (
                typeof newProps.children !== typeof oldProps.children &&
                (typeof newProps.children === 'string' || typeof newProps.children === 'number')
              ) {
                var string = '' + newProps.children
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type)
                validateDOMNesting(null, string, ownAncestorInfo)
              }
            }
            return diffProperties(domElement, type, oldProps, newProps)
          }
          function shouldSetTextContent(type, props) {
            return (
              type === 'textarea' ||
              type === 'option' ||
              type === 'noscript' ||
              typeof props.children === 'string' ||
              typeof props.children === 'number' ||
              (typeof props.dangerouslySetInnerHTML === 'object' &&
                props.dangerouslySetInnerHTML !== null &&
                props.dangerouslySetInnerHTML.__html != null)
            )
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext
              validateDOMNesting(null, text, hostContextDev.ancestorInfo)
            }
            var textNode = createTextNode(text, rootContainerInstance)
            precacheFiberNode(internalInstanceHandle, textNode)
            return textNode
          }
          var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : void 0
          var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : void 0
          var noTimeout = -1
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus()
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps)
            updateProperties(domElement, updatePayload, type, oldProps, newProps)
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, '')
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child)
          }
          function appendChildToContainer(container, child) {
            var parentNode
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode
              parentNode.insertBefore(child, container)
            } else {
              parentNode = container
              parentNode.appendChild(child)
            }
            var reactRootContainer = container._reactRootContainer
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode)
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild)
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild)
            } else {
              container.insertBefore(child, beforeChild)
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child)
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child)
            } else {
              container.removeChild(child)
            }
          }
          function hideInstance(instance) {
            instance = instance
            var style2 = instance.style
            if (typeof style2.setProperty === 'function') {
              style2.setProperty('display', 'none', 'important')
            } else {
              style2.display = 'none'
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = ''
          }
          function unhideInstance(instance, props) {
            instance = instance
            var styleProp = props[STYLE$1]
            var display =
              styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty('display')
                ? styleProp.display
                : null
            instance.style.display = dangerousStyleValue('display', display)
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = ''
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body
              if (body != null) {
                body.textContent = ''
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null
            }
            return instance
          }
          function canHydrateTextInstance(instance, text) {
            if (text === '' || instance.nodeType !== TEXT_NODE) {
              return null
            }
            return instance
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break
              }
            }
            return node
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling)
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild)
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance)
            updateFiberProps(instance, props)
            var parentNamespace
            {
              var hostContextDev = hostContext
              parentNamespace = hostContextDev.namespace
            }
            return diffHydratedProperties(instance, type, props, parentNamespace)
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance)
            return diffHydratedText(textInstance, text)
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling
            var depth = 0
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node)
                  } else {
                    depth--
                  }
                } else if (
                  data === SUSPENSE_START_DATA ||
                  data === SUSPENSE_FALLBACK_START_DATA ||
                  data === SUSPENSE_PENDING_START_DATA
                ) {
                  depth++
                }
              }
              node = node.nextSibling
            }
            return null
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling
            var depth = 0
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data
                if (
                  data === SUSPENSE_START_DATA ||
                  data === SUSPENSE_FALLBACK_START_DATA ||
                  data === SUSPENSE_PENDING_START_DATA
                ) {
                  if (depth === 0) {
                    return node
                  } else {
                    depth--
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++
                }
              }
              node = node.previousSibling
            }
            return null
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container)
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance)
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text)
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text)
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance)
              } else if (instance.nodeType === COMMENT_NODE);
              else {
                warnForDeletedHydratableText(parentContainer, instance)
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance)
              } else if (instance.nodeType === COMMENT_NODE);
              else {
                warnForDeletedHydratableText(parentInstance, instance)
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type)
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text)
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type)
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text)
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true);
          }
          var clientId = 0
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id = 'r:' + (clientId++).toString(36)
            return {
              toString: function () {
                warnOnAccessInDEV()
                return id
              },
              valueOf: function () {
                warnOnAccessInDEV()
                return id
              },
            }
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue,
            }
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance)
            }
          }
          var randomKey = Math.random().toString(36).slice(2)
          var internalInstanceKey = '__reactFiber$' + randomKey
          var internalPropsKey = '__reactProps$' + randomKey
          var internalContainerInstanceKey = '__reactContainer$' + randomKey
          var internalEventHandlersKey = '__reactEvents$' + randomKey
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey]
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey]
            if (targetInst) {
              return targetInst
            }
            var parentNode = targetNode.parentNode
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]
              if (targetInst) {
                var alternate = targetInst.alternate
                if (targetInst.child !== null || (alternate !== null && alternate.child !== null)) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode)
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey]
                    if (targetSuspenseInst) {
                      return targetSuspenseInst
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance)
                  }
                }
                return targetInst
              }
              targetNode = parentNode
              parentNode = targetNode.parentNode
            }
            return null
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey]
            if (inst) {
              if (
                inst.tag === HostComponent ||
                inst.tag === HostText ||
                inst.tag === SuspenseComponent ||
                inst.tag === HostRoot
              ) {
                return inst
              } else {
                return null
              }
            }
            return null
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode
            }
            {
              {
                throw Error('getNodeFromInstance: Invalid argument.')
              }
            }
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey]
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = new Set()
            }
            return elementListenerSet
          }
          var loggedTypeFailures = {}
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner
                var stack = describeUnknownElementTypeFrameInDEV(
                  element.type,
                  element._source,
                  owner ? owner.type : null
                )
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack)
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null)
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty)
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0
                  try {
                    if (typeof typeSpecs[typeSpecName] !== 'function') {
                      var err = Error(
                        (componentName || 'React class') +
                          ': ' +
                          location +
                          ' type `' +
                          typeSpecName +
                          '` is invalid; it must be a function, usually from the `prop-types` package, but received `' +
                          typeof typeSpecs[typeSpecName] +
                          '`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
                      )
                      err.name = 'Invariant Violation'
                      throw err
                    }
                    error$1 = typeSpecs[typeSpecName](
                      values,
                      typeSpecName,
                      componentName,
                      location,
                      null,
                      'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'
                    )
                  } catch (ex) {
                    error$1 = ex
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element)
                    error(
                      '%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).',
                      componentName || 'React class',
                      location,
                      typeSpecName,
                      typeof error$1
                    )
                    setCurrentlyValidatingElement(null)
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true
                    setCurrentlyValidatingElement(element)
                    error('Failed %s type: %s', location, error$1.message)
                    setCurrentlyValidatingElement(null)
                  }
                }
              }
            }
          }
          var valueStack = []
          var fiberStack
          {
            fiberStack = []
          }
          var index = -1
          function createCursor(defaultValue) {
            return {
              current: defaultValue,
            }
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error('Unexpected pop.')
              }
              return
            }
            {
              if (fiber !== fiberStack[index]) {
                error('Unexpected Fiber popped.')
              }
            }
            cursor.current = valueStack[index]
            valueStack[index] = null
            {
              fiberStack[index] = null
            }
            index--
          }
          function push(cursor, value, fiber) {
            index++
            valueStack[index] = cursor.current
            {
              fiberStack[index] = fiber
            }
            cursor.current = value
          }
          var warnedAboutMissingGetChildContext
          {
            warnedAboutMissingGetChildContext = {}
          }
          var emptyContextObject = {}
          {
            Object.freeze(emptyContextObject)
          }
          var contextStackCursor = createCursor(emptyContextObject)
          var didPerformWorkStackCursor = createCursor(false)
          var previousContext = emptyContextObject
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext
              }
              return contextStackCursor.current
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type
              var contextTypes = type.contextTypes
              if (!contextTypes) {
                return emptyContextObject
              }
              var instance = workInProgress2.stateNode
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext
              }
              var context = {}
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key]
              }
              {
                var name = getComponentName(type) || 'Unknown'
                checkPropTypes(contextTypes, context, 'context', name)
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context)
              }
              return context
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes
              return childContextTypes !== null && childContextTypes !== void 0
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber)
              pop(contextStackCursor, fiber)
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber)
              pop(contextStackCursor, fiber)
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error(
                    'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.'
                  )
                }
              }
              push(contextStackCursor, context, fiber)
              push(didPerformWorkStackCursor, didChange, fiber)
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode
              var childContextTypes = type.childContextTypes
              if (typeof instance.getChildContext !== 'function') {
                {
                  var componentName = getComponentName(type) || 'Unknown'
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true
                    error(
                      '%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.',
                      componentName,
                      componentName
                    )
                  }
                }
                return parentContext
              }
              var childContext = instance.getChildContext()
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error(
                      (getComponentName(type) || 'Unknown') +
                        '.getChildContext(): key "' +
                        contextKey +
                        '" is not defined in childContextTypes.'
                    )
                  }
                }
              }
              {
                var name = getComponentName(type) || 'Unknown'
                checkPropTypes(childContextTypes, childContext, 'child context', name)
              }
              return _assign({}, parentContext, childContext)
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode
              var memoizedMergedChildContext =
                (instance && instance.__reactInternalMemoizedMergedChildContext) || emptyContextObject
              previousContext = contextStackCursor.current
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2)
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2)
              return true
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode
              if (!instance) {
                {
                  throw Error(
                    'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.'
                  )
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext)
                instance.__reactInternalMemoizedMergedChildContext = mergedContext
                pop(didPerformWorkStackCursor, workInProgress2)
                pop(contextStackCursor, workInProgress2)
                push(contextStackCursor, mergedContext, workInProgress2)
                push(didPerformWorkStackCursor, didChange, workInProgress2)
              } else {
                pop(didPerformWorkStackCursor, workInProgress2)
                push(didPerformWorkStackCursor, didChange, workInProgress2)
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error(
                    'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.'
                  )
                }
              }
              var node = fiber
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context
                  case ClassComponent: {
                    var Component2 = node.type
                    if (isContextProvider(Component2)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext
                    }
                    break
                  }
                }
                node = node.return
              } while (node !== null)
              {
                {
                  throw Error(
                    'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.'
                  )
                }
              }
            }
          }
          var LegacyRoot = 0
          var BlockingRoot = 1
          var ConcurrentRoot = 2
          var rendererID = null
          var injectedHook = null
          var hasLoggedError = false
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined'
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
              return false
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__
            if (hook.isDisabled) {
              return true
            }
            if (!hook.supportsFiber) {
              {
                error(
                  'The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools'
                )
              }
              return true
            }
            try {
              rendererID = hook.inject(internals)
              injectedHook = hook
            } catch (err) {
              {
                error('React instrumentation encountered an error: %s.', err)
              }
            }
            return true
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children)
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true
                    error('React instrumentation encountered an error: %s', err)
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError)
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError)
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true
                    error('React instrumentation encountered an error: %s', err)
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber)
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true
                    error('React instrumentation encountered an error: %s', err)
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
            Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
            Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
            Scheduler_shouldYield = Scheduler.unstable_shouldYield,
            Scheduler_requestPaint = Scheduler.unstable_requestPaint,
            Scheduler_now$1 = Scheduler.unstable_now,
            Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
            Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
            Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
            Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
            Scheduler_LowPriority = Scheduler.unstable_LowPriority,
            Scheduler_IdlePriority = Scheduler.unstable_IdlePriority
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error(
                  'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling'
                )
              }
            }
          }
          var fakeCallbackNode = {}
          var ImmediatePriority$1 = 99
          var UserBlockingPriority$2 = 98
          var NormalPriority$1 = 97
          var LowPriority$1 = 96
          var IdlePriority$1 = 95
          var NoPriority$1 = 90
          var shouldYield = Scheduler_shouldYield
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function () {}
          var syncQueue = null
          var immediateQueueCallbackNode = null
          var isFlushingSyncQueue = false
          var initialTimeMs$1 = Scheduler_now$1()
          var now =
            initialTimeMs$1 < 1e4
              ? Scheduler_now$1
              : function () {
                  return Scheduler_now$1() - initialTimeMs$1
                }
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2
              case Scheduler_NormalPriority:
                return NormalPriority$1
              case Scheduler_LowPriority:
                return LowPriority$1
              case Scheduler_IdlePriority:
                return IdlePriority$1
              default: {
                {
                  throw Error('Unknown priority level.')
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority
              case NormalPriority$1:
                return Scheduler_NormalPriority
              case LowPriority$1:
                return Scheduler_LowPriority
              case IdlePriority$1:
                return Scheduler_IdlePriority
              default: {
                {
                  throw Error('Unknown priority level.')
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel)
            return Scheduler_runWithPriority(priorityLevel, fn)
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel)
            return Scheduler_scheduleCallback(priorityLevel, callback, options2)
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback]
              immediateQueueCallbackNode = Scheduler_scheduleCallback(
                Scheduler_ImmediatePriority,
                flushSyncCallbackQueueImpl
              )
            } else {
              syncQueue.push(callback)
            }
            return fakeCallbackNode
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode)
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode
              immediateQueueCallbackNode = null
              Scheduler_cancelCallback(node)
            }
            flushSyncCallbackQueueImpl()
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true
              var i = 0
              {
                try {
                  var _isSync2 = true
                  var _queue = syncQueue
                  runWithPriority$1(ImmediatePriority$1, function () {
                    for (; i < _queue.length; i++) {
                      var callback = _queue[i]
                      do {
                        callback = callback(_isSync2)
                      } while (callback !== null)
                    }
                  })
                  syncQueue = null
                } catch (error2) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i + 1)
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue)
                  throw error2
                } finally {
                  isFlushingSyncQueue = false
                }
              }
            }
          }
          var ReactVersion = '17.0.2'
          var NoMode = 0
          var StrictMode = 1
          var BlockingMode = 2
          var ConcurrentMode = 4
          var ProfileMode = 8
          var DebugTracingMode = 16
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig
          var NoTransition = 0
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function (fiber, instance) {},
            flushPendingUnsafeLifecycleWarnings: function () {},
            recordLegacyContextWarning: function (fiber, instance) {},
            flushLegacyContextWarning: function () {},
            discardPendingWarnings: function () {},
          }
          {
            var findStrictRoot = function (fiber) {
              var maybeStrictRoot = null
              var node = fiber
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node
                }
                node = node.return
              }
              return maybeStrictRoot
            }
            var setToSortedString = function (set2) {
              var array = []
              set2.forEach(function (value) {
                array.push(value)
              })
              return array.sort().join(', ')
            }
            var pendingComponentWillMountWarnings = []
            var pendingUNSAFE_ComponentWillMountWarnings = []
            var pendingComponentWillReceivePropsWarnings = []
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = []
            var pendingComponentWillUpdateWarnings = []
            var pendingUNSAFE_ComponentWillUpdateWarnings = []
            var didWarnAboutUnsafeLifecycles = new Set()
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return
              }
              if (
                typeof instance.componentWillMount === 'function' &&
                instance.componentWillMount.__suppressDeprecationWarning !== true
              ) {
                pendingComponentWillMountWarnings.push(fiber)
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber)
              }
              if (
                typeof instance.componentWillReceiveProps === 'function' &&
                instance.componentWillReceiveProps.__suppressDeprecationWarning !== true
              ) {
                pendingComponentWillReceivePropsWarnings.push(fiber)
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber)
              }
              if (
                typeof instance.componentWillUpdate === 'function' &&
                instance.componentWillUpdate.__suppressDeprecationWarning !== true
              ) {
                pendingComponentWillUpdateWarnings.push(fiber)
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber)
              }
            }
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
              var componentWillMountUniqueNames = new Set()
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function (fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component')
                  didWarnAboutUnsafeLifecycles.add(fiber.type)
                })
                pendingComponentWillMountWarnings = []
              }
              var UNSAFE_componentWillMountUniqueNames = new Set()
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component')
                  didWarnAboutUnsafeLifecycles.add(fiber.type)
                })
                pendingUNSAFE_ComponentWillMountWarnings = []
              }
              var componentWillReceivePropsUniqueNames = new Set()
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component')
                  didWarnAboutUnsafeLifecycles.add(fiber.type)
                })
                pendingComponentWillReceivePropsWarnings = []
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = new Set()
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component')
                  didWarnAboutUnsafeLifecycles.add(fiber.type)
                })
                pendingUNSAFE_ComponentWillReceivePropsWarnings = []
              }
              var componentWillUpdateUniqueNames = new Set()
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function (fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component')
                  didWarnAboutUnsafeLifecycles.add(fiber.type)
                })
                pendingComponentWillUpdateWarnings = []
              }
              var UNSAFE_componentWillUpdateUniqueNames = new Set()
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component')
                  didWarnAboutUnsafeLifecycles.add(fiber.type)
                })
                pendingUNSAFE_ComponentWillUpdateWarnings = []
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames)
                error(
                  'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s',
                  sortedNames
                )
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames)
                error(
                  "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s",
                  _sortedNames
                )
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames)
                error(
                  'Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s',
                  _sortedNames2
                )
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames)
                warn(
                  'componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s',
                  _sortedNames3
                )
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames)
                warn(
                  "componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
                  _sortedNames4
                )
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames)
                warn(
                  'componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s',
                  _sortedNames5
                )
              }
            }
            var pendingLegacyContextWarning = new Map()
            var didWarnAboutLegacyContext = new Set()
            ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
              var strictRoot = findStrictRoot(fiber)
              if (strictRoot === null) {
                error(
                  'Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.'
                )
                return
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot)
              if (
                fiber.type.contextTypes != null ||
                fiber.type.childContextTypes != null ||
                (instance !== null && typeof instance.getChildContext === 'function')
              ) {
                if (warningsForRoot === void 0) {
                  warningsForRoot = []
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot)
                }
                warningsForRoot.push(fiber)
              }
            }
            ReactStrictModeWarnings.flushLegacyContextWarning = function () {
              pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return
                }
                var firstFiber = fiberArray[0]
                var uniqueNames = new Set()
                fiberArray.forEach(function (fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || 'Component')
                  didWarnAboutLegacyContext.add(fiber.type)
                })
                var sortedNames = setToSortedString(uniqueNames)
                try {
                  setCurrentFiber(firstFiber)
                  error(
                    'Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context',
                    sortedNames
                  )
                } finally {
                  resetCurrentFiber()
                }
              })
            }
            ReactStrictModeWarnings.discardPendingWarnings = function () {
              pendingComponentWillMountWarnings = []
              pendingUNSAFE_ComponentWillMountWarnings = []
              pendingComponentWillReceivePropsWarnings = []
              pendingUNSAFE_ComponentWillReceivePropsWarnings = []
              pendingComponentWillUpdateWarnings = []
              pendingUNSAFE_ComponentWillUpdateWarnings = []
              pendingLegacyContextWarning = new Map()
            }
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = _assign({}, baseProps)
              var defaultProps = Component2.defaultProps
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName]
                }
              }
              return props
            }
            return baseProps
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823
          var valueCursor = createCursor(null)
          var rendererSigil
          {
            rendererSigil = {}
          }
          var currentlyRenderingFiber = null
          var lastContextDependency = null
          var lastContextWithAllBitsObserved = null
          var isDisallowedContextReadInDEV = false
          function resetContextDependencies() {
            currentlyRenderingFiber = null
            lastContextDependency = null
            lastContextWithAllBitsObserved = null
            {
              isDisallowedContextReadInDEV = false
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context
            {
              push(valueCursor, context._currentValue, providerFiber)
              context._currentValue = nextValue
              {
                if (
                  context._currentRenderer !== void 0 &&
                  context._currentRenderer !== null &&
                  context._currentRenderer !== rendererSigil
                ) {
                  error(
                    'Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.'
                  )
                }
                context._currentRenderer = rendererSigil
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current
            pop(valueCursor, providerFiber)
            var context = providerFiber.type._context
            {
              context._currentValue = currentValue
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0
            } else {
              var changedBits =
                typeof context._calculateChangedBits === 'function'
                  ? context._calculateChangedBits(oldValue, newValue)
                  : MAX_SIGNED_31_BIT_INT
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error(
                    'calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s',
                    changedBits
                  )
                }
              }
              return changedBits | 0
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node = parent
            while (node !== null) {
              var alternate = node.alternate
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2)
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2)
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2)
              } else {
                break
              }
              node = node.return
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child
            if (fiber !== null) {
              fiber.return = workInProgress2
            }
            while (fiber !== null) {
              var nextFiber = void 0
              var list = fiber.dependencies
              if (list !== null) {
                nextFiber = fiber.child
                var dependency = list.firstContext
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2))
                      update.tag = ForceUpdate
                      enqueueUpdate(fiber, update)
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2)
                    var alternate = fiber.alternate
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2)
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2)
                    list.lanes = mergeLanes(list.lanes, renderLanes2)
                    break
                  }
                  dependency = dependency.next
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child
              } else {
                nextFiber = fiber.child
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber
              } else {
                nextFiber = fiber
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null
                    break
                  }
                  var sibling = nextFiber.sibling
                  if (sibling !== null) {
                    sibling.return = nextFiber.return
                    nextFiber = sibling
                    break
                  }
                  nextFiber = nextFiber.return
                }
              }
              fiber = nextFiber
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2
            lastContextDependency = null
            lastContextWithAllBitsObserved = null
            var dependencies = workInProgress2.dependencies
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate()
                }
                dependencies.firstContext = null
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error(
                  'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().'
                )
              }
            }
            if (lastContextWithAllBitsObserved === context);
            else if (observedBits === false || observedBits === 0);
            else {
              var resolvedObservedBits
              if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT
              } else {
                resolvedObservedBits = observedBits
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null,
              }
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error(
                      'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().'
                    )
                  }
                }
                lastContextDependency = contextItem
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null,
                }
              } else {
                lastContextDependency = lastContextDependency.next = contextItem
              }
            }
            return context._currentValue
          }
          var UpdateState = 0
          var ReplaceState = 1
          var ForceUpdate = 2
          var CaptureUpdate = 3
          var hasForceUpdate = false
          var didWarnUpdateInsideUpdate
          var currentlyProcessingQueue
          {
            didWarnUpdateInsideUpdate = false
            currentlyProcessingQueue = null
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
              },
              effects: null,
            }
            fiber.updateQueue = queue
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue
            var currentQueue = current2.updateQueue
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects,
              }
              workInProgress2.updateQueue = clone
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null,
            }
            return update
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue
            if (updateQueue === null) {
              return
            }
            var sharedQueue = updateQueue.shared
            var pending = sharedQueue.pending
            if (pending === null) {
              update.next = update
            } else {
              update.next = pending.next
              pending.next = update
            }
            sharedQueue.pending = update
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error(
                  'An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.'
                )
                didWarnUpdateInsideUpdate = true
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue
            var current2 = workInProgress2.alternate
            if (current2 !== null) {
              var currentQueue = current2.updateQueue
              if (queue === currentQueue) {
                var newFirst = null
                var newLast = null
                var firstBaseUpdate = queue.firstBaseUpdate
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null,
                    }
                    if (newLast === null) {
                      newFirst = newLast = clone
                    } else {
                      newLast.next = clone
                      newLast = clone
                    }
                    update = update.next
                  } while (update !== null)
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate
                  } else {
                    newLast.next = capturedUpdate
                    newLast = capturedUpdate
                  }
                } else {
                  newFirst = newLast = capturedUpdate
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects,
                }
                workInProgress2.updateQueue = queue
                return
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate
            } else {
              lastBaseUpdate.next = capturedUpdate
            }
            queue.lastBaseUpdate = capturedUpdate
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload
                if (typeof payload === 'function') {
                  {
                    enterDisallowedContextReadInDEV()
                  }
                  var nextState = payload.call(instance, prevState, nextProps)
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs()
                      try {
                        payload.call(instance, prevState, nextProps)
                      } finally {
                        reenableLogs()
                      }
                    }
                    exitDisallowedContextReadInDEV()
                  }
                  return nextState
                }
                return payload
              }
              case CaptureUpdate: {
                workInProgress2.flags = (workInProgress2.flags & ~ShouldCapture) | DidCapture
              }
              case UpdateState: {
                var _payload = update.payload
                var partialState
                if (typeof _payload === 'function') {
                  {
                    enterDisallowedContextReadInDEV()
                  }
                  partialState = _payload.call(instance, prevState, nextProps)
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs()
                      try {
                        _payload.call(instance, prevState, nextProps)
                      } finally {
                        reenableLogs()
                      }
                    }
                    exitDisallowedContextReadInDEV()
                  }
                } else {
                  partialState = _payload
                }
                if (partialState === null || partialState === void 0) {
                  return prevState
                }
                return _assign({}, prevState, partialState)
              }
              case ForceUpdate: {
                hasForceUpdate = true
                return prevState
              }
            }
            return prevState
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue
            hasForceUpdate = false
            {
              currentlyProcessingQueue = queue.shared
            }
            var firstBaseUpdate = queue.firstBaseUpdate
            var lastBaseUpdate = queue.lastBaseUpdate
            var pendingQueue = queue.shared.pending
            if (pendingQueue !== null) {
              queue.shared.pending = null
              var lastPendingUpdate = pendingQueue
              var firstPendingUpdate = lastPendingUpdate.next
              lastPendingUpdate.next = null
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate
              } else {
                lastBaseUpdate.next = firstPendingUpdate
              }
              lastBaseUpdate = lastPendingUpdate
              var current2 = workInProgress2.alternate
              if (current2 !== null) {
                var currentQueue = current2.updateQueue
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState
              var newLanes = NoLanes
              var newBaseState = null
              var newFirstBaseUpdate = null
              var newLastBaseUpdate = null
              var update = firstBaseUpdate
              do {
                var updateLane = update.lane
                var updateEventTime = update.eventTime
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null,
                  }
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone
                    newBaseState = newState
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone
                  }
                  newLanes = mergeLanes(newLanes, updateLane)
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null,
                    }
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance)
                  var callback = update.callback
                  if (callback !== null) {
                    workInProgress2.flags |= Callback
                    var effects = queue.effects
                    if (effects === null) {
                      queue.effects = [update]
                    } else {
                      effects.push(update)
                    }
                  }
                }
                update = update.next
                if (update === null) {
                  pendingQueue = queue.shared.pending
                  if (pendingQueue === null) {
                    break
                  } else {
                    var _lastPendingUpdate = pendingQueue
                    var _firstPendingUpdate = _lastPendingUpdate.next
                    _lastPendingUpdate.next = null
                    update = _firstPendingUpdate
                    queue.lastBaseUpdate = _lastPendingUpdate
                    queue.shared.pending = null
                  }
                }
              } while (true)
              if (newLastBaseUpdate === null) {
                newBaseState = newState
              }
              queue.baseState = newBaseState
              queue.firstBaseUpdate = newFirstBaseUpdate
              queue.lastBaseUpdate = newLastBaseUpdate
              markSkippedUpdateLanes(newLanes)
              workInProgress2.lanes = newLanes
              workInProgress2.memoizedState = newState
            }
            {
              currentlyProcessingQueue = null
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === 'function')) {
              {
                throw Error('Invalid argument passed as callback. Expected a function. Instead received: ' + callback)
              }
            }
            callback.call(context)
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects
            finishedQueue.effects = null
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i]
                var callback = effect.callback
                if (callback !== null) {
                  effect.callback = null
                  callCallback(callback, instance)
                }
              }
            }
          }
          var fakeInternalInstance = {}
          var isArray = Array.isArray
          var emptyRefsObject = new React10.Component().refs
          var didWarnAboutStateAssignmentForComponent
          var didWarnAboutUninitializedState
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate
          var didWarnAboutLegacyLifecyclesAndDerivedState
          var didWarnAboutUndefinedDerivedState
          var warnOnUndefinedDerivedState
          var warnOnInvalidCallback
          var didWarnAboutDirectlyAssigningPropsToState
          var didWarnAboutContextTypeAndContextTypes
          var didWarnAboutInvalidateContextType
          {
            didWarnAboutStateAssignmentForComponent = new Set()
            didWarnAboutUninitializedState = new Set()
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set()
            didWarnAboutLegacyLifecyclesAndDerivedState = new Set()
            didWarnAboutDirectlyAssigningPropsToState = new Set()
            didWarnAboutUndefinedDerivedState = new Set()
            didWarnAboutContextTypeAndContextTypes = new Set()
            didWarnAboutInvalidateContextType = new Set()
            var didWarnOnInvalidCallback = new Set()
            warnOnInvalidCallback = function (callback, callerName) {
              if (callback === null || typeof callback === 'function') {
                return
              }
              var key = callerName + '_' + callback
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key)
                error(
                  '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.',
                  callerName,
                  callback
                )
              }
            }
            warnOnUndefinedDerivedState = function (type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || 'Component'
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName)
                  error(
                    '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.',
                    componentName
                  )
                }
              }
            }
            Object.defineProperty(fakeInternalInstance, '_processChildContext', {
              enumerable: false,
              value: function () {
                {
                  {
                    throw Error(
                      "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)."
                    )
                  }
                }
              },
            })
            Object.freeze(fakeInternalInstance)
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs()
                try {
                  getDerivedStateFromProps(nextProps, prevState)
                } finally {
                  reenableLogs()
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState)
            {
              warnOnUndefinedDerivedState(ctor, partialState)
            }
            var memoizedState =
              partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState)
            workInProgress2.memoizedState = memoizedState
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue
              updateQueue.baseState = memoizedState
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function (inst, payload, callback) {
              var fiber = get(inst)
              var eventTime = requestEventTime()
              var lane = requestUpdateLane(fiber)
              var update = createUpdate(eventTime, lane)
              update.payload = payload
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, 'setState')
                }
                update.callback = callback
              }
              enqueueUpdate(fiber, update)
              scheduleUpdateOnFiber(fiber, lane, eventTime)
            },
            enqueueReplaceState: function (inst, payload, callback) {
              var fiber = get(inst)
              var eventTime = requestEventTime()
              var lane = requestUpdateLane(fiber)
              var update = createUpdate(eventTime, lane)
              update.tag = ReplaceState
              update.payload = payload
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, 'replaceState')
                }
                update.callback = callback
              }
              enqueueUpdate(fiber, update)
              scheduleUpdateOnFiber(fiber, lane, eventTime)
            },
            enqueueForceUpdate: function (inst, callback) {
              var fiber = get(inst)
              var eventTime = requestEventTime()
              var lane = requestUpdateLane(fiber)
              var update = createUpdate(eventTime, lane)
              update.tag = ForceUpdate
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, 'forceUpdate')
                }
                update.callback = callback
              }
              enqueueUpdate(fiber, update)
              scheduleUpdateOnFiber(fiber, lane, eventTime)
            },
          }
          function checkShouldComponentUpdate(
            workInProgress2,
            ctor,
            oldProps,
            newProps,
            oldState,
            newState,
            nextContext
          ) {
            var instance = workInProgress2.stateNode
            if (typeof instance.shouldComponentUpdate === 'function') {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs()
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext)
                  } finally {
                    reenableLogs()
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext)
              {
                if (shouldUpdate === void 0) {
                  error(
                    '%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.',
                    getComponentName(ctor) || 'Component'
                  )
                }
              }
              return shouldUpdate
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)
            }
            return true
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode
            {
              var name = getComponentName(ctor) || 'Component'
              var renderPresent = instance.render
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === 'function') {
                  error(
                    '%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?',
                    name
                  )
                } else {
                  error(
                    '%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.',
                    name
                  )
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error(
                  'getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?',
                  name
                )
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error(
                  'getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.',
                  name
                )
              }
              if (instance.propTypes) {
                error(
                  'propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.',
                  name
                )
              }
              if (instance.contextType) {
                error(
                  'contextType was defined as an instance property on %s. Use a static property to define contextType instead.',
                  name
                )
              }
              {
                if (instance.contextTypes) {
                  error(
                    'contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.',
                    name
                  )
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor)
                  error(
                    '%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.',
                    name
                  )
                }
              }
              if (typeof instance.componentShouldUpdate === 'function') {
                error(
                  '%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.',
                  name
                )
              }
              if (
                ctor.prototype &&
                ctor.prototype.isPureReactComponent &&
                typeof instance.shouldComponentUpdate !== 'undefined'
              ) {
                error(
                  '%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.',
                  getComponentName(ctor) || 'A pure component'
                )
              }
              if (typeof instance.componentDidUnmount === 'function') {
                error(
                  '%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?',
                  name
                )
              }
              if (typeof instance.componentDidReceiveProps === 'function') {
                error(
                  '%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().',
                  name
                )
              }
              if (typeof instance.componentWillRecieveProps === 'function') {
                error(
                  '%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
                  name
                )
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
                error(
                  '%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',
                  name
                )
              }
              var hasMutatedProps = instance.props !== newProps
              if (instance.props !== void 0 && hasMutatedProps) {
                error(
                  "%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
                  name,
                  name
                )
              }
              if (instance.defaultProps) {
                error(
                  'Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.',
                  name,
                  name
                )
              }
              if (
                typeof instance.getSnapshotBeforeUpdate === 'function' &&
                typeof instance.componentDidUpdate !== 'function' &&
                !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)
              ) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor)
                error(
                  '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.',
                  getComponentName(ctor)
                )
              }
              if (typeof instance.getDerivedStateFromProps === 'function') {
                error(
                  '%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.',
                  name
                )
              }
              if (typeof instance.getDerivedStateFromError === 'function') {
                error(
                  '%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.',
                  name
                )
              }
              if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
                error(
                  '%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.',
                  name
                )
              }
              var _state = instance.state
              if (_state && (typeof _state !== 'object' || isArray(_state))) {
                error('%s.state: must be set to an object or null', name)
              }
              if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
                error(
                  '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().',
                  name
                )
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater
            workInProgress2.stateNode = instance
            set(instance, workInProgress2)
            {
              instance._reactInternalInstance = fakeInternalInstance
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false
            var unmaskedContext = emptyContextObject
            var context = emptyContextObject
            var contextType = ctor.contextType
            {
              if ('contextType' in ctor) {
                var isValid =
                  contextType === null ||
                  (contextType !== void 0 &&
                    contextType.$$typeof === REACT_CONTEXT_TYPE &&
                    contextType._context === void 0)
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor)
                  var addendum = ''
                  if (contextType === void 0) {
                    addendum =
                      ' However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.'
                  } else if (typeof contextType !== 'object') {
                    addendum = ' However, it is set to a ' + typeof contextType + '.'
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = ' Did you accidentally pass the Context.Provider instead?'
                  } else if (contextType._context !== void 0) {
                    addendum = ' Did you accidentally pass the Context.Consumer instead?'
                  } else {
                    addendum =
                      ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.'
                  }
                  error(
                    '%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s',
                    getComponentName(ctor) || 'Component',
                    addendum
                  )
                }
              }
            }
            if (typeof contextType === 'object' && contextType !== null) {
              context = readContext(contextType)
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true)
              var contextTypes = ctor.contextTypes
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0
              context = isLegacyContextConsumer
                ? getMaskedContext(workInProgress2, unmaskedContext)
                : emptyContextObject
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs()
                try {
                  new ctor(props, context)
                } finally {
                  reenableLogs()
                }
              }
            }
            var instance = new ctor(props, context)
            var state = (workInProgress2.memoizedState =
              instance.state !== null && instance.state !== void 0 ? instance.state : null)
            adoptClassInstance(workInProgress2, instance)
            {
              if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
                var componentName = getComponentName(ctor) || 'Component'
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName)
                  error(
                    '`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',
                    componentName,
                    instance.state === null ? 'null' : 'undefined',
                    componentName
                  )
                }
              }
              if (
                typeof ctor.getDerivedStateFromProps === 'function' ||
                typeof instance.getSnapshotBeforeUpdate === 'function'
              ) {
                var foundWillMountName = null
                var foundWillReceivePropsName = null
                var foundWillUpdateName = null
                if (
                  typeof instance.componentWillMount === 'function' &&
                  instance.componentWillMount.__suppressDeprecationWarning !== true
                ) {
                  foundWillMountName = 'componentWillMount'
                } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
                  foundWillMountName = 'UNSAFE_componentWillMount'
                }
                if (
                  typeof instance.componentWillReceiveProps === 'function' &&
                  instance.componentWillReceiveProps.__suppressDeprecationWarning !== true
                ) {
                  foundWillReceivePropsName = 'componentWillReceiveProps'
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
                  foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps'
                }
                if (
                  typeof instance.componentWillUpdate === 'function' &&
                  instance.componentWillUpdate.__suppressDeprecationWarning !== true
                ) {
                  foundWillUpdateName = 'componentWillUpdate'
                } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                  foundWillUpdateName = 'UNSAFE_componentWillUpdate'
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || 'Component'
                  var newApiName =
                    typeof ctor.getDerivedStateFromProps === 'function'
                      ? 'getDerivedStateFromProps()'
                      : 'getSnapshotBeforeUpdate()'
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName)
                    error(
                      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles',
                      _componentName,
                      newApiName,
                      foundWillMountName !== null ? '\n  ' + foundWillMountName : '',
                      foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '',
                      foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : ''
                    )
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context)
            }
            return instance
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state
            if (typeof instance.componentWillMount === 'function') {
              instance.componentWillMount()
            }
            if (typeof instance.UNSAFE_componentWillMount === 'function') {
              instance.UNSAFE_componentWillMount()
            }
            if (oldState !== instance.state) {
              {
                error(
                  "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
                  getComponentName(workInProgress2.type) || 'Component'
                )
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null)
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state
            if (typeof instance.componentWillReceiveProps === 'function') {
              instance.componentWillReceiveProps(newProps, nextContext)
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext)
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || 'Component'
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName)
                  error(
                    "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
                    componentName
                  )
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null)
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps)
            }
            var instance = workInProgress2.stateNode
            instance.props = newProps
            instance.state = workInProgress2.memoizedState
            instance.refs = emptyRefsObject
            initializeUpdateQueue(workInProgress2)
            var contextType = ctor.contextType
            if (typeof contextType === 'object' && contextType !== null) {
              instance.context = readContext(contextType)
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true)
              instance.context = getMaskedContext(workInProgress2, unmaskedContext)
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || 'Component'
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName)
                  error(
                    "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
                    componentName
                  )
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance)
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance)
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2)
            instance.state = workInProgress2.memoizedState
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps
            if (typeof getDerivedStateFromProps === 'function') {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps)
              instance.state = workInProgress2.memoizedState
            }
            if (
              typeof ctor.getDerivedStateFromProps !== 'function' &&
              typeof instance.getSnapshotBeforeUpdate !== 'function' &&
              (typeof instance.UNSAFE_componentWillMount === 'function' ||
                typeof instance.componentWillMount === 'function')
            ) {
              callComponentWillMount(workInProgress2, instance)
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2)
              instance.state = workInProgress2.memoizedState
            }
            if (typeof instance.componentDidMount === 'function') {
              workInProgress2.flags |= Update
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode
            var oldProps = workInProgress2.memoizedProps
            instance.props = oldProps
            var oldContext = instance.context
            var contextType = ctor.contextType
            var nextContext = emptyContextObject
            if (typeof contextType === 'object' && contextType !== null) {
              nextContext = readContext(contextType)
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true)
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext)
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps
            var hasNewLifecycles =
              typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'
            if (
              !hasNewLifecycles &&
              (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||
                typeof instance.componentWillReceiveProps === 'function')
            ) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext)
              }
            }
            resetHasForceUpdateBeforeProcessing()
            var oldState = workInProgress2.memoizedState
            var newState = (instance.state = oldState)
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2)
            newState = workInProgress2.memoizedState
            if (
              oldProps === newProps &&
              oldState === newState &&
              !hasContextChanged() &&
              !checkHasForceUpdateAfterProcessing()
            ) {
              if (typeof instance.componentDidMount === 'function') {
                workInProgress2.flags |= Update
              }
              return false
            }
            if (typeof getDerivedStateFromProps === 'function') {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps)
              newState = workInProgress2.memoizedState
            }
            var shouldUpdate =
              checkHasForceUpdateAfterProcessing() ||
              checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext)
            if (shouldUpdate) {
              if (
                !hasNewLifecycles &&
                (typeof instance.UNSAFE_componentWillMount === 'function' ||
                  typeof instance.componentWillMount === 'function')
              ) {
                if (typeof instance.componentWillMount === 'function') {
                  instance.componentWillMount()
                }
                if (typeof instance.UNSAFE_componentWillMount === 'function') {
                  instance.UNSAFE_componentWillMount()
                }
              }
              if (typeof instance.componentDidMount === 'function') {
                workInProgress2.flags |= Update
              }
            } else {
              if (typeof instance.componentDidMount === 'function') {
                workInProgress2.flags |= Update
              }
              workInProgress2.memoizedProps = newProps
              workInProgress2.memoizedState = newState
            }
            instance.props = newProps
            instance.state = newState
            instance.context = nextContext
            return shouldUpdate
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode
            cloneUpdateQueue(current2, workInProgress2)
            var unresolvedOldProps = workInProgress2.memoizedProps
            var oldProps =
              workInProgress2.type === workInProgress2.elementType
                ? unresolvedOldProps
                : resolveDefaultProps(workInProgress2.type, unresolvedOldProps)
            instance.props = oldProps
            var unresolvedNewProps = workInProgress2.pendingProps
            var oldContext = instance.context
            var contextType = ctor.contextType
            var nextContext = emptyContextObject
            if (typeof contextType === 'object' && contextType !== null) {
              nextContext = readContext(contextType)
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true)
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext)
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps
            var hasNewLifecycles =
              typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'
            if (
              !hasNewLifecycles &&
              (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||
                typeof instance.componentWillReceiveProps === 'function')
            ) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext)
              }
            }
            resetHasForceUpdateBeforeProcessing()
            var oldState = workInProgress2.memoizedState
            var newState = (instance.state = oldState)
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2)
            newState = workInProgress2.memoizedState
            if (
              unresolvedOldProps === unresolvedNewProps &&
              oldState === newState &&
              !hasContextChanged() &&
              !checkHasForceUpdateAfterProcessing()
            ) {
              if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot
                }
              }
              return false
            }
            if (typeof getDerivedStateFromProps === 'function') {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps)
              newState = workInProgress2.memoizedState
            }
            var shouldUpdate =
              checkHasForceUpdateAfterProcessing() ||
              checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext)
            if (shouldUpdate) {
              if (
                !hasNewLifecycles &&
                (typeof instance.UNSAFE_componentWillUpdate === 'function' ||
                  typeof instance.componentWillUpdate === 'function')
              ) {
                if (typeof instance.componentWillUpdate === 'function') {
                  instance.componentWillUpdate(newProps, newState, nextContext)
                }
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext)
                }
              }
              if (typeof instance.componentDidUpdate === 'function') {
                workInProgress2.flags |= Update
              }
              if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                workInProgress2.flags |= Snapshot
              }
            } else {
              if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot
                }
              }
              workInProgress2.memoizedProps = newProps
              workInProgress2.memoizedState = newState
            }
            instance.props = newProps
            instance.state = newState
            instance.context = nextContext
            return shouldUpdate
          }
          var didWarnAboutMaps
          var didWarnAboutGenerators
          var didWarnAboutStringRefs
          var ownerHasKeyUseWarning
          var ownerHasFunctionTypeWarning
          var warnForMissingKey = function (child, returnFiber) {}
          {
            didWarnAboutMaps = false
            didWarnAboutGenerators = false
            didWarnAboutStringRefs = {}
            ownerHasKeyUseWarning = {}
            ownerHasFunctionTypeWarning = {}
            warnForMissingKey = function (child, returnFiber) {
              if (child === null || typeof child !== 'object') {
                return
              }
              if (!child._store || child._store.validated || child.key != null) {
                return
              }
              if (!(typeof child._store === 'object')) {
                {
                  throw Error(
                    'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.'
                  )
                }
              }
              child._store.validated = true
              var componentName = getComponentName(returnFiber.type) || 'Component'
              if (ownerHasKeyUseWarning[componentName]) {
                return
              }
              ownerHasKeyUseWarning[componentName] = true
              error(
                'Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'
              )
            }
          }
          var isArray$1 = Array.isArray
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref
            if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
              {
                if (
                  (returnFiber.mode & StrictMode || warnAboutStringRefs) &&
                  !(element._owner && element._self && element._owner.stateNode !== element._self)
                ) {
                  var componentName = getComponentName(returnFiber.type) || 'Component'
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error(
                        'A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',
                        mixedRef
                      )
                    }
                    didWarnAboutStringRefs[componentName] = true
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner
                var inst
                if (owner) {
                  var ownerFiber = owner
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error(
                        'Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref'
                      )
                    }
                  }
                  inst = ownerFiber.stateNode
                }
                if (!inst) {
                  {
                    throw Error(
                      'Missing owner for string ref ' +
                        mixedRef +
                        '. This error is likely caused by a bug in React. Please file an issue.'
                    )
                  }
                }
                var stringRef = '' + mixedRef
                if (
                  current2 !== null &&
                  current2.ref !== null &&
                  typeof current2.ref === 'function' &&
                  current2.ref._stringRef === stringRef
                ) {
                  return current2.ref
                }
                var ref = function (value) {
                  var refs = inst.refs
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {}
                  }
                  if (value === null) {
                    delete refs[stringRef]
                  } else {
                    refs[stringRef] = value
                  }
                }
                ref._stringRef = stringRef
                return ref
              } else {
                if (!(typeof mixedRef === 'string')) {
                  {
                    throw Error(
                      'Expected ref to be a function, a string, an object returned by React.createRef(), or null.'
                    )
                  }
                }
                if (!element._owner) {
                  {
                    throw Error(
                      'Element ref was specified as a string (' +
                        mixedRef +
                        ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information."
                    )
                  }
                }
              }
            }
            return mixedRef
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== 'textarea') {
              {
                {
                  throw Error(
                    'Objects are not valid as a React child (found: ' +
                      (Object.prototype.toString.call(newChild) === '[object Object]'
                        ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'
                        : newChild) +
                      '). If you meant to render a collection of children, use an array instead.'
                  )
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || 'Component'
              if (ownerHasFunctionTypeWarning[componentName]) {
                return
              }
              ownerHasFunctionTypeWarning[componentName] = true
              error(
                'Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.'
              )
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return
              }
              var last = returnFiber.lastEffect
              if (last !== null) {
                last.nextEffect = childToDelete
                returnFiber.lastEffect = childToDelete
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete
              }
              childToDelete.nextEffect = null
              childToDelete.flags = Deletion
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null
              }
              var childToDelete = currentFirstChild
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete)
                childToDelete = childToDelete.sibling
              }
              return null
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = new Map()
              var existingChild = currentFirstChild
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild)
                } else {
                  existingChildren.set(existingChild.index, existingChild)
                }
                existingChild = existingChild.sibling
              }
              return existingChildren
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps)
              clone.index = 0
              clone.sibling = null
              return clone
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex
              }
              var current2 = newFiber.alternate
              if (current2 !== null) {
                var oldIndex = current2.index
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement
                  return lastPlacedIndex
                } else {
                  return oldIndex
                }
              } else {
                newFiber.flags = Placement
                return lastPlacedIndex
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement
              }
              return newFiber
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes)
                created.return = returnFiber
                return created
              } else {
                var existing = useFiber(current2, textContent)
                existing.return = returnFiber
                return existing
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props)
                  existing.ref = coerceRef(returnFiber, current2, element)
                  existing.return = returnFiber
                  {
                    existing._debugSource = element._source
                    existing._debugOwner = element._owner
                  }
                  return existing
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes)
              created.ref = coerceRef(returnFiber, current2, element)
              created.return = returnFiber
              return created
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (
                current2 === null ||
                current2.tag !== HostPortal ||
                current2.stateNode.containerInfo !== portal.containerInfo ||
                current2.stateNode.implementation !== portal.implementation
              ) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes)
                created.return = returnFiber
                return created
              } else {
                var existing = useFiber(current2, portal.children || [])
                existing.return = returnFiber
                return existing
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key)
                created.return = returnFiber
                return created
              } else {
                var existing = useFiber(current2, fragment)
                existing.return = returnFiber
                return existing
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === 'string' || typeof newChild === 'number') {
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes)
                created.return = returnFiber
                return created
              }
              if (typeof newChild === 'object' && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes)
                    _created.ref = coerceRef(returnFiber, null, newChild)
                    _created.return = returnFiber
                    return _created
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes)
                    _created2.return = returnFiber
                    return _created2
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null)
                  _created3.return = returnFiber
                  return _created3
                }
                throwOnInvalidObjectType(returnFiber, newChild)
              }
              {
                if (typeof newChild === 'function') {
                  warnOnFunctionType(returnFiber)
                }
              }
              return null
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null
              if (typeof newChild === 'string' || typeof newChild === 'number') {
                if (key !== null) {
                  return null
                }
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes)
              }
              if (typeof newChild === 'object' && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key)
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes)
                    } else {
                      return null
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes)
                    } else {
                      return null
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null)
                }
                throwOnInvalidObjectType(returnFiber, newChild)
              }
              {
                if (typeof newChild === 'function') {
                  warnOnFunctionType(returnFiber)
                }
              }
              return null
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === 'string' || typeof newChild === 'number') {
                var matchedFiber = existingChildren.get(newIdx) || null
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes)
              }
              if (typeof newChild === 'object' && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key)
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes)
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes)
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null)
                }
                throwOnInvalidObjectType(returnFiber, newChild)
              }
              {
                if (typeof newChild === 'function') {
                  warnOnFunctionType(returnFiber)
                }
              }
              return null
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== 'object' || child === null) {
                  return knownKeys
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber)
                    var key = child.key
                    if (typeof key !== 'string') {
                      break
                    }
                    if (knownKeys === null) {
                      knownKeys = new Set()
                      knownKeys.add(key)
                      break
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key)
                      break
                    }
                    error(
                      'Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.',
                      key
                    )
                    break
                }
              }
              return knownKeys
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i]
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber)
                }
              }
              var resultingFirstChild = null
              var previousNewFiber = null
              var oldFiber = currentFirstChild
              var lastPlacedIndex = 0
              var newIdx = 0
              var nextOldFiber = null
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber
                  oldFiber = null
                } else {
                  nextOldFiber = oldFiber.sibling
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes)
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber
                  }
                  break
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber)
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx)
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber
                } else {
                  previousNewFiber.sibling = newFiber
                }
                previousNewFiber = newFiber
                oldFiber = nextOldFiber
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber)
                return resultingFirstChild
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes)
                  if (_newFiber === null) {
                    continue
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx)
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber
                  } else {
                    previousNewFiber.sibling = _newFiber
                  }
                  previousNewFiber = _newFiber
                }
                return resultingFirstChild
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber)
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes)
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key)
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx)
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2
                  } else {
                    previousNewFiber.sibling = _newFiber2
                  }
                  previousNewFiber = _newFiber2
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function (child2) {
                  return deleteChild(returnFiber, child2)
                })
              }
              return resultingFirstChild
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable)
              if (!(typeof iteratorFn === 'function')) {
                {
                  throw Error(
                    'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.'
                  )
                }
              }
              {
                if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                  if (!didWarnAboutGenerators) {
                    error(
                      'Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.'
                    )
                  }
                  didWarnAboutGenerators = true
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error('Using Maps as children is not supported. Use an array of keyed ReactElements instead.')
                  }
                  didWarnAboutMaps = true
                }
                var _newChildren = iteratorFn.call(newChildrenIterable)
                if (_newChildren) {
                  var knownKeys = null
                  var _step = _newChildren.next()
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber)
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable)
              if (!(newChildren != null)) {
                {
                  throw Error('An iterable object provided no iterator.')
                }
              }
              var resultingFirstChild = null
              var previousNewFiber = null
              var oldFiber = currentFirstChild
              var lastPlacedIndex = 0
              var newIdx = 0
              var nextOldFiber = null
              var step = newChildren.next()
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber
                  oldFiber = null
                } else {
                  nextOldFiber = oldFiber.sibling
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes)
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber
                  }
                  break
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber)
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx)
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber
                } else {
                  previousNewFiber.sibling = newFiber
                }
                previousNewFiber = newFiber
                oldFiber = nextOldFiber
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber)
                return resultingFirstChild
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes)
                  if (_newFiber3 === null) {
                    continue
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx)
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3
                  } else {
                    previousNewFiber.sibling = _newFiber3
                  }
                  previousNewFiber = _newFiber3
                }
                return resultingFirstChild
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber)
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes)
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key)
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx)
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4
                  } else {
                    previousNewFiber.sibling = _newFiber4
                  }
                  previousNewFiber = _newFiber4
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function (child2) {
                  return deleteChild(returnFiber, child2)
                })
              }
              return resultingFirstChild
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling)
                var existing = useFiber(currentFirstChild, textContent)
                existing.return = returnFiber
                return existing
              }
              deleteRemainingChildren(returnFiber, currentFirstChild)
              var created = createFiberFromText(textContent, returnFiber.mode, lanes)
              created.return = returnFiber
              return created
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key
              var child = currentFirstChild
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling)
                        var existing = useFiber(child, element.props.children)
                        existing.return = returnFiber
                        {
                          existing._debugSource = element._source
                          existing._debugOwner = element._owner
                        }
                        return existing
                      }
                      break
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling)
                        var _existing3 = useFiber(child, element.props)
                        _existing3.ref = coerceRef(returnFiber, child, element)
                        _existing3.return = returnFiber
                        {
                          _existing3._debugSource = element._source
                          _existing3._debugOwner = element._owner
                        }
                        return _existing3
                      }
                      break
                    }
                  }
                  deleteRemainingChildren(returnFiber, child)
                  break
                } else {
                  deleteChild(returnFiber, child)
                }
                child = child.sibling
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key)
                created.return = returnFiber
                return created
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes)
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element)
                _created4.return = returnFiber
                return _created4
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key
              var child = currentFirstChild
              while (child !== null) {
                if (child.key === key) {
                  if (
                    child.tag === HostPortal &&
                    child.stateNode.containerInfo === portal.containerInfo &&
                    child.stateNode.implementation === portal.implementation
                  ) {
                    deleteRemainingChildren(returnFiber, child.sibling)
                    var existing = useFiber(child, portal.children || [])
                    existing.return = returnFiber
                    return existing
                  } else {
                    deleteRemainingChildren(returnFiber, child)
                    break
                  }
                } else {
                  deleteChild(returnFiber, child)
                }
                child = child.sibling
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes)
              created.return = returnFiber
              return created
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment =
                typeof newChild === 'object' &&
                newChild !== null &&
                newChild.type === REACT_FRAGMENT_TYPE &&
                newChild.key === null
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children
              }
              var isObject = typeof newChild === 'object' && newChild !== null
              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes))
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes))
                }
              }
              if (typeof newChild === 'string' || typeof newChild === 'number') {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes))
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes)
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes)
              }
              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild)
              }
              {
                if (typeof newChild === 'function') {
                  warnOnFunctionType(returnFiber)
                }
              }
              if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode
                      if (instance.render._isMockFunction) {
                        break
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error(
                          (getComponentName(returnFiber.type) || 'Component') +
                            '(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.'
                        )
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild)
            }
            return reconcileChildFibers2
          }
          var reconcileChildFibers = ChildReconciler(true)
          var mountChildFibers = ChildReconciler(false)
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error('Resuming work not yet implemented.')
              }
            }
            if (workInProgress2.child === null) {
              return
            }
            var currentChild = workInProgress2.child
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps)
            workInProgress2.child = newChild
            newChild.return = workInProgress2
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps)
              newChild.return = workInProgress2
            }
            newChild.sibling = null
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child
            while (child !== null) {
              resetWorkInProgress(child, lanes)
              child = child.sibling
            }
          }
          var NO_CONTEXT = {}
          var contextStackCursor$1 = createCursor(NO_CONTEXT)
          var contextFiberStackCursor = createCursor(NO_CONTEXT)
          var rootInstanceStackCursor = createCursor(NO_CONTEXT)
          function requiredContext(c) {
            if (!(c !== NO_CONTEXT)) {
              {
                throw Error(
                  'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            }
            return c
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current)
            return rootInstance
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber)
            push(contextFiberStackCursor, fiber, fiber)
            push(contextStackCursor$1, NO_CONTEXT, fiber)
            var nextRootContext = getRootHostContext(nextRootInstance)
            pop(contextStackCursor$1, fiber)
            push(contextStackCursor$1, nextRootContext, fiber)
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber)
            pop(contextFiberStackCursor, fiber)
            pop(rootInstanceStackCursor, fiber)
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current)
            return context
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current)
            var context = requiredContext(contextStackCursor$1.current)
            var nextContext = getChildHostContext(context, fiber.type)
            if (context === nextContext) {
              return
            }
            push(contextFiberStackCursor, fiber, fiber)
            push(contextStackCursor$1, nextContext, fiber)
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return
            }
            pop(contextStackCursor$1, fiber)
            pop(contextFiberStackCursor, fiber)
          }
          var DefaultSuspenseContext = 0
          var SubtreeSuspenseContextMask = 1
          var InvisibleParentSuspenseContext = 1
          var ForceSuspenseFallback = 2
          var suspenseStackCursor = createCursor(DefaultSuspenseContext)
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return (parentContext & SubtreeSuspenseContextMask) | shallowContext
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber)
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber)
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true
              }
              return false
            }
            var props = workInProgress2.memoizedProps
            if (props.fallback === void 0) {
              return false
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true
            }
            if (hasInvisibleParent) {
              return false
            }
            return true
          }
          function findFirstSuspended(row) {
            var node = row
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState
                if (state !== null) {
                  var dehydrated = state.dehydrated
                  if (
                    dehydrated === null ||
                    isSuspenseInstancePending(dehydrated) ||
                    isSuspenseInstanceFallback(dehydrated)
                  ) {
                    return node
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags
                if (didSuspend) {
                  return node
                }
              } else if (node.child !== null) {
                node.child.return = node
                node = node.child
                continue
              }
              if (node === row) {
                return null
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null
                }
                node = node.return
              }
              node.sibling.return = node.return
              node = node.sibling
            }
            return null
          }
          var NoFlags$1 = 0
          var HasEffect = 1
          var Layout = 2
          var Passive$1 = 4
          var hydrationParentFiber = null
          var nextHydratableInstance = null
          var isHydrating = false
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo
            nextHydratableInstance = getFirstHydratableChild(parentInstance)
            hydrationParentFiber = fiber
            isHydrating = true
            return true
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance)
                  break
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance)
                  break
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion()
            childToDelete.stateNode = instance
            childToDelete.return = returnFiber
            childToDelete.flags = Deletion
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete
              returnFiber.lastEffect = childToDelete
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = (fiber.flags & ~Hydrating) | Placement
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type
                      var props = fiber.pendingProps
                      didNotFindHydratableContainerInstance(parentContainer, type)
                      break
                    case HostText:
                      var text = fiber.pendingProps
                      didNotFindHydratableContainerTextInstance(parentContainer, text)
                      break
                  }
                  break
                }
                case HostComponent: {
                  var parentType = returnFiber.type
                  var parentProps = returnFiber.memoizedProps
                  var parentInstance = returnFiber.stateNode
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type
                      var _props = fiber.pendingProps
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type)
                      break
                    case HostText:
                      var _text = fiber.pendingProps
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text)
                      break
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps)
                      break
                  }
                  break
                }
                default:
                  return
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type
                var props = fiber.pendingProps
                var instance = canHydrateInstance(nextInstance, type)
                if (instance !== null) {
                  fiber.stateNode = instance
                  return true
                }
                return false
              }
              case HostText: {
                var text = fiber.pendingProps
                var textInstance = canHydrateTextInstance(nextInstance, text)
                if (textInstance !== null) {
                  fiber.stateNode = textInstance
                  return true
                }
                return false
              }
              case SuspenseComponent: {
                return false
              }
              default:
                return false
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return
            }
            var nextInstance = nextHydratableInstance
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber)
              isHydrating = false
              hydrationParentFiber = fiber
              return
            }
            var firstAttemptedInstance = nextInstance
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance)
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber)
                isHydrating = false
                hydrationParentFiber = fiber
                return
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance)
            }
            hydrationParentFiber = fiber
            nextHydratableInstance = getFirstHydratableChild(nextInstance)
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode
            var updatePayload = hydrateInstance(
              instance,
              fiber.type,
              fiber.memoizedProps,
              rootContainerInstance,
              hostContext,
              fiber
            )
            fiber.updateQueue = updatePayload
            if (updatePayload !== null) {
              return true
            }
            return false
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode
            var textContent = fiber.memoizedProps
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber)
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent)
                      break
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type
                      var parentProps = returnFiber.memoizedProps
                      var parentInstance = returnFiber.stateNode
                      didNotMatchHydratedTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        textInstance,
                        textContent
                      )
                      break
                    }
                  }
                }
              }
            }
            return shouldUpdate
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null
            if (!suspenseInstance) {
              {
                throw Error(
                  'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance)
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return
            while (
              parent !== null &&
              parent.tag !== HostComponent &&
              parent.tag !== HostRoot &&
              parent.tag !== SuspenseComponent
            ) {
              parent = parent.return
            }
            hydrationParentFiber = parent
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false
            }
            if (!isHydrating) {
              popToNextHostParent(fiber)
              isHydrating = true
              return false
            }
            var type = fiber.type
            if (
              fiber.tag !== HostComponent ||
              (type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps))
            ) {
              var nextInstance = nextHydratableInstance
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance)
                nextInstance = getNextHydratableSibling(nextInstance)
              }
            }
            popToNextHostParent(fiber)
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber)
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null
            }
            return true
          }
          function resetHydrationState() {
            hydrationParentFiber = null
            nextHydratableInstance = null
            isHydrating = false
          }
          function getIsHydrating() {
            return isHydrating
          }
          var workInProgressSources = []
          var rendererSigil$1
          {
            rendererSigil$1 = {}
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource)
          }
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i]
              {
                mutableSource._workInProgressVersionPrimary = null
              }
            }
            workInProgressSources.length = 0
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary
            }
          }
          function setWorkInProgressVersion(mutableSource, version2) {
            {
              mutableSource._workInProgressVersionPrimary = version2
            }
            workInProgressSources.push(mutableSource)
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error(
                    'Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.'
                  )
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
            ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig
          var didWarnAboutMismatchedHooksForComponent
          var didWarnAboutUseOpaqueIdentifier
          {
            didWarnAboutUseOpaqueIdentifier = {}
            didWarnAboutMismatchedHooksForComponent = new Set()
          }
          var renderLanes = NoLanes
          var currentlyRenderingFiber$1 = null
          var currentHook = null
          var workInProgressHook = null
          var didScheduleRenderPhaseUpdate = false
          var didScheduleRenderPhaseUpdateDuringThisPass = false
          var RE_RENDER_LIMIT = 25
          var currentHookNameInDev = null
          var hookTypesDev = null
          var hookTypesUpdateIndexDev = -1
          var ignorePreviousDependencies = false
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev
              if (hookTypesDev === null) {
                hookTypesDev = [hookName]
              } else {
                hookTypesDev.push(hookName)
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName)
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error(
                  '%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.',
                  currentHookNameInDev,
                  typeof deps
                )
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type)
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName)
                if (hookTypesDev !== null) {
                  var table = ''
                  var secondColumnStart = 30
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i]
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName
                    var row = i + 1 + '. ' + oldHookName
                    while (row.length < secondColumnStart) {
                      row += ' '
                    }
                    row += newHookName + '\n'
                    table += row
                  }
                  error(
                    'React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n',
                    componentName,
                    table
                  )
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error(
                  'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.'
                )
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false
              }
            }
            if (prevDeps === null) {
              {
                error(
                  '%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.',
                  currentHookNameInDev
                )
              }
              return false
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error(
                  'The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s',
                  currentHookNameInDev,
                  '[' + prevDeps.join(', ') + ']',
                  '[' + nextDeps.join(', ') + ']'
                )
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue
              }
              return false
            }
            return true
          }
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes
            currentlyRenderingFiber$1 = workInProgress2
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null
              hookTypesUpdateIndexDev = -1
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type
            }
            workInProgress2.memoizedState = null
            workInProgress2.updateQueue = null
            workInProgress2.lanes = NoLanes
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV
              }
            }
            var children = Component2(props, secondArg)
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error('Too many re-renders. React limits the number of renders to prevent an infinite loop.')
                  }
                }
                numberOfReRenders += 1
                {
                  ignorePreviousDependencies = false
                }
                currentHook = null
                workInProgressHook = null
                workInProgress2.updateQueue = null
                {
                  hookTypesUpdateIndexDev = -1
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV
                children = Component2(props, secondArg)
              } while (didScheduleRenderPhaseUpdateDuringThisPass)
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher
            {
              workInProgress2._debugHookTypes = hookTypesDev
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null
            renderLanes = NoLanes
            currentlyRenderingFiber$1 = null
            currentHook = null
            workInProgressHook = null
            {
              currentHookNameInDev = null
              hookTypesDev = null
              hookTypesUpdateIndexDev = -1
            }
            didScheduleRenderPhaseUpdate = false
            if (!!didRenderTooFewHooks) {
              {
                throw Error(
                  'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.'
                )
              }
            }
            return children
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue
            workInProgress2.flags &= ~(Passive | Update)
            current2.lanes = removeLanes(current2.lanes, lanes)
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState
              while (hook !== null) {
                var queue = hook.queue
                if (queue !== null) {
                  queue.pending = null
                }
                hook = hook.next
              }
              didScheduleRenderPhaseUpdate = false
            }
            renderLanes = NoLanes
            currentlyRenderingFiber$1 = null
            currentHook = null
            workInProgressHook = null
            {
              hookTypesDev = null
              hookTypesUpdateIndexDev = -1
              currentHookNameInDev = null
              isUpdatingOpaqueValueInRenderPhase = false
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null,
            }
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook
            } else {
              workInProgressHook = workInProgressHook.next = hook
            }
            return workInProgressHook
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState
              } else {
                nextCurrentHook = null
              }
            } else {
              nextCurrentHook = currentHook.next
            }
            var nextWorkInProgressHook
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState
            } else {
              nextWorkInProgressHook = workInProgressHook.next
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook
              nextWorkInProgressHook = workInProgressHook.next
              currentHook = nextCurrentHook
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error('Rendered more hooks than during the previous render.')
                }
              }
              currentHook = nextCurrentHook
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null,
              }
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook
              } else {
                workInProgressHook = workInProgressHook.next = newHook
              }
            }
            return workInProgressHook
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
            }
          }
          function basicStateReducer(state, action) {
            return typeof action === 'function' ? action(state) : action
          }
          function mountReducer(reducer, initialArg, init3) {
            var hook = mountWorkInProgressHook()
            var initialState
            if (init3 !== void 0) {
              initialState = init3(initialArg)
            } else {
              initialState = initialArg
            }
            hook.memoizedState = hook.baseState = initialState
            var queue = (hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState,
            })
            var dispatch = (queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue))
            return [hook.memoizedState, dispatch]
          }
          function updateReducer(reducer, initialArg, init3) {
            var hook = updateWorkInProgressHook()
            var queue = hook.queue
            if (!(queue !== null)) {
              {
                throw Error('Should have a queue. This is likely a bug in React. Please file an issue.')
              }
            }
            queue.lastRenderedReducer = reducer
            var current2 = currentHook
            var baseQueue = current2.baseQueue
            var pendingQueue = queue.pending
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next
                var pendingFirst = pendingQueue.next
                baseQueue.next = pendingFirst
                pendingQueue.next = baseFirst
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error('Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.')
                }
              }
              current2.baseQueue = baseQueue = pendingQueue
              queue.pending = null
            }
            if (baseQueue !== null) {
              var first = baseQueue.next
              var newState = current2.baseState
              var newBaseState = null
              var newBaseQueueFirst = null
              var newBaseQueueLast = null
              var update = first
              do {
                var updateLane = update.lane
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null,
                  }
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone
                    newBaseState = newState
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane)
                  markSkippedUpdateLanes(updateLane)
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null,
                    }
                    newBaseQueueLast = newBaseQueueLast.next = _clone
                  }
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState
                  } else {
                    var action = update.action
                    newState = reducer(newState, action)
                  }
                }
                update = update.next
              } while (update !== null && update !== first)
              if (newBaseQueueLast === null) {
                newBaseState = newState
              } else {
                newBaseQueueLast.next = newBaseQueueFirst
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate()
              }
              hook.memoizedState = newState
              hook.baseState = newBaseState
              hook.baseQueue = newBaseQueueLast
              queue.lastRenderedState = newState
            }
            var dispatch = queue.dispatch
            return [hook.memoizedState, dispatch]
          }
          function rerenderReducer(reducer, initialArg, init3) {
            var hook = updateWorkInProgressHook()
            var queue = hook.queue
            if (!(queue !== null)) {
              {
                throw Error('Should have a queue. This is likely a bug in React. Please file an issue.')
              }
            }
            queue.lastRenderedReducer = reducer
            var dispatch = queue.dispatch
            var lastRenderPhaseUpdate = queue.pending
            var newState = hook.memoizedState
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next
              var update = firstRenderPhaseUpdate
              do {
                var action = update.action
                newState = reducer(newState, action)
                update = update.next
              } while (update !== firstRenderPhaseUpdate)
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate()
              }
              hook.memoizedState = newState
              if (hook.baseQueue === null) {
                hook.baseState = newState
              }
              queue.lastRenderedState = newState
            }
            return [newState, dispatch]
          }
          function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source)
            }
            var getVersion = source._getVersion
            var version2 = getVersion(source._source)
            var isSafeToReadFromSource = false
            var currentRenderVersion = getWorkInProgressVersion(source)
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version2
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes)
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version2)
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source)
              {
                if (typeof snapshot === 'function') {
                  error(
                    'Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.'
                  )
                }
              }
              return snapshot
            } else {
              markSourceAsDirty(source)
              {
                {
                  throw Error(
                    'Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.'
                  )
                }
              }
            }
          }
          function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root2 = getWorkInProgressRoot()
            if (!(root2 !== null)) {
              {
                throw Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.')
              }
            }
            var getVersion = source._getVersion
            var version2 = getVersion(source._source)
            var dispatcher = ReactCurrentDispatcher$1.current
            var _dispatcher$useState = dispatcher.useState(function () {
                return readFromUnsubcribedMutableSource(root2, source, getSnapshot)
              }),
              currentSnapshot = _dispatcher$useState[0],
              setSnapshot = _dispatcher$useState[1]
            var snapshot = currentSnapshot
            var stateHook = workInProgressHook
            var memoizedState = hook.memoizedState
            var refs = memoizedState.refs
            var prevGetSnapshot = refs.getSnapshot
            var prevSource = memoizedState.source
            var prevSubscribe = memoizedState.subscribe
            var fiber = currentlyRenderingFiber$1
            hook.memoizedState = {
              refs,
              source,
              subscribe,
            }
            dispatcher.useEffect(
              function () {
                refs.getSnapshot = getSnapshot
                refs.setSnapshot = setSnapshot
                var maybeNewVersion = getVersion(source._source)
                if (!objectIs(version2, maybeNewVersion)) {
                  var maybeNewSnapshot = getSnapshot(source._source)
                  {
                    if (typeof maybeNewSnapshot === 'function') {
                      error(
                        'Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.'
                      )
                    }
                  }
                  if (!objectIs(snapshot, maybeNewSnapshot)) {
                    setSnapshot(maybeNewSnapshot)
                    var lane = requestUpdateLane(fiber)
                    markRootMutableRead(root2, lane)
                  }
                  markRootEntangled(root2, root2.mutableReadLanes)
                }
              },
              [getSnapshot, source, subscribe]
            )
            dispatcher.useEffect(
              function () {
                var handleChange = function () {
                  var latestGetSnapshot = refs.getSnapshot
                  var latestSetSnapshot = refs.setSnapshot
                  try {
                    latestSetSnapshot(latestGetSnapshot(source._source))
                    var lane = requestUpdateLane(fiber)
                    markRootMutableRead(root2, lane)
                  } catch (error2) {
                    latestSetSnapshot(function () {
                      throw error2
                    })
                  }
                }
                var unsubscribe = subscribe(source._source, handleChange)
                {
                  if (typeof unsubscribe !== 'function') {
                    error('Mutable source subscribe function must return an unsubscribe function.')
                  }
                }
                return unsubscribe
              },
              [source, subscribe]
            )
            if (
              !objectIs(prevGetSnapshot, getSnapshot) ||
              !objectIs(prevSource, source) ||
              !objectIs(prevSubscribe, subscribe)
            ) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot,
              }
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue)
              stateHook.queue = newQueue
              stateHook.baseQueue = null
              snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot)
              stateHook.memoizedState = stateHook.baseState = snapshot
            }
            return snapshot
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook()
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null,
              },
              source,
              subscribe,
            }
            return useMutableSource(hook, source, getSnapshot, subscribe)
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook()
            return useMutableSource(hook, source, getSnapshot, subscribe)
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook()
            if (typeof initialState === 'function') {
              initialState = initialState()
            }
            hook.memoizedState = hook.baseState = initialState
            var queue = (hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState,
            })
            var dispatch = (queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue))
            return [hook.memoizedState, dispatch]
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer)
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer)
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              next: null,
            }
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue()
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue
              componentUpdateQueue.lastEffect = effect.next = effect
            } else {
              var lastEffect = componentUpdateQueue.lastEffect
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect
              } else {
                var firstEffect = lastEffect.next
                lastEffect.next = effect
                effect.next = firstEffect
                componentUpdateQueue.lastEffect = effect
              }
            }
            return effect
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook()
            var ref = {
              current: initialValue,
            }
            {
              Object.seal(ref)
            }
            hook.memoizedState = ref
            return ref
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook()
            return hook.memoizedState
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook()
            var nextDeps = deps === void 0 ? null : deps
            currentlyRenderingFiber$1.flags |= fiberFlags
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps)
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook()
            var nextDeps = deps === void 0 ? null : deps
            var destroy = void 0
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState
              destroy = prevEffect.destroy
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create, destroy, nextDeps)
                  return
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps)
          }
          function mountEffect(create, deps) {
            {
              if (typeof jest !== 'undefined') {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1)
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps)
          }
          function updateEffect(create, deps) {
            {
              if (typeof jest !== 'undefined') {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1)
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps)
          }
          function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps)
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps)
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === 'function') {
              var refCallback = ref
              var _inst = create()
              refCallback(_inst)
              return function () {
                refCallback(null)
              }
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref
              {
                if (!refObject.hasOwnProperty('current')) {
                  error(
                    'Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.',
                    'an object with keys {' + Object.keys(refObject).join(', ') + '}'
                  )
                }
              }
              var _inst2 = create()
              refObject.current = _inst2
              return function () {
                refObject.current = null
              }
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== 'function') {
                error(
                  'Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.',
                  create !== null ? typeof create : 'null'
                )
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps)
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== 'function') {
                error(
                  'Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.',
                  create !== null ? typeof create : 'null'
                )
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps)
          }
          function mountDebugValue(value, formatterFn) {}
          var updateDebugValue = mountDebugValue
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook()
            var nextDeps = deps === void 0 ? null : deps
            hook.memoizedState = [callback, nextDeps]
            return callback
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook()
            var nextDeps = deps === void 0 ? null : deps
            var prevState = hook.memoizedState
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1]
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0]
                }
              }
            }
            hook.memoizedState = [callback, nextDeps]
            return callback
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook()
            var nextDeps = deps === void 0 ? null : deps
            var nextValue = nextCreate()
            hook.memoizedState = [nextValue, nextDeps]
            return nextValue
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook()
            var nextDeps = deps === void 0 ? null : deps
            var prevState = hook.memoizedState
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1]
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0]
                }
              }
            }
            var nextValue = nextCreate()
            hook.memoizedState = [nextValue, nextDeps]
            return nextValue
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value),
              prevValue = _mountState[0],
              setValue = _mountState[1]
            mountEffect(
              function () {
                var prevTransition = ReactCurrentBatchConfig$1.transition
                ReactCurrentBatchConfig$1.transition = 1
                try {
                  setValue(value)
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition
                }
              },
              [value]
            )
            return prevValue
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(),
              prevValue = _updateState[0],
              setValue = _updateState[1]
            updateEffect(
              function () {
                var prevTransition = ReactCurrentBatchConfig$1.transition
                ReactCurrentBatchConfig$1.transition = 1
                try {
                  setValue(value)
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition
                }
              },
              [value]
            )
            return prevValue
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(),
              prevValue = _rerenderState[0],
              setValue = _rerenderState[1]
            updateEffect(
              function () {
                var prevTransition = ReactCurrentBatchConfig$1.transition
                ReactCurrentBatchConfig$1.transition = 1
                try {
                  setValue(value)
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition
                }
              },
              [value]
            )
            return prevValue
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel()
            {
              runWithPriority$1(
                priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel,
                function () {
                  setPending(true)
                }
              )
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
                var prevTransition = ReactCurrentBatchConfig$1.transition
                ReactCurrentBatchConfig$1.transition = 1
                try {
                  setPending(false)
                  callback()
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition
                }
              })
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false),
              isPending = _mountState2[0],
              setPending = _mountState2[1]
            var start = startTransition.bind(null, setPending)
            mountRef(start)
            return [start, isPending]
          }
          function updateTransition() {
            var _updateState2 = updateState(),
              isPending = _updateState2[0]
            var startRef = updateRef()
            var start = startRef.current
            return [start, isPending]
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(),
              isPending = _rerenderState2[0]
            var startRef = updateRef()
            var start = startRef.current
            return [start, isPending]
          }
          var isUpdatingOpaqueValueInRenderPhase = false
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || 'Unknown'
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error(
                  'The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.'
                )
                didWarnAboutUseOpaqueIdentifier[name] = true
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(
              null,
              warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1)
            )
            if (getIsHydrating()) {
              var didUpgrade = false
              var fiber = currentlyRenderingFiber$1
              var readValue = function () {
                if (!didUpgrade) {
                  didUpgrade = true
                  {
                    isUpdatingOpaqueValueInRenderPhase = true
                    setId(makeId())
                    isUpdatingOpaqueValueInRenderPhase = false
                    warnOnOpaqueIdentifierAccessInDEV(fiber)
                  }
                }
                {
                  {
                    throw Error(
                      'The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.'
                    )
                  }
                }
              }
              var id = makeOpaqueHydratingObject(readValue)
              var setId = mountState(id)[1]
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive
                pushEffect(
                  HasEffect | Passive$1,
                  function () {
                    setId(makeId())
                  },
                  void 0,
                  null
                )
              }
              return id
            } else {
              var _id = makeId()
              mountState(_id)
              return _id
            }
          }
          function updateOpaqueIdentifier() {
            var id = updateState()[0]
            return id
          }
          function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0]
            return id
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === 'function') {
                error(
                  "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
                )
              }
            }
            var eventTime = requestEventTime()
            var lane = requestUpdateLane(fiber)
            var update = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null,
            }
            var pending = queue.pending
            if (pending === null) {
              update.next = update
            } else {
              update.next = pending.next
              pending.next = update
            }
            queue.pending = update
            var alternate = fiber.alternate
            if (
              fiber === currentlyRenderingFiber$1 ||
              (alternate !== null && alternate === currentlyRenderingFiber$1)
            ) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer
                if (lastRenderedReducer !== null) {
                  var prevDispatcher
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV
                  }
                  try {
                    var currentState = queue.lastRenderedState
                    var eagerState = lastRenderedReducer(currentState, action)
                    update.eagerReducer = lastRenderedReducer
                    update.eagerState = eagerState
                    if (objectIs(eagerState, currentState)) {
                      return
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher
                    }
                  }
                }
              }
              {
                if (typeof jest !== 'undefined') {
                  warnIfNotScopedWithMatchingAct(fiber)
                  warnIfNotCurrentlyActingUpdatesInDev(fiber)
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime)
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler,
          }
          var HooksDispatcherOnMountInDEV = null
          var HooksDispatcherOnMountWithHookTypesInDEV = null
          var HooksDispatcherOnUpdateInDEV = null
          var HooksDispatcherOnRerenderInDEV = null
          var InvalidNestedHooksDispatcherOnMountInDEV = null
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null
          {
            var warnInvalidContextAccess = function () {
              error(
                'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().'
              )
            }
            var warnInvalidHookAccess = function () {
              error(
                'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks'
              )
            }
            HooksDispatcherOnMountInDEV = {
              readContext: function (context, observedBits) {
                return readContext(context, observedBits)
              },
              useCallback: function (callback, deps) {
                currentHookNameInDev = 'useCallback'
                mountHookTypesDev()
                checkDepsAreArrayDev(deps)
                return mountCallback(callback, deps)
              },
              useContext: function (context, observedBits) {
                currentHookNameInDev = 'useContext'
                mountHookTypesDev()
                return readContext(context, observedBits)
              },
              useEffect: function (create, deps) {
                currentHookNameInDev = 'useEffect'
                mountHookTypesDev()
                checkDepsAreArrayDev(deps)
                return mountEffect(create, deps)
              },
              useImperativeHandle: function (ref, create, deps) {
                currentHookNameInDev = 'useImperativeHandle'
                mountHookTypesDev()
                checkDepsAreArrayDev(deps)
                return mountImperativeHandle(ref, create, deps)
              },
              useLayoutEffect: function (create, deps) {
                currentHookNameInDev = 'useLayoutEffect'
                mountHookTypesDev()
                checkDepsAreArrayDev(deps)
                return mountLayoutEffect(create, deps)
              },
              useMemo: function (create, deps) {
                currentHookNameInDev = 'useMemo'
                mountHookTypesDev()
                checkDepsAreArrayDev(deps)
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV
                try {
                  return mountMemo(create, deps)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useReducer: function (reducer, initialArg, init3) {
                currentHookNameInDev = 'useReducer'
                mountHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV
                try {
                  return mountReducer(reducer, initialArg, init3)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useRef: function (initialValue) {
                currentHookNameInDev = 'useRef'
                mountHookTypesDev()
                return mountRef(initialValue)
              },
              useState: function (initialState) {
                currentHookNameInDev = 'useState'
                mountHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV
                try {
                  return mountState(initialState)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useDebugValue: function (value, formatterFn) {
                currentHookNameInDev = 'useDebugValue'
                mountHookTypesDev()
                return mountDebugValue()
              },
              useDeferredValue: function (value) {
                currentHookNameInDev = 'useDeferredValue'
                mountHookTypesDev()
                return mountDeferredValue(value)
              },
              useTransition: function () {
                currentHookNameInDev = 'useTransition'
                mountHookTypesDev()
                return mountTransition()
              },
              useMutableSource: function (source, getSnapshot, subscribe) {
                currentHookNameInDev = 'useMutableSource'
                mountHookTypesDev()
                return mountMutableSource(source, getSnapshot, subscribe)
              },
              useOpaqueIdentifier: function () {
                currentHookNameInDev = 'useOpaqueIdentifier'
                mountHookTypesDev()
                return mountOpaqueIdentifier()
              },
              unstable_isNewReconciler: enableNewReconciler,
            }
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function (context, observedBits) {
                return readContext(context, observedBits)
              },
              useCallback: function (callback, deps) {
                currentHookNameInDev = 'useCallback'
                updateHookTypesDev()
                return mountCallback(callback, deps)
              },
              useContext: function (context, observedBits) {
                currentHookNameInDev = 'useContext'
                updateHookTypesDev()
                return readContext(context, observedBits)
              },
              useEffect: function (create, deps) {
                currentHookNameInDev = 'useEffect'
                updateHookTypesDev()
                return mountEffect(create, deps)
              },
              useImperativeHandle: function (ref, create, deps) {
                currentHookNameInDev = 'useImperativeHandle'
                updateHookTypesDev()
                return mountImperativeHandle(ref, create, deps)
              },
              useLayoutEffect: function (create, deps) {
                currentHookNameInDev = 'useLayoutEffect'
                updateHookTypesDev()
                return mountLayoutEffect(create, deps)
              },
              useMemo: function (create, deps) {
                currentHookNameInDev = 'useMemo'
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV
                try {
                  return mountMemo(create, deps)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useReducer: function (reducer, initialArg, init3) {
                currentHookNameInDev = 'useReducer'
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV
                try {
                  return mountReducer(reducer, initialArg, init3)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useRef: function (initialValue) {
                currentHookNameInDev = 'useRef'
                updateHookTypesDev()
                return mountRef(initialValue)
              },
              useState: function (initialState) {
                currentHookNameInDev = 'useState'
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV
                try {
                  return mountState(initialState)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useDebugValue: function (value, formatterFn) {
                currentHookNameInDev = 'useDebugValue'
                updateHookTypesDev()
                return mountDebugValue()
              },
              useDeferredValue: function (value) {
                currentHookNameInDev = 'useDeferredValue'
                updateHookTypesDev()
                return mountDeferredValue(value)
              },
              useTransition: function () {
                currentHookNameInDev = 'useTransition'
                updateHookTypesDev()
                return mountTransition()
              },
              useMutableSource: function (source, getSnapshot, subscribe) {
                currentHookNameInDev = 'useMutableSource'
                updateHookTypesDev()
                return mountMutableSource(source, getSnapshot, subscribe)
              },
              useOpaqueIdentifier: function () {
                currentHookNameInDev = 'useOpaqueIdentifier'
                updateHookTypesDev()
                return mountOpaqueIdentifier()
              },
              unstable_isNewReconciler: enableNewReconciler,
            }
            HooksDispatcherOnUpdateInDEV = {
              readContext: function (context, observedBits) {
                return readContext(context, observedBits)
              },
              useCallback: function (callback, deps) {
                currentHookNameInDev = 'useCallback'
                updateHookTypesDev()
                return updateCallback(callback, deps)
              },
              useContext: function (context, observedBits) {
                currentHookNameInDev = 'useContext'
                updateHookTypesDev()
                return readContext(context, observedBits)
              },
              useEffect: function (create, deps) {
                currentHookNameInDev = 'useEffect'
                updateHookTypesDev()
                return updateEffect(create, deps)
              },
              useImperativeHandle: function (ref, create, deps) {
                currentHookNameInDev = 'useImperativeHandle'
                updateHookTypesDev()
                return updateImperativeHandle(ref, create, deps)
              },
              useLayoutEffect: function (create, deps) {
                currentHookNameInDev = 'useLayoutEffect'
                updateHookTypesDev()
                return updateLayoutEffect(create, deps)
              },
              useMemo: function (create, deps) {
                currentHookNameInDev = 'useMemo'
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV
                try {
                  return updateMemo(create, deps)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useReducer: function (reducer, initialArg, init3) {
                currentHookNameInDev = 'useReducer'
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV
                try {
                  return updateReducer(reducer, initialArg, init3)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useRef: function (initialValue) {
                currentHookNameInDev = 'useRef'
                updateHookTypesDev()
                return updateRef()
              },
              useState: function (initialState) {
                currentHookNameInDev = 'useState'
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV
                try {
                  return updateState(initialState)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useDebugValue: function (value, formatterFn) {
                currentHookNameInDev = 'useDebugValue'
                updateHookTypesDev()
                return updateDebugValue()
              },
              useDeferredValue: function (value) {
                currentHookNameInDev = 'useDeferredValue'
                updateHookTypesDev()
                return updateDeferredValue(value)
              },
              useTransition: function () {
                currentHookNameInDev = 'useTransition'
                updateHookTypesDev()
                return updateTransition()
              },
              useMutableSource: function (source, getSnapshot, subscribe) {
                currentHookNameInDev = 'useMutableSource'
                updateHookTypesDev()
                return updateMutableSource(source, getSnapshot, subscribe)
              },
              useOpaqueIdentifier: function () {
                currentHookNameInDev = 'useOpaqueIdentifier'
                updateHookTypesDev()
                return updateOpaqueIdentifier()
              },
              unstable_isNewReconciler: enableNewReconciler,
            }
            HooksDispatcherOnRerenderInDEV = {
              readContext: function (context, observedBits) {
                return readContext(context, observedBits)
              },
              useCallback: function (callback, deps) {
                currentHookNameInDev = 'useCallback'
                updateHookTypesDev()
                return updateCallback(callback, deps)
              },
              useContext: function (context, observedBits) {
                currentHookNameInDev = 'useContext'
                updateHookTypesDev()
                return readContext(context, observedBits)
              },
              useEffect: function (create, deps) {
                currentHookNameInDev = 'useEffect'
                updateHookTypesDev()
                return updateEffect(create, deps)
              },
              useImperativeHandle: function (ref, create, deps) {
                currentHookNameInDev = 'useImperativeHandle'
                updateHookTypesDev()
                return updateImperativeHandle(ref, create, deps)
              },
              useLayoutEffect: function (create, deps) {
                currentHookNameInDev = 'useLayoutEffect'
                updateHookTypesDev()
                return updateLayoutEffect(create, deps)
              },
              useMemo: function (create, deps) {
                currentHookNameInDev = 'useMemo'
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV
                try {
                  return updateMemo(create, deps)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useReducer: function (reducer, initialArg, init3) {
                currentHookNameInDev = 'useReducer'
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV
                try {
                  return rerenderReducer(reducer, initialArg, init3)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useRef: function (initialValue) {
                currentHookNameInDev = 'useRef'
                updateHookTypesDev()
                return updateRef()
              },
              useState: function (initialState) {
                currentHookNameInDev = 'useState'
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV
                try {
                  return rerenderState(initialState)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useDebugValue: function (value, formatterFn) {
                currentHookNameInDev = 'useDebugValue'
                updateHookTypesDev()
                return updateDebugValue()
              },
              useDeferredValue: function (value) {
                currentHookNameInDev = 'useDeferredValue'
                updateHookTypesDev()
                return rerenderDeferredValue(value)
              },
              useTransition: function () {
                currentHookNameInDev = 'useTransition'
                updateHookTypesDev()
                return rerenderTransition()
              },
              useMutableSource: function (source, getSnapshot, subscribe) {
                currentHookNameInDev = 'useMutableSource'
                updateHookTypesDev()
                return updateMutableSource(source, getSnapshot, subscribe)
              },
              useOpaqueIdentifier: function () {
                currentHookNameInDev = 'useOpaqueIdentifier'
                updateHookTypesDev()
                return rerenderOpaqueIdentifier()
              },
              unstable_isNewReconciler: enableNewReconciler,
            }
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function (context, observedBits) {
                warnInvalidContextAccess()
                return readContext(context, observedBits)
              },
              useCallback: function (callback, deps) {
                currentHookNameInDev = 'useCallback'
                warnInvalidHookAccess()
                mountHookTypesDev()
                return mountCallback(callback, deps)
              },
              useContext: function (context, observedBits) {
                currentHookNameInDev = 'useContext'
                warnInvalidHookAccess()
                mountHookTypesDev()
                return readContext(context, observedBits)
              },
              useEffect: function (create, deps) {
                currentHookNameInDev = 'useEffect'
                warnInvalidHookAccess()
                mountHookTypesDev()
                return mountEffect(create, deps)
              },
              useImperativeHandle: function (ref, create, deps) {
                currentHookNameInDev = 'useImperativeHandle'
                warnInvalidHookAccess()
                mountHookTypesDev()
                return mountImperativeHandle(ref, create, deps)
              },
              useLayoutEffect: function (create, deps) {
                currentHookNameInDev = 'useLayoutEffect'
                warnInvalidHookAccess()
                mountHookTypesDev()
                return mountLayoutEffect(create, deps)
              },
              useMemo: function (create, deps) {
                currentHookNameInDev = 'useMemo'
                warnInvalidHookAccess()
                mountHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV
                try {
                  return mountMemo(create, deps)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useReducer: function (reducer, initialArg, init3) {
                currentHookNameInDev = 'useReducer'
                warnInvalidHookAccess()
                mountHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV
                try {
                  return mountReducer(reducer, initialArg, init3)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useRef: function (initialValue) {
                currentHookNameInDev = 'useRef'
                warnInvalidHookAccess()
                mountHookTypesDev()
                return mountRef(initialValue)
              },
              useState: function (initialState) {
                currentHookNameInDev = 'useState'
                warnInvalidHookAccess()
                mountHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV
                try {
                  return mountState(initialState)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useDebugValue: function (value, formatterFn) {
                currentHookNameInDev = 'useDebugValue'
                warnInvalidHookAccess()
                mountHookTypesDev()
                return mountDebugValue()
              },
              useDeferredValue: function (value) {
                currentHookNameInDev = 'useDeferredValue'
                warnInvalidHookAccess()
                mountHookTypesDev()
                return mountDeferredValue(value)
              },
              useTransition: function () {
                currentHookNameInDev = 'useTransition'
                warnInvalidHookAccess()
                mountHookTypesDev()
                return mountTransition()
              },
              useMutableSource: function (source, getSnapshot, subscribe) {
                currentHookNameInDev = 'useMutableSource'
                warnInvalidHookAccess()
                mountHookTypesDev()
                return mountMutableSource(source, getSnapshot, subscribe)
              },
              useOpaqueIdentifier: function () {
                currentHookNameInDev = 'useOpaqueIdentifier'
                warnInvalidHookAccess()
                mountHookTypesDev()
                return mountOpaqueIdentifier()
              },
              unstable_isNewReconciler: enableNewReconciler,
            }
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function (context, observedBits) {
                warnInvalidContextAccess()
                return readContext(context, observedBits)
              },
              useCallback: function (callback, deps) {
                currentHookNameInDev = 'useCallback'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateCallback(callback, deps)
              },
              useContext: function (context, observedBits) {
                currentHookNameInDev = 'useContext'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return readContext(context, observedBits)
              },
              useEffect: function (create, deps) {
                currentHookNameInDev = 'useEffect'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateEffect(create, deps)
              },
              useImperativeHandle: function (ref, create, deps) {
                currentHookNameInDev = 'useImperativeHandle'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateImperativeHandle(ref, create, deps)
              },
              useLayoutEffect: function (create, deps) {
                currentHookNameInDev = 'useLayoutEffect'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateLayoutEffect(create, deps)
              },
              useMemo: function (create, deps) {
                currentHookNameInDev = 'useMemo'
                warnInvalidHookAccess()
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV
                try {
                  return updateMemo(create, deps)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useReducer: function (reducer, initialArg, init3) {
                currentHookNameInDev = 'useReducer'
                warnInvalidHookAccess()
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV
                try {
                  return updateReducer(reducer, initialArg, init3)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useRef: function (initialValue) {
                currentHookNameInDev = 'useRef'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateRef()
              },
              useState: function (initialState) {
                currentHookNameInDev = 'useState'
                warnInvalidHookAccess()
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV
                try {
                  return updateState(initialState)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useDebugValue: function (value, formatterFn) {
                currentHookNameInDev = 'useDebugValue'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateDebugValue()
              },
              useDeferredValue: function (value) {
                currentHookNameInDev = 'useDeferredValue'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateDeferredValue(value)
              },
              useTransition: function () {
                currentHookNameInDev = 'useTransition'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateTransition()
              },
              useMutableSource: function (source, getSnapshot, subscribe) {
                currentHookNameInDev = 'useMutableSource'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateMutableSource(source, getSnapshot, subscribe)
              },
              useOpaqueIdentifier: function () {
                currentHookNameInDev = 'useOpaqueIdentifier'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateOpaqueIdentifier()
              },
              unstable_isNewReconciler: enableNewReconciler,
            }
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function (context, observedBits) {
                warnInvalidContextAccess()
                return readContext(context, observedBits)
              },
              useCallback: function (callback, deps) {
                currentHookNameInDev = 'useCallback'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateCallback(callback, deps)
              },
              useContext: function (context, observedBits) {
                currentHookNameInDev = 'useContext'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return readContext(context, observedBits)
              },
              useEffect: function (create, deps) {
                currentHookNameInDev = 'useEffect'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateEffect(create, deps)
              },
              useImperativeHandle: function (ref, create, deps) {
                currentHookNameInDev = 'useImperativeHandle'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateImperativeHandle(ref, create, deps)
              },
              useLayoutEffect: function (create, deps) {
                currentHookNameInDev = 'useLayoutEffect'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateLayoutEffect(create, deps)
              },
              useMemo: function (create, deps) {
                currentHookNameInDev = 'useMemo'
                warnInvalidHookAccess()
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV
                try {
                  return updateMemo(create, deps)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useReducer: function (reducer, initialArg, init3) {
                currentHookNameInDev = 'useReducer'
                warnInvalidHookAccess()
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV
                try {
                  return rerenderReducer(reducer, initialArg, init3)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useRef: function (initialValue) {
                currentHookNameInDev = 'useRef'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateRef()
              },
              useState: function (initialState) {
                currentHookNameInDev = 'useState'
                warnInvalidHookAccess()
                updateHookTypesDev()
                var prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV
                try {
                  return rerenderState(initialState)
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              },
              useDebugValue: function (value, formatterFn) {
                currentHookNameInDev = 'useDebugValue'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateDebugValue()
              },
              useDeferredValue: function (value) {
                currentHookNameInDev = 'useDeferredValue'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return rerenderDeferredValue(value)
              },
              useTransition: function () {
                currentHookNameInDev = 'useTransition'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return rerenderTransition()
              },
              useMutableSource: function (source, getSnapshot, subscribe) {
                currentHookNameInDev = 'useMutableSource'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return updateMutableSource(source, getSnapshot, subscribe)
              },
              useOpaqueIdentifier: function () {
                currentHookNameInDev = 'useOpaqueIdentifier'
                warnInvalidHookAccess()
                updateHookTypesDev()
                return rerenderOpaqueIdentifier()
              },
              unstable_isNewReconciler: enableNewReconciler,
            }
          }
          var now$1 = Scheduler.unstable_now
          var commitTime = 0
          var profilerStartTime = -1
          function getCommitTime() {
            return commitTime
          }
          function recordCommitTime() {
            commitTime = now$1()
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1()
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1()
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime
              fiber.actualDuration += elapsedTime
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime
              }
              profilerStartTime = -1
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child
            while (child) {
              fiber.actualDuration += child.actualDuration
              child = child.sibling
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner
          var didReceiveUpdate = false
          var didWarnAboutBadClass
          var didWarnAboutModulePatternComponent
          var didWarnAboutContextTypeOnFunctionComponent
          var didWarnAboutGetDerivedStateOnFunctionComponent
          var didWarnAboutFunctionRefs
          var didWarnAboutReassigningProps
          var didWarnAboutRevealOrder
          var didWarnAboutTailOptions
          {
            didWarnAboutBadClass = {}
            didWarnAboutModulePatternComponent = {}
            didWarnAboutContextTypeOnFunctionComponent = {}
            didWarnAboutGetDerivedStateOnFunctionComponent = {}
            didWarnAboutFunctionRefs = {}
            didWarnAboutReassigningProps = false
            didWarnAboutRevealOrder = {}
            didWarnAboutTailOptions = {}
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2)
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2)
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2)
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2)
          }
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component2))
                }
              }
            }
            var render2 = Component2.render
            var ref = workInProgress2.ref
            var nextChildren
            prepareToReadContext(workInProgress2, renderLanes2)
            {
              ReactCurrentOwner$1.current = workInProgress2
              setIsRendering(true)
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2)
              if (workInProgress2.mode & StrictMode) {
                disableLogs()
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2)
                } finally {
                  reenableLogs()
                }
              }
              setIsRendering(false)
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2)
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)
            }
            workInProgress2.flags |= PerformedWork
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2)
            return workInProgress2.child
          }
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type
              if (
                isSimpleFunctionComponent(type) &&
                Component2.compare === null &&
                Component2.defaultProps === void 0
              ) {
                var resolvedType = type
                {
                  resolvedType = resolveFunctionForHotReloading(type)
                }
                workInProgress2.tag = SimpleMemoComponent
                workInProgress2.type = resolvedType
                {
                  validateFunctionComponentInDev(workInProgress2, type)
                }
                return updateSimpleMemoComponent(
                  current2,
                  workInProgress2,
                  resolvedType,
                  nextProps,
                  updateLanes,
                  renderLanes2
                )
              }
              {
                var innerPropTypes = type.propTypes
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type))
                }
              }
              var child = createFiberFromTypeAndProps(
                Component2.type,
                null,
                nextProps,
                workInProgress2,
                workInProgress2.mode,
                renderLanes2
              )
              child.ref = workInProgress2.ref
              child.return = workInProgress2
              workInProgress2.child = child
              return child
            }
            {
              var _type = Component2.type
              var _innerPropTypes = _type.propTypes
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type))
              }
            }
            var currentChild = current2.child
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps
              var compare = Component2.compare
              compare = compare !== null ? compare : shallowEqual
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)
              }
            }
            workInProgress2.flags |= PerformedWork
            var newChild = createWorkInProgress(currentChild, nextProps)
            newChild.ref = workInProgress2.ref
            newChild.return = workInProgress2
            workInProgress2.child = newChild
            return newChild
          }
          function updateSimpleMemoComponent(
            current2,
            workInProgress2,
            Component2,
            nextProps,
            updateLanes,
            renderLanes2
          ) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType
                  var payload = lazyComponent._payload
                  var init3 = lazyComponent._init
                  try {
                    outerMemoType = init3(payload)
                  } catch (x) {
                    outerMemoType = null
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType))
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps
              if (
                shallowEqual(prevProps, nextProps) &&
                current2.ref === workInProgress2.ref &&
                workInProgress2.type === current2.type
              ) {
                didReceiveUpdate = false
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2)
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps
            var nextChildren = nextProps.children
            var prevState = current2 !== null ? current2.memoizedState : null
            if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                }
                workInProgress2.memoizedState = nextState
                pushRenderLanes(workInProgress2, renderLanes2)
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2)
                } else {
                  nextBaseLanes = renderLanes2
                }
                {
                  markSpawnedWork(OffscreenLane)
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane)
                var _nextState = {
                  baseLanes: nextBaseLanes,
                }
                workInProgress2.memoizedState = _nextState
                pushRenderLanes(workInProgress2, nextBaseLanes)
                return null
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                }
                workInProgress2.memoizedState = _nextState2
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2
                pushRenderLanes(workInProgress2, subtreeRenderLanes2)
              }
            } else {
              var _subtreeRenderLanes
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2)
                workInProgress2.memoizedState = null
              } else {
                _subtreeRenderLanes = renderLanes2
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes)
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2)
            return workInProgress2.child
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2)
            return workInProgress2.child
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2)
            return workInProgress2.child
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update
              var stateNode = workInProgress2.stateNode
              stateNode.effectDuration = 0
              stateNode.passiveEffectDuration = 0
            }
            var nextProps = workInProgress2.pendingProps
            var nextChildren = nextProps.children
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2)
            return workInProgress2.child
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref
            if ((current2 === null && ref !== null) || (current2 !== null && current2.ref !== ref)) {
              workInProgress2.flags |= Ref
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component2))
                }
              }
            }
            var context
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true)
              context = getMaskedContext(workInProgress2, unmaskedContext)
            }
            var nextChildren
            prepareToReadContext(workInProgress2, renderLanes2)
            {
              ReactCurrentOwner$1.current = workInProgress2
              setIsRendering(true)
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2)
              if (workInProgress2.mode & StrictMode) {
                disableLogs()
                try {
                  nextChildren = renderWithHooks(
                    current2,
                    workInProgress2,
                    Component2,
                    nextProps,
                    context,
                    renderLanes2
                  )
                } finally {
                  reenableLogs()
                }
              }
              setIsRendering(false)
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2)
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)
            }
            workInProgress2.flags |= PerformedWork
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2)
            return workInProgress2.child
          }
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component2))
                }
              }
            }
            var hasContext
            if (isContextProvider(Component2)) {
              hasContext = true
              pushContextProvider(workInProgress2)
            } else {
              hasContext = false
            }
            prepareToReadContext(workInProgress2, renderLanes2)
            var instance = workInProgress2.stateNode
            var shouldUpdate
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null
                workInProgress2.alternate = null
                workInProgress2.flags |= Placement
              }
              constructClassInstance(workInProgress2, Component2, nextProps)
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2)
              shouldUpdate = true
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2)
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2)
            }
            var nextUnitOfWork = finishClassComponent(
              current2,
              workInProgress2,
              Component2,
              shouldUpdate,
              hasContext,
              renderLanes2
            )
            {
              var inst = workInProgress2.stateNode
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error(
                    'It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.',
                    getComponentName(workInProgress2.type) || 'a component'
                  )
                }
                didWarnAboutReassigningProps = true
              }
            }
            return nextUnitOfWork
          }
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2)
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false)
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)
            }
            var instance = workInProgress2.stateNode
            ReactCurrentOwner$1.current = workInProgress2
            var nextChildren
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== 'function') {
              nextChildren = null
              {
                stopProfilerTimerIfRunning()
              }
            } else {
              {
                setIsRendering(true)
                nextChildren = instance.render()
                if (workInProgress2.mode & StrictMode) {
                  disableLogs()
                  try {
                    instance.render()
                  } finally {
                    reenableLogs()
                  }
                }
                setIsRendering(false)
              }
            }
            workInProgress2.flags |= PerformedWork
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2)
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2)
            }
            workInProgress2.memoizedState = instance.state
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true)
            }
            return workInProgress2.child
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context)
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false)
            }
            pushHostContainer(workInProgress2, root2.containerInfo)
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2)
            var updateQueue = workInProgress2.updateQueue
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error(
                  'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            }
            var nextProps = workInProgress2.pendingProps
            var prevState = workInProgress2.memoizedState
            var prevChildren = prevState !== null ? prevState.element : null
            cloneUpdateQueue(current2, workInProgress2)
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2)
            var nextState = workInProgress2.memoizedState
            var nextChildren = nextState.element
            if (nextChildren === prevChildren) {
              resetHydrationState()
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)
            }
            var root2 = workInProgress2.stateNode
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData
                if (mutableSourceEagerHydrationData != null) {
                  for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i]
                    var version2 = mutableSourceEagerHydrationData[i + 1]
                    setWorkInProgressVersion(mutableSource, version2)
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2)
              workInProgress2.child = child
              var node = child
              while (node) {
                node.flags = (node.flags & ~Placement) | Hydrating
                node = node.sibling
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2)
              resetHydrationState()
            }
            return workInProgress2.child
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2)
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2)
            }
            var type = workInProgress2.type
            var nextProps = workInProgress2.pendingProps
            var prevProps = current2 !== null ? current2.memoizedProps : null
            var nextChildren = nextProps.children
            var isDirectTextChild = shouldSetTextContent(type, nextProps)
            if (isDirectTextChild) {
              nextChildren = null
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset
            }
            markRef(current2, workInProgress2)
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2)
            return workInProgress2.child
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2)
            }
            return null
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null
              workInProgress2.alternate = null
              workInProgress2.flags |= Placement
            }
            var props = workInProgress2.pendingProps
            var lazyComponent = elementType
            var payload = lazyComponent._payload
            var init3 = lazyComponent._init
            var Component2 = init3(payload)
            workInProgress2.type = Component2
            var resolvedTag = (workInProgress2.tag = resolveLazyComponentTag(Component2))
            var resolvedProps = resolveDefaultProps(Component2, props)
            var child
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2)
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2)
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2)
                return child
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2)
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2)
                return child
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2)
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2)
                return child
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component2))
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component2,
                  resolveDefaultProps(Component2.type, resolvedProps),
                  updateLanes,
                  renderLanes2
                )
                return child
              }
            }
            var hint = ''
            {
              if (Component2 !== null && typeof Component2 === 'object' && Component2.$$typeof === REACT_LAZY_TYPE) {
                hint = ' Did you wrap a component in React.lazy() more than once?'
              }
            }
            {
              {
                throw Error(
                  'Element type is invalid. Received a promise that resolves to: ' +
                    Component2 +
                    '. Lazy element type must resolve to a class or function.' +
                    hint
                )
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null
              workInProgress2.alternate = null
              workInProgress2.flags |= Placement
            }
            workInProgress2.tag = ClassComponent
            var hasContext
            if (isContextProvider(Component2)) {
              hasContext = true
              pushContextProvider(workInProgress2)
            } else {
              hasContext = false
            }
            prepareToReadContext(workInProgress2, renderLanes2)
            constructClassInstance(workInProgress2, Component2, nextProps)
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2)
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2)
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null
              workInProgress2.alternate = null
              workInProgress2.flags |= Placement
            }
            var props = workInProgress2.pendingProps
            var context
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false)
              context = getMaskedContext(workInProgress2, unmaskedContext)
            }
            prepareToReadContext(workInProgress2, renderLanes2)
            var value
            {
              if (Component2.prototype && typeof Component2.prototype.render === 'function') {
                var componentName = getComponentName(Component2) || 'Unknown'
                if (!didWarnAboutBadClass[componentName]) {
                  error(
                    "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
                    componentName,
                    componentName
                  )
                  didWarnAboutBadClass[componentName] = true
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null)
              }
              setIsRendering(true)
              ReactCurrentOwner$1.current = workInProgress2
              value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2)
              setIsRendering(false)
            }
            workInProgress2.flags |= PerformedWork
            {
              if (
                typeof value === 'object' &&
                value !== null &&
                typeof value.render === 'function' &&
                value.$$typeof === void 0
              ) {
                var _componentName = getComponentName(Component2) || 'Unknown'
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error(
                    "The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",
                    _componentName,
                    _componentName,
                    _componentName
                  )
                  didWarnAboutModulePatternComponent[_componentName] = true
                }
              }
            }
            if (
              typeof value === 'object' &&
              value !== null &&
              typeof value.render === 'function' &&
              value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentName(Component2) || 'Unknown'
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error(
                    "The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",
                    _componentName2,
                    _componentName2,
                    _componentName2
                  )
                  didWarnAboutModulePatternComponent[_componentName2] = true
                }
              }
              workInProgress2.tag = ClassComponent
              workInProgress2.memoizedState = null
              workInProgress2.updateQueue = null
              var hasContext = false
              if (isContextProvider(Component2)) {
                hasContext = true
                pushContextProvider(workInProgress2)
              } else {
                hasContext = false
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null
              initializeUpdateQueue(workInProgress2)
              var getDerivedStateFromProps = Component2.getDerivedStateFromProps
              if (typeof getDerivedStateFromProps === 'function') {
                applyDerivedStateFromProps(workInProgress2, Component2, getDerivedStateFromProps, props)
              }
              adoptClassInstance(workInProgress2, value)
              mountClassInstance(workInProgress2, Component2, props, renderLanes2)
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2)
            } else {
              workInProgress2.tag = FunctionComponent
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs()
                  try {
                    value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2)
                  } finally {
                    reenableLogs()
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2)
              {
                validateFunctionComponentInDev(workInProgress2, Component2)
              }
              return workInProgress2.child
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error(
                    '%s(...): childContextTypes cannot be defined on a function component.',
                    Component2.displayName || Component2.name || 'Component'
                  )
                }
              }
              if (workInProgress2.ref !== null) {
                var info = ''
                var ownerName = getCurrentFiberOwnerNameInDevOrNull()
                if (ownerName) {
                  info += '\n\nCheck the render method of `' + ownerName + '`.'
                }
                var warningKey = ownerName || workInProgress2._debugID || ''
                var debugSource = workInProgress2._debugSource
                if (debugSource) {
                  warningKey = debugSource.fileName + ':' + debugSource.lineNumber
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true
                  error(
                    'Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s',
                    info
                  )
                }
              }
              if (typeof Component2.getDerivedStateFromProps === 'function') {
                var _componentName3 = getComponentName(Component2) || 'Unknown'
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error('%s: Function components do not support getDerivedStateFromProps.', _componentName3)
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true
                }
              }
              if (typeof Component2.contextType === 'object' && Component2.contextType !== null) {
                var _componentName4 = getComponentName(Component2) || 'Unknown'
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error('%s: Function components do not support contextType.', _componentName4)
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane,
          }
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
            }
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            }
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState
              if (suspenseState === null) {
                return false
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback)
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2)
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture
              }
            }
            var suspenseContext = suspenseStackCursor.current
            var showFallback = false
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true
              workInProgress2.flags &= ~DidCapture
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext)
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext)
            pushSuspenseContext(workInProgress2, suspenseContext)
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2)
              }
              var nextPrimaryChildren = nextProps.children
              var nextFallbackChildren = nextProps.fallback
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(
                  workInProgress2,
                  nextPrimaryChildren,
                  nextFallbackChildren,
                  renderLanes2
                )
                var primaryChildFragment = workInProgress2.child
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2)
                workInProgress2.memoizedState = SUSPENDED_MARKER
                return fallbackFragment
              } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
                var _fallbackFragment = mountSuspenseFallbackChildren(
                  workInProgress2,
                  nextPrimaryChildren,
                  nextFallbackChildren,
                  renderLanes2
                )
                var _primaryChildFragment = workInProgress2.child
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2)
                workInProgress2.memoizedState = SUSPENDED_MARKER
                workInProgress2.lanes = SomeRetryLane
                {
                  markSpawnedWork(SomeRetryLane)
                }
                return _fallbackFragment
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2)
              }
            } else {
              var prevState = current2.memoizedState
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback
                  var _nextPrimaryChildren2 = nextProps.children
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(
                    current2,
                    workInProgress2,
                    _nextPrimaryChildren2,
                    _nextFallbackChildren2,
                    renderLanes2
                  )
                  var _primaryChildFragment3 = workInProgress2.child
                  var prevOffscreenState = current2.child.memoizedState
                  _primaryChildFragment3.memoizedState =
                    prevOffscreenState === null
                      ? mountSuspenseOffscreenState(renderLanes2)
                      : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2)
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2)
                  workInProgress2.memoizedState = SUSPENDED_MARKER
                  return _fallbackChildFragment
                } else {
                  var _nextPrimaryChildren3 = nextProps.children
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(
                    current2,
                    workInProgress2,
                    _nextPrimaryChildren3,
                    renderLanes2
                  )
                  workInProgress2.memoizedState = null
                  return _primaryChildFragment4
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback
                  var _nextPrimaryChildren4 = nextProps.children
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(
                    current2,
                    workInProgress2,
                    _nextPrimaryChildren4,
                    _nextFallbackChildren3,
                    renderLanes2
                  )
                  var _primaryChildFragment5 = workInProgress2.child
                  var _prevOffscreenState = current2.child.memoizedState
                  _primaryChildFragment5.memoizedState =
                    _prevOffscreenState === null
                      ? mountSuspenseOffscreenState(renderLanes2)
                      : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2)
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2)
                  workInProgress2.memoizedState = SUSPENDED_MARKER
                  return _fallbackChildFragment2
                } else {
                  var _nextPrimaryChildren5 = nextProps.children
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(
                    current2,
                    workInProgress2,
                    _nextPrimaryChildren5,
                    renderLanes2
                  )
                  workInProgress2.memoizedState = null
                  return _primaryChildFragment6
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode
            var primaryChildProps = {
              mode: 'visible',
              children: primaryChildren,
            }
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null)
            primaryChildFragment.return = workInProgress2
            workInProgress2.child = primaryChildFragment
            return primaryChildFragment
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode
            var progressedPrimaryFragment = workInProgress2.child
            var primaryChildProps = {
              mode: 'hidden',
              children: primaryChildren,
            }
            var primaryChildFragment
            var fallbackChildFragment
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment
              primaryChildFragment.childLanes = NoLanes
              primaryChildFragment.pendingProps = primaryChildProps
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0
                primaryChildFragment.actualStartTime = -1
                primaryChildFragment.selfBaseDuration = 0
                primaryChildFragment.treeBaseDuration = 0
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null)
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null)
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null)
            }
            primaryChildFragment.return = workInProgress2
            fallbackChildFragment.return = workInProgress2
            primaryChildFragment.sibling = fallbackChildFragment
            workInProgress2.child = primaryChildFragment
            return fallbackChildFragment
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps)
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: 'visible',
              children: primaryChildren,
            })
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2
            }
            primaryChildFragment.return = workInProgress2
            primaryChildFragment.sibling = null
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null
              currentFallbackChildFragment.flags = Deletion
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment
            }
            workInProgress2.child = primaryChildFragment
            return primaryChildFragment
          }
          function updateSuspenseFallbackChildren(
            current2,
            workInProgress2,
            primaryChildren,
            fallbackChildren,
            renderLanes2
          ) {
            var mode = workInProgress2.mode
            var currentPrimaryChildFragment = current2.child
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling
            var primaryChildProps = {
              mode: 'hidden',
              children: primaryChildren,
            }
            var primaryChildFragment
            if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child
              primaryChildFragment = progressedPrimaryFragment
              primaryChildFragment.childLanes = NoLanes
              primaryChildFragment.pendingProps = primaryChildProps
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0
                primaryChildFragment.actualStartTime = -1
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration
              }
              var progressedLastEffect = primaryChildFragment.lastEffect
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect
                workInProgress2.lastEffect = progressedLastEffect
                progressedLastEffect.nextEffect = null
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps)
            }
            var fallbackChildFragment
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren)
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null)
              fallbackChildFragment.flags |= Placement
            }
            fallbackChildFragment.return = workInProgress2
            primaryChildFragment.return = workInProgress2
            primaryChildFragment.sibling = fallbackChildFragment
            workInProgress2.child = primaryChildFragment
            return fallbackChildFragment
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2)
            var alternate = fiber.alternate
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2)
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2)
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderLanes2)
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2)
              } else if (node.child !== null) {
                node.child.return = node
                node = node.child
                continue
              }
              if (node === workInProgress2) {
                return
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return
                }
                node = node.return
              }
              node.sibling.return = node.return
              node = node.sibling
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild
            var lastContentRow = null
            while (row !== null) {
              var currentRow = row.alternate
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row
              }
              row = row.sibling
            }
            return lastContentRow
          }
          function validateRevealOrder(revealOrder) {
            {
              if (
                revealOrder !== void 0 &&
                revealOrder !== 'forwards' &&
                revealOrder !== 'backwards' &&
                revealOrder !== 'together' &&
                !didWarnAboutRevealOrder[revealOrder]
              ) {
                didWarnAboutRevealOrder[revealOrder] = true
                if (typeof revealOrder === 'string') {
                  switch (revealOrder.toLowerCase()) {
                    case 'together':
                    case 'forwards':
                    case 'backwards': {
                      error(
                        '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
                        revealOrder,
                        revealOrder.toLowerCase()
                      )
                      break
                    }
                    case 'forward':
                    case 'backward': {
                      error(
                        '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
                        revealOrder,
                        revealOrder.toLowerCase()
                      )
                      break
                    }
                    default:
                      error(
                        '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                        revealOrder
                      )
                      break
                  }
                } else {
                  error(
                    '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                    revealOrder
                  )
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                  didWarnAboutTailOptions[tailMode] = true
                  error(
                    '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',
                    tailMode
                  )
                } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                  didWarnAboutTailOptions[tailMode] = true
                  error(
                    '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
                    tailMode
                  )
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isArray2 = Array.isArray(childSlot)
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === 'function'
              if (isArray2 || isIterable) {
                var type = isArray2 ? 'array' : 'iterable'
                error(
                  'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>',
                  type,
                  index2,
                  type
                )
                return false
              }
            }
            return true
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if (
                (revealOrder === 'forwards' || revealOrder === 'backwards') &&
                children !== void 0 &&
                children !== null &&
                children !== false
              ) {
                if (Array.isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children)
                  if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children)
                    if (childrenIterator) {
                      var step = childrenIterator.next()
                      var _i = 0
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return
                        }
                        _i++
                      }
                    }
                  } else {
                    error(
                      'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
                      revealOrder
                    )
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(
            workInProgress2,
            isBackwards,
            tail,
            lastContentRow,
            tailMode,
            lastEffectBeforeRendering
          ) {
            var renderState = workInProgress2.memoizedState
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering,
              }
            } else {
              renderState.isBackwards = isBackwards
              renderState.rendering = null
              renderState.renderingStartTime = 0
              renderState.last = lastContentRow
              renderState.tail = tail
              renderState.tailMode = tailMode
              renderState.lastEffect = lastEffectBeforeRendering
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps
            var revealOrder = nextProps.revealOrder
            var tailMode = nextProps.tail
            var newChildren = nextProps.children
            validateRevealOrder(revealOrder)
            validateTailOptions(tailMode, revealOrder)
            validateSuspenseListChildren(newChildren, revealOrder)
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2)
            var suspenseContext = suspenseStackCursor.current
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback)
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback)
              workInProgress2.flags |= DidCapture
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2)
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext)
            }
            pushSuspenseContext(workInProgress2, suspenseContext)
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null
            } else {
              switch (revealOrder) {
                case 'forwards': {
                  var lastContentRow = findLastContentRow(workInProgress2.child)
                  var tail
                  if (lastContentRow === null) {
                    tail = workInProgress2.child
                    workInProgress2.child = null
                  } else {
                    tail = lastContentRow.sibling
                    lastContentRow.sibling = null
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    tail,
                    lastContentRow,
                    tailMode,
                    workInProgress2.lastEffect
                  )
                  break
                }
                case 'backwards': {
                  var _tail = null
                  var row = workInProgress2.child
                  workInProgress2.child = null
                  while (row !== null) {
                    var currentRow = row.alternate
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row
                      break
                    }
                    var nextRow = row.sibling
                    row.sibling = _tail
                    _tail = row
                    row = nextRow
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect)
                  break
                }
                case 'together': {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect)
                  break
                }
                default: {
                  workInProgress2.memoizedState = null
                }
              }
            }
            return workInProgress2.child
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo)
            var nextChildren = workInProgress2.pendingProps
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2)
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2)
            }
            return workInProgress2.child
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type
            var context = providerType._context
            var newProps = workInProgress2.pendingProps
            var oldProps = workInProgress2.memoizedProps
            var newValue = newProps.value
            {
              if (!('value' in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true
                  error(
                    'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?'
                  )
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider')
              }
            }
            pushProvider(workInProgress2, newValue)
            if (oldProps !== null) {
              var oldValue = oldProps.value
              var changedBits = calculateChangedBits(context, newValue, oldValue)
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2)
              }
            }
            var newChildren = newProps.children
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2)
            return workInProgress2.child
          }
          var hasWarnedAboutUsingContextAsConsumer = false
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true
                    error(
                      'Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?'
                    )
                  }
                }
              } else {
                context = context._context
              }
            }
            var newProps = workInProgress2.pendingProps
            var render2 = newProps.children
            {
              if (typeof render2 !== 'function') {
                error(
                  "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
                )
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2)
            var newValue = readContext(context, newProps.unstable_observedBits)
            var newChildren
            {
              ReactCurrentOwner$1.current = workInProgress2
              setIsRendering(true)
              newChildren = render2(newValue)
              setIsRendering(false)
            }
            workInProgress2.flags |= PerformedWork
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2)
            return workInProgress2.child
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies
            }
            {
              stopProfilerTimerIfRunning()
            }
            markSkippedUpdateLanes(workInProgress2.lanes)
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null
            } else {
              cloneChildFibers(current2, workInProgress2)
              return workInProgress2.child
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return
              if (returnFiber === null) {
                throw new Error('Cannot swap the root fiber.')
              }
              current2.alternate = null
              oldWorkInProgress.alternate = null
              newWorkInProgress.index = oldWorkInProgress.index
              newWorkInProgress.sibling = oldWorkInProgress.sibling
              newWorkInProgress.return = oldWorkInProgress.return
              newWorkInProgress.ref = oldWorkInProgress.ref
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress
              } else {
                var prevSibling = returnFiber.child
                if (prevSibling === null) {
                  throw new Error('Expected parent to have a child.')
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling
                  if (prevSibling === null) {
                    throw new Error('Expected to find the previous sibling.')
                  }
                }
                prevSibling.sibling = newWorkInProgress
              }
              var last = returnFiber.lastEffect
              if (last !== null) {
                last.nextEffect = current2
                returnFiber.lastEffect = current2
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2
              }
              current2.nextEffect = null
              current2.flags = Deletion
              newWorkInProgress.flags |= Placement
              return newWorkInProgress
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(
                  current2,
                  workInProgress2,
                  createFiberFromTypeAndProps(
                    workInProgress2.type,
                    workInProgress2.key,
                    workInProgress2.pendingProps,
                    workInProgress2._debugOwner || null,
                    workInProgress2.mode,
                    workInProgress2.lanes
                  )
                )
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps
              var newProps = workInProgress2.pendingProps
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2)
                    resetHydrationState()
                    break
                  case HostComponent:
                    pushHostContext(workInProgress2)
                    break
                  case ClassComponent: {
                    var Component2 = workInProgress2.type
                    if (isContextProvider(Component2)) {
                      pushContextProvider(workInProgress2)
                    }
                    break
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo)
                    break
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value
                    pushProvider(workInProgress2, newValue)
                    break
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes)
                      if (hasChildWork) {
                        workInProgress2.flags |= Update
                      }
                      var stateNode = workInProgress2.stateNode
                      stateNode.effectDuration = 0
                      stateNode.passiveEffectDuration = 0
                    }
                    break
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child
                      var primaryChildLanes = primaryChildFragment.childLanes
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2)
                      } else {
                        pushSuspenseContext(
                          workInProgress2,
                          setDefaultShallowSuspenseContext(suspenseStackCursor.current)
                        )
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)
                        if (child !== null) {
                          return child.sibling
                        } else {
                          return null
                        }
                      }
                    } else {
                      pushSuspenseContext(
                        workInProgress2,
                        setDefaultShallowSuspenseContext(suspenseStackCursor.current)
                      )
                    }
                    break
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes)
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2)
                      }
                      workInProgress2.flags |= DidCapture
                    }
                    var renderState = workInProgress2.memoizedState
                    if (renderState !== null) {
                      renderState.rendering = null
                      renderState.tail = null
                      renderState.lastEffect = null
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current)
                    if (_hasChildWork) {
                      break
                    } else {
                      return null
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2)
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true
                } else {
                  didReceiveUpdate = false
                }
              }
            } else {
              didReceiveUpdate = false
            }
            workInProgress2.lanes = NoLanes
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2)
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2)
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type
                var unresolvedProps = workInProgress2.pendingProps
                var resolvedProps =
                  workInProgress2.elementType === _Component
                    ? unresolvedProps
                    : resolveDefaultProps(_Component, unresolvedProps)
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2)
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type
                var _unresolvedProps = workInProgress2.pendingProps
                var _resolvedProps =
                  workInProgress2.elementType === _Component2
                    ? _unresolvedProps
                    : resolveDefaultProps(_Component2, _unresolvedProps)
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2)
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2)
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2)
              case HostText:
                return updateHostText(current2, workInProgress2)
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2)
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2)
              case ForwardRef: {
                var type = workInProgress2.type
                var _unresolvedProps2 = workInProgress2.pendingProps
                var _resolvedProps2 =
                  workInProgress2.elementType === type
                    ? _unresolvedProps2
                    : resolveDefaultProps(type, _unresolvedProps2)
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2)
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2)
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2)
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2)
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2)
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2)
              case MemoComponent: {
                var _type2 = workInProgress2.type
                var _unresolvedProps3 = workInProgress2.pendingProps
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3)
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2))
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3)
                return updateMemoComponent(
                  current2,
                  workInProgress2,
                  _type2,
                  _resolvedProps3,
                  updateLanes,
                  renderLanes2
                )
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(
                  current2,
                  workInProgress2,
                  workInProgress2.type,
                  workInProgress2.pendingProps,
                  updateLanes,
                  renderLanes2
                )
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type
                var _unresolvedProps4 = workInProgress2.pendingProps
                var _resolvedProps4 =
                  workInProgress2.elementType === _Component3
                    ? _unresolvedProps4
                    : resolveDefaultProps(_Component3, _unresolvedProps4)
                return mountIncompleteClassComponent(
                  current2,
                  workInProgress2,
                  _Component3,
                  _resolvedProps4,
                  renderLanes2
                )
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2)
              }
              case FundamentalComponent: {
                break
              }
              case ScopeComponent: {
                break
              }
              case Block: {
                break
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2)
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2)
              }
            }
            {
              {
                throw Error(
                  'Unknown unit of work tag (' +
                    workInProgress2.tag +
                    '). This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref
          }
          var appendAllChildren
          var updateHostContainer
          var updateHostComponent$1
          var updateHostText$1
          {
            appendAllChildren = function (parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode)
                } else if (node.tag === HostPortal);
                else if (node.child !== null) {
                  node.child.return = node
                  node = node.child
                  continue
                }
                if (node === workInProgress2) {
                  return
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return
                  }
                  node = node.return
                }
                node.sibling.return = node.return
                node = node.sibling
              }
            }
            updateHostContainer = function (workInProgress2) {}
            updateHostComponent$1 = function (current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps
              if (oldProps === newProps) {
                return
              }
              var instance = workInProgress2.stateNode
              var currentHostContext = getHostContext()
              var updatePayload = prepareUpdate(
                instance,
                type,
                oldProps,
                newProps,
                rootContainerInstance,
                currentHostContext
              )
              workInProgress2.updateQueue = updatePayload
              if (updatePayload) {
                markUpdate(workInProgress2)
              }
            }
            updateHostText$1 = function (current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2)
              }
            }
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return
            }
            switch (renderState.tailMode) {
              case 'hidden': {
                var tailNode = renderState.tail
                var lastTailNode = null
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode
                  }
                  tailNode = tailNode.sibling
                }
                if (lastTailNode === null) {
                  renderState.tail = null
                } else {
                  lastTailNode.sibling = null
                }
                break
              }
              case 'collapsed': {
                var _tailNode = renderState.tail
                var _lastTailNode = null
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode
                  }
                  _tailNode = _tailNode.sibling
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null
                  } else {
                    renderState.tail = null
                  }
                } else {
                  _lastTailNode.sibling = null
                }
                break
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null
              case ClassComponent: {
                var Component2 = workInProgress2.type
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2)
                }
                return null
              }
              case HostRoot: {
                popHostContainer(workInProgress2)
                popTopLevelContextObject(workInProgress2)
                resetWorkInProgressVersions()
                var fiberRoot = workInProgress2.stateNode
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext
                  fiberRoot.pendingContext = null
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2)
                  if (wasHydrated) {
                    markUpdate(workInProgress2)
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot
                  }
                }
                updateHostContainer(workInProgress2)
                return null
              }
              case HostComponent: {
                popHostContext(workInProgress2)
                var rootContainerInstance = getRootHostContainer()
                var type = workInProgress2.type
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance)
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2)
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error(
                          'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      }
                    }
                    return null
                  }
                  var currentHostContext = getHostContext()
                  var _wasHydrated = popHydrationState(workInProgress2)
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2)
                    }
                  } else {
                    var instance = createInstance(
                      type,
                      newProps,
                      rootContainerInstance,
                      currentHostContext,
                      workInProgress2
                    )
                    appendAllChildren(instance, workInProgress2, false, false)
                    workInProgress2.stateNode = instance
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2)
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2)
                  }
                }
                return null
              }
              case HostText: {
                var newText = newProps
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps
                  updateHostText$1(current2, workInProgress2, oldText, newText)
                } else {
                  if (typeof newText !== 'string') {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error(
                          'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer()
                  var _currentHostContext = getHostContext()
                  var _wasHydrated2 = popHydrationState(workInProgress2)
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2)
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(
                      newText,
                      _rootContainerInstance,
                      _currentHostContext,
                      workInProgress2
                    )
                  }
                }
                return null
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2)
                var nextState = workInProgress2.memoizedState
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2)
                  }
                  return workInProgress2
                }
                var nextDidTimeout = nextState !== null
                var prevDidTimeout = false
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2)
                  }
                } else {
                  var prevState = current2.memoizedState
                  prevDidTimeout = prevState !== null
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext =
                      current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true
                    if (
                      hasInvisibleChildContext ||
                      hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)
                    ) {
                      renderDidSuspend()
                    } else {
                      renderDidSuspendDelayIfPossible()
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update
                  }
                }
                return null
              }
              case HostPortal:
                popHostContainer(workInProgress2)
                updateHostContainer(workInProgress2)
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo)
                }
                return null
              case ContextProvider:
                popProvider(workInProgress2)
                return null
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2)
                }
                return null
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2)
                var renderState = workInProgress2.memoizedState
                if (renderState === null) {
                  return null
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags
                var renderedTail = renderState.rendering
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended =
                      renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags)
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child
                      while (row !== null) {
                        var suspended = findFirstSuspended(row)
                        if (suspended !== null) {
                          didSuspendAlready = true
                          workInProgress2.flags |= DidCapture
                          cutOffTailIfNeeded(renderState, false)
                          var newThennables = suspended.updateQueue
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables
                            workInProgress2.flags |= Update
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null
                          }
                          workInProgress2.lastEffect = renderState.lastEffect
                          resetChildFibers(workInProgress2, renderLanes2)
                          pushSuspenseContext(
                            workInProgress2,
                            setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)
                          )
                          return workInProgress2.child
                        }
                        row = row.sibling
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture
                      didSuspendAlready = true
                      cutOffTailIfNeeded(renderState, false)
                      workInProgress2.lanes = SomeRetryLane
                      {
                        markSpawnedWork(SomeRetryLane)
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false)
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail)
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture
                      didSuspendAlready = true
                      var _newThennables = _suspended.updateQueue
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables
                        workInProgress2.flags |= Update
                      }
                      cutOffTailIfNeeded(renderState, true)
                      if (
                        renderState.tail === null &&
                        renderState.tailMode === 'hidden' &&
                        !renderedTail.alternate &&
                        !getIsHydrating()
                      ) {
                        var lastEffect = (workInProgress2.lastEffect = renderState.lastEffect)
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null
                        }
                        return null
                      }
                    } else if (
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() &&
                      renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture
                      didSuspendAlready = true
                      cutOffTailIfNeeded(renderState, false)
                      workInProgress2.lanes = SomeRetryLane
                      {
                        markSpawnedWork(SomeRetryLane)
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child
                    workInProgress2.child = renderedTail
                  } else {
                    var previousSibling = renderState.last
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail
                    } else {
                      workInProgress2.child = renderedTail
                    }
                    renderState.last = renderedTail
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail
                  renderState.rendering = next
                  renderState.tail = next.sibling
                  renderState.lastEffect = workInProgress2.lastEffect
                  renderState.renderingStartTime = now()
                  next.sibling = null
                  var suspenseContext = suspenseStackCursor.current
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback)
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext)
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext)
                  return next
                }
                return null
              }
              case FundamentalComponent: {
                break
              }
              case ScopeComponent: {
                break
              }
              case Block:
                break
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2)
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState
                  var _prevState = current2.memoizedState
                  var prevIsHidden = _prevState !== null
                  var nextIsHidden = _nextState !== null
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {
                    workInProgress2.flags |= Update
                  }
                }
                return null
              }
            }
            {
              {
                throw Error(
                  'Unknown unit of work tag (' +
                    workInProgress2.tag +
                    '). This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2)
                }
                var flags = workInProgress2.flags
                if (flags & ShouldCapture) {
                  workInProgress2.flags = (flags & ~ShouldCapture) | DidCapture
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2)
                  }
                  return workInProgress2
                }
                return null
              }
              case HostRoot: {
                popHostContainer(workInProgress2)
                popTopLevelContextObject(workInProgress2)
                resetWorkInProgressVersions()
                var _flags = workInProgress2.flags
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error(
                      'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.'
                    )
                  }
                }
                workInProgress2.flags = (_flags & ~ShouldCapture) | DidCapture
                return workInProgress2
              }
              case HostComponent: {
                popHostContext(workInProgress2)
                return null
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2)
                var _flags2 = workInProgress2.flags
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = (_flags2 & ~ShouldCapture) | DidCapture
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2)
                  }
                  return workInProgress2
                }
                return null
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2)
                return null
              }
              case HostPortal:
                popHostContainer(workInProgress2)
                return null
              case ContextProvider:
                popProvider(workInProgress2)
                return null
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2)
                return null
              default:
                return null
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork)
                }
                break
              }
              case HostRoot: {
                popHostContainer(interruptedWork)
                popTopLevelContextObject(interruptedWork)
                resetWorkInProgressVersions()
                break
              }
              case HostComponent: {
                popHostContext(interruptedWork)
                break
              }
              case HostPortal:
                popHostContainer(interruptedWork)
                break
              case SuspenseComponent:
                popSuspenseContext(interruptedWork)
                break
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork)
                break
              case ContextProvider:
                popProvider(interruptedWork)
                break
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork)
                break
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
            }
          }
          function showErrorDialog(boundary, errorInfo) {
            return true
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo)
              if (logError === false) {
                return
              }
              var error2 = errorInfo.value
              if (true) {
                var source = errorInfo.source
                var stack = errorInfo.stack
                var componentStack = stack !== null ? stack : ''
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return
                  }
                  console['error'](error2)
                }
                var componentName = source ? getComponentName(source.type) : null
                var componentNameMessage = componentName
                  ? 'The above error occurred in the <' + componentName + '> component:'
                  : 'The above error occurred in one of your React components:'
                var errorBoundaryMessage
                var errorBoundaryName = getComponentName(boundary.type)
                if (errorBoundaryName) {
                  errorBoundaryMessage =
                    'React will try to recreate this component tree from scratch ' +
                    ('using the error boundary you provided, ' + errorBoundaryName + '.')
                } else {
                  errorBoundaryMessage =
                    'Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.'
                }
                var combinedMessage =
                  componentNameMessage + '\n' + componentStack + '\n\n' + ('' + errorBoundaryMessage)
                console['error'](combinedMessage)
              } else {
                console['error'](error2)
              }
            } catch (e) {
              setTimeout(function () {
                throw e
              })
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane)
            update.tag = CaptureUpdate
            update.payload = {
              element: null,
            }
            var error2 = errorInfo.value
            update.callback = function () {
              onUncaughtError(error2)
              logCapturedError(fiber, errorInfo)
            }
            return update
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane)
            update.tag = CaptureUpdate
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError
            if (typeof getDerivedStateFromError === 'function') {
              var error$1 = errorInfo.value
              update.payload = function () {
                logCapturedError(fiber, errorInfo)
                return getDerivedStateFromError(error$1)
              }
            }
            var inst = fiber.stateNode
            if (inst !== null && typeof inst.componentDidCatch === 'function') {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber)
                }
                if (typeof getDerivedStateFromError !== 'function') {
                  markLegacyErrorBoundaryAsFailed(this)
                  logCapturedError(fiber, errorInfo)
                }
                var error$12 = errorInfo.value
                var stack = errorInfo.stack
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : '',
                })
                {
                  if (typeof getDerivedStateFromError !== 'function') {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error(
                        '%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.',
                        getComponentName(fiber.type) || 'Unknown'
                      )
                    }
                  }
                }
              }
            } else {
              update.callback = function () {
                markFailedErrorBoundaryForHotReloading(fiber)
              }
            }
            return update
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache
            var threadIDs
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1()
              threadIDs = new Set()
              pingCache.set(wakeable, threadIDs)
            } else {
              threadIDs = pingCache.get(wakeable)
              if (threadIDs === void 0) {
                threadIDs = new Set()
                pingCache.set(wakeable, threadIDs)
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes)
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes)
              wakeable.then(ping, ping)
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete
            sourceFiber.firstEffect = sourceFiber.lastEffect = null
            if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
              var wakeable = value
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue
                  sourceFiber.memoizedState = currentSource.memoizedState
                  sourceFiber.lanes = currentSource.lanes
                } else {
                  sourceFiber.updateQueue = null
                  sourceFiber.memoizedState = null
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(
                suspenseStackCursor.current,
                InvisibleParentSuspenseContext
              )
              var _workInProgress = returnFiber
              do {
                if (
                  _workInProgress.tag === SuspenseComponent &&
                  shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)
                ) {
                  var wakeables = _workInProgress.updateQueue
                  if (wakeables === null) {
                    var updateQueue = new Set()
                    updateQueue.add(wakeable)
                    _workInProgress.updateQueue = updateQueue
                  } else {
                    wakeables.add(wakeable)
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture
                    sourceFiber.flags |= ForceUpdateForLegacySuspense
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete)
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent
                      } else {
                        var update = createUpdate(NoTimestamp, SyncLane)
                        update.tag = ForceUpdate
                        enqueueUpdate(sourceFiber, update)
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane)
                    return
                  }
                  attachPingListener(root2, wakeable, rootRenderLanes)
                  _workInProgress.flags |= ShouldCapture
                  _workInProgress.lanes = rootRenderLanes
                  return
                }
                _workInProgress = _workInProgress.return
              } while (_workInProgress !== null)
              value = new Error(
                (getComponentName(sourceFiber.type) || 'A React component') +
                  ' suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.'
              )
            }
            renderDidError()
            value = createCapturedValue(value, sourceFiber)
            var workInProgress2 = returnFiber
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value
                  workInProgress2.flags |= ShouldCapture
                  var lane = pickArbitraryLane(rootRenderLanes)
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane)
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane)
                  enqueueCapturedUpdate(workInProgress2, _update)
                  return
                }
                case ClassComponent:
                  var errorInfo = value
                  var ctor = workInProgress2.type
                  var instance = workInProgress2.stateNode
                  if (
                    (workInProgress2.flags & DidCapture) === NoFlags &&
                    (typeof ctor.getDerivedStateFromError === 'function' ||
                      (instance !== null &&
                        typeof instance.componentDidCatch === 'function' &&
                        !isAlreadyFailedLegacyErrorBoundary(instance)))
                  ) {
                    workInProgress2.flags |= ShouldCapture
                    var _lane = pickArbitraryLane(rootRenderLanes)
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane)
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane)
                    enqueueCapturedUpdate(workInProgress2, _update2)
                    return
                  }
                  break
              }
              workInProgress2 = workInProgress2.return
            } while (workInProgress2 !== null)
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = new Set()
          }
          var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set
          var callComponentWillUnmountWithTimer = function (current2, instance) {
            instance.props = current2.memoizedProps
            instance.state = current2.memoizedState
            {
              instance.componentWillUnmount()
            }
          }
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance)
              if (hasCaughtError()) {
                var unmountError = clearCaughtError()
                captureCommitPhaseError(current2, unmountError)
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref
            if (ref !== null) {
              if (typeof ref === 'function') {
                {
                  invokeGuardedCallback(null, ref, null, null)
                  if (hasCaughtError()) {
                    var refError = clearCaughtError()
                    captureCommitPhaseError(current2, refError)
                  }
                }
              } else {
                ref.current = null
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null)
              if (hasCaughtError()) {
                var error2 = clearCaughtError()
                captureCommitPhaseError(current2, error2)
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps
                    var prevState = current2.memoizedState
                    var instance = finishedWork.stateNode
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error(
                            'Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.',
                            getComponentName(finishedWork.type) || 'instance'
                          )
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error(
                            'Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.',
                            getComponentName(finishedWork.type) || 'instance'
                          )
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(
                      finishedWork.elementType === finishedWork.type
                        ? prevProps
                        : resolveDefaultProps(finishedWork.type, prevProps),
                      prevState
                    )
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type)
                        error(
                          '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.',
                          getComponentName(finishedWork.type)
                        )
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot
                  }
                }
                return
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root2 = finishedWork.stateNode
                    clearContainer(root2.containerInfo)
                  }
                }
                return
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return
            }
            {
              {
                throw Error(
                  'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next
              var effect = firstEffect
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy = effect.destroy
                  effect.destroy = void 0
                  if (destroy !== void 0) {
                    destroy()
                  }
                }
                effect = effect.next
              } while (effect !== firstEffect)
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next
              var effect = firstEffect
              do {
                if ((effect.tag & tag) === tag) {
                  var create = effect.create
                  effect.destroy = create()
                  {
                    var destroy = effect.destroy
                    if (destroy !== void 0 && typeof destroy !== 'function') {
                      var addendum = void 0
                      if (destroy === null) {
                        addendum =
                          ' You returned null. If your effect does not require clean up, return undefined (or nothing).'
                      } else if (typeof destroy.then === 'function') {
                        addendum =
                          "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching"
                      } else {
                        addendum = ' You returned: ' + destroy
                      }
                      error(
                        'An effect function must not return anything besides a function, which is used for clean-up.%s',
                        addendum
                      )
                    }
                  }
                }
                effect = effect.next
              } while (effect !== firstEffect)
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next
              var effect = firstEffect
              do {
                var _effect = effect,
                  next = _effect.next,
                  tag = _effect.tag
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect)
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect)
                }
                effect = next
              } while (effect !== firstEffect)
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork)
                }
                schedulePassiveEffects(finishedWork)
                return
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error(
                            'Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.',
                            getComponentName(finishedWork.type) || 'instance'
                          )
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error(
                            'Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.',
                            getComponentName(finishedWork.type) || 'instance'
                          )
                        }
                      }
                    }
                    {
                      instance.componentDidMount()
                    }
                  } else {
                    var prevProps =
                      finishedWork.elementType === finishedWork.type
                        ? current2.memoizedProps
                        : resolveDefaultProps(finishedWork.type, current2.memoizedProps)
                    var prevState = current2.memoizedState
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error(
                            'Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.',
                            getComponentName(finishedWork.type) || 'instance'
                          )
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error(
                            'Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.',
                            getComponentName(finishedWork.type) || 'instance'
                          )
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate)
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error(
                          'Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.',
                          getComponentName(finishedWork.type) || 'instance'
                        )
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error(
                          'Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.',
                          getComponentName(finishedWork.type) || 'instance'
                        )
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance)
                }
                return
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue
                if (_updateQueue !== null) {
                  var _instance = null
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode)
                        break
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode
                        break
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance)
                }
                return
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type
                  var props = finishedWork.memoizedProps
                  commitMount(_instance2, type, props)
                }
                return
              }
              case HostText: {
                return
              }
              case HostPortal: {
                return
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps,
                    onCommit = _finishedWork$memoize2.onCommit,
                    onRender = _finishedWork$memoize2.onRender
                  var effectDuration = finishedWork.stateNode.effectDuration
                  var commitTime2 = getCommitTime()
                  if (typeof onRender === 'function') {
                    {
                      onRender(
                        finishedWork.memoizedProps.id,
                        current2 === null ? 'mount' : 'update',
                        finishedWork.actualDuration,
                        finishedWork.treeBaseDuration,
                        finishedWork.actualStartTime,
                        commitTime2,
                        finishedRoot.memoizedInteractions
                      )
                    }
                  }
                }
                return
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork)
                return
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return
            }
            {
              {
                throw Error(
                  'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode
                  if (isHidden) {
                    hideInstance(instance)
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps)
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode
                  if (isHidden) {
                    hideTextInstance(_instance3)
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps)
                  }
                } else if (
                  (node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) &&
                  node.memoizedState !== null &&
                  node !== finishedWork
                );
                else if (node.child !== null) {
                  node.child.return = node
                  node = node.child
                  continue
                }
                if (node === finishedWork) {
                  return
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return
                  }
                  node = node.return
                }
                node.sibling.return = node.return
                node = node.sibling
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref
            if (ref !== null) {
              var instance = finishedWork.stateNode
              var instanceToUse
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance)
                  break
                default:
                  instanceToUse = instance
              }
              if (typeof ref === 'function') {
                ref(instanceToUse)
              } else {
                {
                  if (!ref.hasOwnProperty('current')) {
                    error(
                      'Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().',
                      getComponentName(finishedWork.type)
                    )
                  }
                }
                ref.current = instanceToUse
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref
            if (currentRef !== null) {
              if (typeof currentRef === 'function') {
                currentRef(null)
              } else {
                currentRef.current = null
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2)
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next
                    var effect = firstEffect
                    do {
                      var _effect2 = effect,
                        destroy = _effect2.destroy,
                        tag = _effect2.tag
                      if (destroy !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect)
                        } else {
                          {
                            safelyCallDestroy(current2, destroy)
                          }
                        }
                      }
                      effect = effect.next
                    } while (effect !== firstEffect)
                  }
                }
                return
              }
              case ClassComponent: {
                safelyDetachRef(current2)
                var instance = current2.stateNode
                if (typeof instance.componentWillUnmount === 'function') {
                  safelyCallComponentWillUnmount(current2, instance)
                }
                return
              }
              case HostComponent: {
                safelyDetachRef(current2)
                return
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2)
                }
                return
              }
              case FundamentalComponent: {
                return
              }
              case DehydratedFragment: {
                return
              }
              case ScopeComponent: {
                return
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node = root2
            while (true) {
              commitUnmount(finishedRoot, node)
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node
                node = node.child
                continue
              }
              if (node === root2) {
                return
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root2) {
                  return
                }
                node = node.return
              }
              node.sibling.return = node.return
              node = node.sibling
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null
            fiber.child = null
            fiber.dependencies = null
            fiber.firstEffect = null
            fiber.lastEffect = null
            fiber.memoizedProps = null
            fiber.memoizedState = null
            fiber.pendingProps = null
            fiber.return = null
            fiber.updateQueue = null
            {
              fiber._debugOwner = null
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent
              }
              parent = parent.return
            }
            {
              {
                throw Error(
                  'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal
          }
          function getHostSibling(fiber) {
            var node = fiber
            siblings: while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null
                }
                node = node.return
              }
              node.sibling.return = node.return
              node = node.sibling
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings
                } else {
                  node.child.return = node
                  node = node.child
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork)
            var parent
            var isContainer
            var parentStateNode = parentFiber.stateNode
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode
                isContainer = false
                break
              case HostRoot:
                parent = parentStateNode.containerInfo
                isContainer = true
                break
              case HostPortal:
                parent = parentStateNode.containerInfo
                isContainer = true
                break
              case FundamentalComponent:
              default: {
                {
                  throw Error(
                    'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.'
                  )
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent)
              parentFiber.flags &= ~ContentReset
            }
            var before = getHostSibling(finishedWork)
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent)
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent)
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag
            var isHost = tag === HostComponent || tag === HostText
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance
              if (before) {
                insertInContainerBefore(parent, stateNode, before)
              } else {
                appendChildToContainer(parent, stateNode)
              }
            } else if (tag === HostPortal);
            else {
              var child = node.child
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent)
                var sibling = child.sibling
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent)
                  sibling = sibling.sibling
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag
            var isHost = tag === HostComponent || tag === HostText
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance
              if (before) {
                insertBefore(parent, stateNode, before)
              } else {
                appendChild(parent, stateNode)
              }
            } else if (tag === HostPortal);
            else {
              var child = node.child
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent)
                var sibling = child.sibling
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent)
                  sibling = sibling.sibling
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2
            var currentParentIsValid = false
            var currentParent
            var currentParentIsContainer
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return
                findParent: while (true) {
                  if (!(parent !== null)) {
                    {
                      throw Error(
                        'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'
                      )
                    }
                  }
                  var parentStateNode = parent.stateNode
                  switch (parent.tag) {
                    case HostComponent:
                      currentParent = parentStateNode
                      currentParentIsContainer = false
                      break findParent
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo
                      currentParentIsContainer = true
                      break findParent
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo
                      currentParentIsContainer = true
                      break findParent
                  }
                  parent = parent.return
                }
                currentParentIsValid = true
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node)
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode)
                } else {
                  removeChild(currentParent, node.stateNode)
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo
                  currentParentIsContainer = true
                  node.child.return = node
                  node = node.child
                  continue
                }
              } else {
                commitUnmount(finishedRoot, node)
                if (node.child !== null) {
                  node.child.return = node
                  node = node.child
                  continue
                }
              }
              if (node === current2) {
                return
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return
                }
                node = node.return
                if (node.tag === HostPortal) {
                  currentParentIsValid = false
                }
              }
              node.sibling.return = node.return
              node = node.sibling
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2)
            }
            var alternate = current2.alternate
            detachFiberMutation(current2)
            if (alternate !== null) {
              detachFiberMutation(alternate)
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork)
                }
                return
              }
              case ClassComponent: {
                return
              }
              case HostComponent: {
                var instance = finishedWork.stateNode
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps
                  var type = finishedWork.type
                  var updatePayload = finishedWork.updateQueue
                  finishedWork.updateQueue = null
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps)
                  }
                }
                return
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error(
                      'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.'
                    )
                  }
                }
                var textInstance = finishedWork.stateNode
                var newText = finishedWork.memoizedProps
                var oldText = current2 !== null ? current2.memoizedProps : newText
                commitTextUpdate(textInstance, oldText, newText)
                return
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode
                  if (_root.hydrate) {
                    _root.hydrate = false
                    commitHydratedContainer(_root.containerInfo)
                  }
                }
                return
              }
              case Profiler: {
                return
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork)
                attachSuspenseRetryListeners(finishedWork)
                return
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork)
                return
              }
              case IncompleteClassComponent: {
                return
              }
              case FundamentalComponent: {
                break
              }
              case ScopeComponent: {
                break
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState
                var isHidden = newState !== null
                hideOrUnhideAllChildren(finishedWork, isHidden)
                return
              }
            }
            {
              {
                throw Error(
                  'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState
            if (newState !== null) {
              markCommitTimeOfFallback()
              {
                var primaryChildParent = finishedWork.child
                hideOrUnhideAllChildren(primaryChildParent, true)
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState
            if (newState === null) {
              var current2 = finishedWork.alternate
              if (current2 !== null) {
                var prevState = current2.memoizedState
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance)
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue
            if (wakeables !== null) {
              finishedWork.updateQueue = null
              var retryCache = finishedWork.stateNode
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet()
              }
              wakeables.forEach(function (wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable)
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry)
                    }
                  }
                  retryCache.add(wakeable)
                  wakeable.then(retry, retry)
                }
              })
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState
                return newState !== null && newState.dehydrated === null
              }
            }
            return false
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode)
          }
          var COMPONENT_TYPE = 0
          var HAS_PSEUDO_CLASS_TYPE = 1
          var ROLE_TYPE = 2
          var TEST_NAME_TYPE = 3
          var TEXT_TYPE = 4
          if (typeof Symbol === 'function' && Symbol.for) {
            var symbolFor$1 = Symbol.for
            COMPONENT_TYPE = symbolFor$1('selector.component')
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class')
            ROLE_TYPE = symbolFor$1('selector.role')
            TEST_NAME_TYPE = symbolFor$1('selector.test_id')
            TEXT_TYPE = symbolFor$1('selector.text')
          }
          var commitHooks = []
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function (commitHook) {
                return commitHook()
              })
            }
          }
          var ceil = Math.ceil
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
            ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
            IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing
          var NoContext = 0
          var BatchedContext = 1
          var EventContext = 2
          var DiscreteEventContext = 4
          var LegacyUnbatchedContext = 8
          var RenderContext = 16
          var CommitContext = 32
          var RetryAfterError = 64
          var RootIncomplete = 0
          var RootFatalErrored = 1
          var RootErrored = 2
          var RootSuspended = 3
          var RootSuspendedWithDelay = 4
          var RootCompleted = 5
          var executionContext = NoContext
          var workInProgressRoot = null
          var workInProgress = null
          var workInProgressRootRenderLanes = NoLanes
          var subtreeRenderLanes = NoLanes
          var subtreeRenderLanesCursor = createCursor(NoLanes)
          var workInProgressRootExitStatus = RootIncomplete
          var workInProgressRootFatalError = null
          var workInProgressRootIncludedLanes = NoLanes
          var workInProgressRootSkippedLanes = NoLanes
          var workInProgressRootUpdatedLanes = NoLanes
          var workInProgressRootPingedLanes = NoLanes
          var mostRecentlyUpdatedRoot = null
          var globalMostRecentFallbackTime = 0
          var FALLBACK_THROTTLE_MS = 500
          var workInProgressRootRenderTargetTime = Infinity
          var RENDER_TIMEOUT_MS = 500
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime
          }
          var nextEffect = null
          var hasUncaughtError = false
          var firstUncaughtError = null
          var legacyErrorBoundariesThatAlreadyFailed = null
          var rootDoesHavePassiveEffects = false
          var rootWithPendingPassiveEffects = null
          var pendingPassiveEffectsRenderPriority = NoPriority$1
          var pendingPassiveEffectsLanes = NoLanes
          var pendingPassiveHookEffectsMount = []
          var pendingPassiveHookEffectsUnmount = []
          var rootsWithPendingDiscreteUpdates = null
          var NESTED_UPDATE_LIMIT = 50
          var nestedUpdateCount = 0
          var rootWithNestedUpdates = null
          var NESTED_PASSIVE_UPDATE_LIMIT = 50
          var nestedPassiveUpdateCount = 0
          var spawnedWorkDuringRender = null
          var currentEventTime = NoTimestamp
          var currentEventWipLanes = NoLanes
          var currentEventPendingLanes = NoLanes
          var isFlushingPassiveEffects = false
          var focusedInstanceHandle = null
          var shouldFireAfterActiveInstanceBlur = false
          function getWorkInProgressRoot() {
            return workInProgressRoot
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now()
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime
            }
            currentEventTime = now()
            return currentEventTime
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes
            }
            var isTransition = requestCurrentTransition() !== NoTransition
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes =
                  mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes)
            }
            var schedulerPriority = getCurrentPriorityLevel()
            var lane
            if (
              (executionContext & DiscreteEventContext) !== NoContext &&
              schedulerPriority === UserBlockingPriority$2
            ) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes)
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority)
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes)
            }
            return lane
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes
            }
            return findRetryLane(currentEventWipLanes)
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates()
            warnAboutRenderPhaseUpdatesInDEV(fiber)
            var root2 = markUpdateLaneFromFiberToRoot(fiber, lane)
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber)
              return null
            }
            markRootUpdated(root2, lane, eventTime)
            if (root2 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane)
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes)
              }
            }
            var priorityLevel = getCurrentPriorityLevel()
            if (lane === SyncLane) {
              if (
                (executionContext & LegacyUnbatchedContext) !== NoContext &&
                (executionContext & (RenderContext | CommitContext)) === NoContext
              ) {
                schedulePendingInteractions(root2, lane)
                performSyncWorkOnRoot(root2)
              } else {
                ensureRootIsScheduled(root2, eventTime)
                schedulePendingInteractions(root2, lane)
                if (executionContext === NoContext) {
                  resetRenderTimer()
                  flushSyncCallbackQueue()
                }
              }
            } else {
              if (
                (executionContext & DiscreteEventContext) !== NoContext &&
                (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)
              ) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = new Set([root2])
                } else {
                  rootsWithPendingDiscreteUpdates.add(root2)
                }
              }
              ensureRootIsScheduled(root2, eventTime)
              schedulePendingInteractions(root2, lane)
            }
            mostRecentlyUpdatedRoot = root2
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane)
            var alternate = sourceFiber.alternate
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane)
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber)
              }
            }
            var node = sourceFiber
            var parent = sourceFiber.return
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane)
              alternate = parent.alternate
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane)
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber)
                  }
                }
              }
              node = parent
              parent = parent.return
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode
              return root2
            } else {
              return null
            }
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode
            markStarvedLanesAsExpired(root2, currentTime)
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes)
            var newCallbackPriority = returnNextLanesPriority()
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode)
                root2.callbackNode = null
                root2.callbackPriority = NoLanePriority
              }
              return
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority
              if (existingCallbackPriority === newCallbackPriority) {
                return
              }
              cancelCallback(existingCallbackNode)
            }
            var newCallbackNode
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2))
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2))
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority)
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2))
            }
            root2.callbackPriority = newCallbackPriority
            root2.callbackNode = newCallbackNode
          }
          function performConcurrentWorkOnRoot(root2) {
            currentEventTime = NoTimestamp
            currentEventWipLanes = NoLanes
            currentEventPendingLanes = NoLanes
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error('Should not already be working.')
              }
            }
            var originalCallbackNode = root2.callbackNode
            var didFlushPassiveEffects = flushPassiveEffects()
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes)
            if (lanes === NoLanes) {
              return null
            }
            var exitStatus = renderRootConcurrent(root2, lanes)
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root2, NoLanes)
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError
                if (root2.hydrate) {
                  root2.hydrate = false
                  clearContainer(root2.containerInfo)
                }
                lanes = getLanesToRetrySynchronouslyOnError(root2)
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root2, lanes)
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError
                prepareFreshStack(root2, NoLanes)
                markRootSuspended$1(root2, lanes)
                ensureRootIsScheduled(root2, now())
                throw fatalError
              }
              var finishedWork = root2.current.alternate
              root2.finishedWork = finishedWork
              root2.finishedLanes = lanes
              finishConcurrentRender(root2, exitStatus, lanes)
            }
            ensureRootIsScheduled(root2, now())
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2)
            }
            return null
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error('Root did not complete. This is a bug in React.')
                  }
                }
              }
              case RootErrored: {
                commitRoot(root2)
                break
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes)
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now()
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes)
                    if (nextLanes !== NoLanes) {
                      break
                    }
                    var suspendedLanes = root2.suspendedLanes
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime()
                      markRootPinged(root2, suspendedLanes)
                      break
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout)
                    break
                  }
                }
                commitRoot(root2)
                break
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes)
                if (includesOnlyTransitions(lanes)) {
                  break
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes)
                  var eventTimeMs = mostRecentEventTime
                  var timeElapsedMs = now() - eventTimeMs
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout)
                    break
                  }
                }
                commitRoot(root2)
                break
              }
              case RootCompleted: {
                commitRoot(root2)
                break
              }
              default: {
                {
                  {
                    throw Error('Unknown root exit status.')
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes)
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes)
            markRootSuspended(root2, suspendedLanes)
          }
          function performSyncWorkOnRoot(root2) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error('Should not already be working.')
              }
            }
            flushPassiveEffects()
            var lanes
            var exitStatus
            if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes
              exitStatus = renderRootSync(root2, lanes)
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root2, lanes)
                exitStatus = renderRootSync(root2, lanes)
              }
            } else {
              lanes = getNextLanes(root2, NoLanes)
              exitStatus = renderRootSync(root2, lanes)
            }
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError
              if (root2.hydrate) {
                root2.hydrate = false
                clearContainer(root2.containerInfo)
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2)
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes)
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError
              prepareFreshStack(root2, NoLanes)
              markRootSuspended$1(root2, lanes)
              ensureRootIsScheduled(root2, now())
              throw fatalError
            }
            var finishedWork = root2.current.alternate
            root2.finishedWork = finishedWork
            root2.finishedLanes = lanes
            commitRoot(root2)
            ensureRootIsScheduled(root2, now())
            return null
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error('unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.')
                }
              }
              return
            }
            flushPendingDiscreteUpdates()
            flushPassiveEffects()
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates
              rootsWithPendingDiscreteUpdates = null
              roots.forEach(function (root2) {
                markDiscreteUpdatesExpired(root2)
                ensureRootIsScheduled(root2, now())
              })
            }
            flushSyncCallbackQueue()
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext
            executionContext |= BatchedContext
            try {
              return fn(a)
            } finally {
              executionContext = prevExecutionContext
              if (executionContext === NoContext) {
                resetRenderTimer()
                flushSyncCallbackQueue()
              }
            }
          }
          function batchedEventUpdates$1(fn, a) {
            var prevExecutionContext = executionContext
            executionContext |= EventContext
            try {
              return fn(a)
            } finally {
              executionContext = prevExecutionContext
              if (executionContext === NoContext) {
                resetRenderTimer()
                flushSyncCallbackQueue()
              }
            }
          }
          function discreteUpdates$1(fn, a, b, c, d) {
            var prevExecutionContext = executionContext
            executionContext |= DiscreteEventContext
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d))
              } finally {
                executionContext = prevExecutionContext
                if (executionContext === NoContext) {
                  resetRenderTimer()
                  flushSyncCallbackQueue()
                }
              }
            }
          }
          function unbatchedUpdates(fn, a) {
            var prevExecutionContext = executionContext
            executionContext &= ~BatchedContext
            executionContext |= LegacyUnbatchedContext
            try {
              return fn(a)
            } finally {
              executionContext = prevExecutionContext
              if (executionContext === NoContext) {
                resetRenderTimer()
                flushSyncCallbackQueue()
              }
            }
          }
          function flushSync(fn, a) {
            var prevExecutionContext = executionContext
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error(
                  'flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.'
                )
              }
              return fn(a)
            }
            executionContext |= BatchedContext
            {
              try {
                if (fn) {
                  return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a))
                } else {
                  return void 0
                }
              } finally {
                executionContext = prevExecutionContext
                flushSyncCallbackQueue()
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber)
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes)
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes)
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current
            pop(subtreeRenderLanesCursor, fiber)
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null
            root2.finishedLanes = NoLanes
            var timeoutHandle = root2.timeoutHandle
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout
              cancelTimeout(timeoutHandle)
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork)
                interruptedWork = interruptedWork.return
              }
            }
            workInProgressRoot = root2
            workInProgress = createWorkInProgress(root2.current, null)
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes
            workInProgressRootExitStatus = RootIncomplete
            workInProgressRootFatalError = null
            workInProgressRootSkippedLanes = NoLanes
            workInProgressRootUpdatedLanes = NoLanes
            workInProgressRootPingedLanes = NoLanes
            {
              spawnedWorkDuringRender = null
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings()
            }
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress
              try {
                resetContextDependencies()
                resetHooksAfterThrow()
                resetCurrentFiber()
                ReactCurrentOwner$2.current = null
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored
                  workInProgressRootFatalError = thrownValue
                  workInProgress = null
                  return
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true)
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes)
                completeUnitOfWork(erroredWork)
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return
                  workInProgress = erroredWork
                } else {
                  erroredWork = workInProgress
                }
                continue
              }
              return
            } while (true)
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher
            } else {
              return prevDispatcher
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current
              tracing.__interactionsRef.current = root2.memoizedInteractions
              return prevInteractions
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now()
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes)
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay
            }
            if (
              workInProgressRoot !== null &&
              (includesNonIdleWork(workInProgressRootSkippedLanes) ||
                includesNonIdleWork(workInProgressRootUpdatedLanes))
            ) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes)
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext
            executionContext |= RenderContext
            var prevDispatcher = pushDispatcher()
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root2, lanes)
              startWorkOnPendingInteractions(root2, lanes)
            }
            var prevInteractions = pushInteractions(root2)
            do {
              try {
                workLoopSync()
                break
              } catch (thrownValue) {
                handleError(root2, thrownValue)
              }
            } while (true)
            resetContextDependencies()
            {
              popInteractions(prevInteractions)
            }
            executionContext = prevExecutionContext
            popDispatcher(prevDispatcher)
            if (workInProgress !== null) {
              {
                {
                  throw Error(
                    'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.'
                  )
                }
              }
            }
            workInProgressRoot = null
            workInProgressRootRenderLanes = NoLanes
            return workInProgressRootExitStatus
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress)
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext
            executionContext |= RenderContext
            var prevDispatcher = pushDispatcher()
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer()
              prepareFreshStack(root2, lanes)
              startWorkOnPendingInteractions(root2, lanes)
            }
            var prevInteractions = pushInteractions(root2)
            do {
              try {
                workLoopConcurrent()
                break
              } catch (thrownValue) {
                handleError(root2, thrownValue)
              }
            } while (true)
            resetContextDependencies()
            {
              popInteractions(prevInteractions)
            }
            popDispatcher(prevDispatcher)
            executionContext = prevExecutionContext
            if (workInProgress !== null) {
              return RootIncomplete
            } else {
              workInProgressRoot = null
              workInProgressRootRenderLanes = NoLanes
              return workInProgressRootExitStatus
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress)
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate
            setCurrentFiber(unitOfWork)
            var next
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork)
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes)
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true)
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes)
            }
            resetCurrentFiber()
            unitOfWork.memoizedProps = unitOfWork.pendingProps
            if (next === null) {
              completeUnitOfWork(unitOfWork)
            } else {
              workInProgress = next
            }
            ReactCurrentOwner$2.current = null
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork
            do {
              var current2 = completedWork.alternate
              var returnFiber = completedWork.return
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork)
                var next = void 0
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes)
                } else {
                  startProfilerTimer(completedWork)
                  next = completeWork(current2, completedWork, subtreeRenderLanes)
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false)
                }
                resetCurrentFiber()
                if (next !== null) {
                  workInProgress = next
                  return
                }
                resetChildLanes(completedWork)
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect
                    }
                    returnFiber.lastEffect = completedWork.lastEffect
                  }
                  var flags = completedWork.flags
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork
                    } else {
                      returnFiber.firstEffect = completedWork
                    }
                    returnFiber.lastEffect = completedWork
                  }
                }
              } else {
                var _next = unwindWork(completedWork)
                if (_next !== null) {
                  _next.flags &= HostEffectMask
                  workInProgress = _next
                  return
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false)
                  var actualDuration = completedWork.actualDuration
                  var child = completedWork.child
                  while (child !== null) {
                    actualDuration += child.actualDuration
                    child = child.sibling
                  }
                  completedWork.actualDuration = actualDuration
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null
                  returnFiber.flags |= Incomplete
                }
              }
              var siblingFiber = completedWork.sibling
              if (siblingFiber !== null) {
                workInProgress = siblingFiber
                return
              }
              completedWork = returnFiber
              workInProgress = completedWork
            } while (completedWork !== null)
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted
            }
          }
          function resetChildLanes(completedWork) {
            if (
              (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) &&
              completedWork.memoizedState !== null &&
              !includesSomeLane(subtreeRenderLanes, OffscreenLane) &&
              (completedWork.mode & ConcurrentMode) !== NoLanes
            ) {
              return
            }
            var newChildLanes = NoLanes
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration
              var treeBaseDuration = completedWork.selfBaseDuration
              var shouldBubbleActualDurations =
                completedWork.alternate === null || completedWork.child !== completedWork.alternate.child
              var child = completedWork.child
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes))
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration
                }
                treeBaseDuration += child.treeBaseDuration
                child = child.sibling
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration
                }
              }
              completedWork.actualDuration = actualDuration
              completedWork.treeBaseDuration = treeBaseDuration
            } else {
              var _child = completedWork.child
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes))
                _child = _child.sibling
              }
            }
            completedWork.childLanes = newChildLanes
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel()
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel))
            return null
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects()
            } while (rootWithPendingPassiveEffects !== null)
            flushRenderPhaseStrictModeWarningsInDEV()
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error('Should not already be working.')
              }
            }
            var finishedWork = root2.finishedWork
            var lanes = root2.finishedLanes
            if (finishedWork === null) {
              return null
            }
            root2.finishedWork = null
            root2.finishedLanes = NoLanes
            if (!(finishedWork !== root2.current)) {
              {
                throw Error(
                  'Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            }
            root2.callbackNode = null
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes)
            markRootFinished(root2, remainingLanes)
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
                rootsWithPendingDiscreteUpdates.delete(root2)
              }
            }
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null
              workInProgress = null
              workInProgressRootRenderLanes = NoLanes
            }
            var firstEffect
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork
                firstEffect = finishedWork.firstEffect
              } else {
                firstEffect = finishedWork
              }
            } else {
              firstEffect = finishedWork.firstEffect
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext
              executionContext |= CommitContext
              var prevInteractions = pushInteractions(root2)
              ReactCurrentOwner$2.current = null
              focusedInstanceHandle = prepareForCommit(root2.containerInfo)
              shouldFireAfterActiveInstanceBlur = false
              nextEffect = firstEffect
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null)
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error('Should be working on an effect.')
                      }
                    }
                    var error2 = clearCaughtError()
                    captureCommitPhaseError(nextEffect, error2)
                    nextEffect = nextEffect.nextEffect
                  }
                }
              } while (nextEffect !== null)
              focusedInstanceHandle = null
              {
                recordCommitTime()
              }
              nextEffect = firstEffect
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel)
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error('Should be working on an effect.')
                      }
                    }
                    var _error = clearCaughtError()
                    captureCommitPhaseError(nextEffect, _error)
                    nextEffect = nextEffect.nextEffect
                  }
                }
              } while (nextEffect !== null)
              resetAfterCommit(root2.containerInfo)
              root2.current = finishedWork
              nextEffect = firstEffect
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes)
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error('Should be working on an effect.')
                      }
                    }
                    var _error2 = clearCaughtError()
                    captureCommitPhaseError(nextEffect, _error2)
                    nextEffect = nextEffect.nextEffect
                  }
                }
              } while (nextEffect !== null)
              nextEffect = null
              requestPaint()
              {
                popInteractions(prevInteractions)
              }
              executionContext = prevExecutionContext
            } else {
              root2.current = finishedWork
              {
                recordCommitTime()
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false
              rootWithPendingPassiveEffects = root2
              pendingPassiveEffectsLanes = lanes
              pendingPassiveEffectsRenderPriority = renderPriorityLevel
            } else {
              nextEffect = firstEffect
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect
                nextEffect.nextEffect = null
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect)
                }
                nextEffect = nextNextEffect
              }
            }
            remainingLanes = root2.pendingLanes
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender
                  spawnedWorkDuringRender = null
                  for (var i = 0; i < expirationTimes.length; i++) {
                    scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions)
                  }
                }
                schedulePendingInteractions(root2, remainingLanes)
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, lanes)
              }
            }
            if (remainingLanes === SyncLane) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++
              } else {
                nestedUpdateCount = 0
                rootWithNestedUpdates = root2
              }
            } else {
              nestedUpdateCount = 0
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel)
            {
              onCommitRoot$1()
            }
            ensureRootIsScheduled(root2, now())
            if (hasUncaughtError) {
              hasUncaughtError = false
              var _error3 = firstUncaughtError
              firstUncaughtError = null
              throw _error3
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null
            }
            flushSyncCallbackQueue()
            return null
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true
                  }
                } else {
                  if (
                    nextEffect.tag === SuspenseComponent &&
                    isSuspenseBoundaryBeingHidden(current2, nextEffect) &&
                    doesFiberContain(nextEffect, focusedInstanceHandle)
                  ) {
                    shouldFireAfterActiveInstanceBlur = true
                  }
                }
              }
              var flags = nextEffect.flags
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect)
                commitBeforeMutationLifeCycles(current2, nextEffect)
                resetCurrentFiber()
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true
                  scheduleCallback(NormalPriority$1, function () {
                    flushPassiveEffects()
                    return null
                  })
                }
              }
              nextEffect = nextEffect.nextEffect
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect)
              var flags = nextEffect.flags
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect)
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate
                if (current2 !== null) {
                  commitDetachRef(current2)
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating)
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect)
                  nextEffect.flags &= ~Placement
                  break
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect)
                  nextEffect.flags &= ~Placement
                  var _current = nextEffect.alternate
                  commitWork(_current, nextEffect)
                  break
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating
                  break
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating
                  var _current2 = nextEffect.alternate
                  commitWork(_current2, nextEffect)
                  break
                }
                case Update: {
                  var _current3 = nextEffect.alternate
                  commitWork(_current3, nextEffect)
                  break
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect)
                  break
                }
              }
              resetCurrentFiber()
              nextEffect = nextEffect.nextEffect
            }
          }
          function commitLayoutEffects(root2, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect)
              var flags = nextEffect.flags
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate
                commitLifeCycles(root2, current2, nextEffect)
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect)
                }
              }
              resetCurrentFiber()
              nextEffect = nextEffect.nextEffect
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel =
                pendingPassiveEffectsRenderPriority > NormalPriority$1
                  ? NormalPriority$1
                  : pendingPassiveEffectsRenderPriority
              pendingPassiveEffectsRenderPriority = NoPriority$1
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl)
              }
            }
            return false
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber)
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true
              scheduleCallback(NormalPriority$1, function () {
                flushPassiveEffects()
                return null
              })
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber)
            {
              fiber.flags |= PassiveUnmountPendingDev
              var alternate = fiber.alternate
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true
              scheduleCallback(NormalPriority$1, function () {
                flushPassiveEffects()
                return null
              })
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create = effect.create
            effect.destroy = create()
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false
            }
            var root2 = rootWithPendingPassiveEffects
            var lanes = pendingPassiveEffectsLanes
            rootWithPendingPassiveEffects = null
            pendingPassiveEffectsLanes = NoLanes
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error('Cannot flush passive effects while already rendering.')
              }
            }
            {
              isFlushingPassiveEffects = true
            }
            var prevExecutionContext = executionContext
            executionContext |= CommitContext
            var prevInteractions = pushInteractions(root2)
            var unmountEffects = pendingPassiveHookEffectsUnmount
            pendingPassiveHookEffectsUnmount = []
            for (var i = 0; i < unmountEffects.length; i += 2) {
              var _effect = unmountEffects[i]
              var fiber = unmountEffects[i + 1]
              var destroy = _effect.destroy
              _effect.destroy = void 0
              {
                fiber.flags &= ~PassiveUnmountPendingDev
                var alternate = fiber.alternate
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev
                }
              }
              if (typeof destroy === 'function') {
                {
                  setCurrentFiber(fiber)
                  {
                    invokeGuardedCallback(null, destroy, null)
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error('Should be working on an effect.')
                      }
                    }
                    var error2 = clearCaughtError()
                    captureCommitPhaseError(fiber, error2)
                  }
                  resetCurrentFiber()
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount
            pendingPassiveHookEffectsMount = []
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i]
              var _fiber = mountEffects[_i + 1]
              {
                setCurrentFiber(_fiber)
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2)
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error('Should be working on an effect.')
                    }
                  }
                  var _error4 = clearCaughtError()
                  captureCommitPhaseError(_fiber, _error4)
                }
                resetCurrentFiber()
              }
            }
            var effect = root2.current.firstEffect
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect
              effect.nextEffect = null
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect)
              }
              effect = nextNextEffect
            }
            {
              popInteractions(prevInteractions)
              finishPendingInteractions(root2, lanes)
            }
            {
              isFlushingPassiveEffects = false
            }
            executionContext = prevExecutionContext
            flushSyncCallbackQueue()
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1
            return true
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return (
              legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance)
            )
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = new Set([instance])
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance)
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true
              firstUncaughtError = error2
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber)
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane)
            enqueueUpdate(rootFiber, update)
            var eventTime = requestEventTime()
            var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane)
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime)
              ensureRootIsScheduled(root2, eventTime)
              schedulePendingInteractions(root2, SyncLane)
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2)
              return
            }
            var fiber = sourceFiber.return
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2)
                return
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type
                var instance = fiber.stateNode
                if (
                  typeof ctor.getDerivedStateFromError === 'function' ||
                  (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))
                ) {
                  var errorInfo = createCapturedValue(error2, sourceFiber)
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane)
                  enqueueUpdate(fiber, update)
                  var eventTime = requestEventTime()
                  var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane)
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime)
                    ensureRootIsScheduled(root2, eventTime)
                    schedulePendingInteractions(root2, SyncLane)
                  } else {
                    if (
                      typeof instance.componentDidCatch === 'function' &&
                      !isAlreadyFailedLegacyErrorBoundary(instance)
                    ) {
                      try {
                        instance.componentDidCatch(error2, errorInfo)
                      } catch (errorToIgnore) {}
                    }
                  }
                  return
                }
              }
              fiber = fiber.return
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache
            if (pingCache !== null) {
              pingCache.delete(wakeable)
            }
            var eventTime = requestEventTime()
            markRootPinged(root2, pingedLanes)
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (
                workInProgressRootExitStatus === RootSuspendedWithDelay ||
                (workInProgressRootExitStatus === RootSuspended &&
                  includesOnlyRetries(workInProgressRootRenderLanes) &&
                  now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)
              ) {
                prepareFreshStack(root2, NoLanes)
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes)
              }
            }
            ensureRootIsScheduled(root2, eventTime)
            schedulePendingInteractions(root2, pingedLanes)
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber)
            }
            var eventTime = requestEventTime()
            var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane)
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime)
              ensureRootIsScheduled(root2, eventTime)
              schedulePendingInteractions(root2, retryLane)
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane
            var retryCache
            {
              retryCache = boundaryFiber.stateNode
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable)
            }
            retryTimedOutBoundary(boundaryFiber, retryLane)
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120
              ? 120
              : timeElapsed < 480
              ? 480
              : timeElapsed < 1080
              ? 1080
              : timeElapsed < 1920
              ? 1920
              : timeElapsed < 3e3
              ? 3e3
              : timeElapsed < 4320
              ? 4320
              : ceil(timeElapsed / 1960) * 1960
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0
              rootWithNestedUpdates = null
              {
                {
                  throw Error(
                    'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.'
                  )
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0
                error(
                  "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
                )
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning()
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings()
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return
              }
              var tag = fiber.tag
              if (
                tag !== IndeterminateComponent &&
                tag !== HostRoot &&
                tag !== ClassComponent &&
                tag !== FunctionComponent &&
                tag !== ForwardRef &&
                tag !== MemoComponent &&
                tag !== SimpleMemoComponent &&
                tag !== Block
              ) {
                return
              }
              var componentName = getComponentName(fiber.type) || 'ReactComponent'
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName)
              } else {
                didWarnStateUpdateForNotYetMountedComponent = new Set([componentName])
              }
              var previousFiber = current
              try {
                setCurrentFiber(fiber)
                error(
                  "Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead."
                )
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber)
                } else {
                  resetCurrentFiber()
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag
              if (
                tag !== HostRoot &&
                tag !== ClassComponent &&
                tag !== FunctionComponent &&
                tag !== ForwardRef &&
                tag !== MemoComponent &&
                tag !== SimpleMemoComponent &&
                tag !== Block
              ) {
                return
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return
              }
              var componentName = getComponentName(fiber.type) || 'ReactComponent'
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName)
              } else {
                didWarnStateUpdateForUnmountedComponent = new Set([componentName])
              }
              if (isFlushingPassiveEffects);
              else {
                var previousFiber = current
                try {
                  setCurrentFiber(fiber)
                  error(
                    "Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.",
                    tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function'
                  )
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber)
                  } else {
                    resetCurrentFiber()
                  }
                }
              }
            }
          }
          var beginWork$1
          {
            var dummyFiber = null
            beginWork$1 = function (current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork)
              try {
                return beginWork(current2, unitOfWork, lanes)
              } catch (originalError) {
                if (
                  originalError !== null &&
                  typeof originalError === 'object' &&
                  typeof originalError.then === 'function'
                ) {
                  throw originalError
                }
                resetContextDependencies()
                resetHooksAfterThrow()
                unwindInterruptedWork(unitOfWork)
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy)
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork)
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes)
                if (hasCaughtError()) {
                  var replayError = clearCaughtError()
                  throw replayError
                } else {
                  throw originalError
                }
              }
            }
          }
          var didWarnAboutUpdateInRender = false
          var didWarnAboutUpdateInRenderForAnotherComponent
          {
            didWarnAboutUpdateInRenderForAnotherComponent = new Set()
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (
                isRendering &&
                (executionContext & RenderContext) !== NoContext &&
                !getIsUpdatingOpaqueValueInRenderPhaseInDEV()
              ) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = (workInProgress && getComponentName(workInProgress.type)) || 'Unknown'
                    var dedupeKey = renderingComponentName
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey)
                      var setStateComponentName = getComponentName(fiber.type) || 'Unknown'
                      error(
                        'Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render',
                        setStateComponentName,
                        renderingComponentName,
                        renderingComponentName
                      )
                    }
                    break
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error(
                        'Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.'
                      )
                      didWarnAboutUpdateInRender = true
                    }
                    break
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false,
          }
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current
                try {
                  setCurrentFiber(fiber)
                  error(
                    "It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);"
                  )
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber)
                  } else {
                    resetCurrentFiber()
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if (
                (fiber.mode & StrictMode) !== NoMode &&
                IsSomeRendererActing.current === false &&
                IsThisRendererActing.current === false
              ) {
                error(
                  "An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act",
                  getComponentName(fiber.type)
                )
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (
                executionContext === NoContext &&
                IsSomeRendererActing.current === false &&
                IsThisRendererActing.current === false
              ) {
                var previousFiber = current
                try {
                  setCurrentFiber(fiber)
                  error(
                    "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act",
                    getComponentName(fiber.type)
                  )
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber)
                  } else {
                    resetCurrentFiber()
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV
          var didWarnAboutUnmockedScheduler = false
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`)
                }
              }
            }
          }
          function computeThreadID(root2, lane) {
            return lane * 1e3 + root2.interactionThreadID
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane]
            } else {
              spawnedWorkDuringRender.push(lane)
            }
          }
          function scheduleInteractions(root2, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap
              var pendingInteractions = pendingInteractionMap.get(lane)
              if (pendingInteractions != null) {
                interactions.forEach(function (interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++
                  }
                  pendingInteractions.add(interaction)
                })
              } else {
                pendingInteractionMap.set(lane, new Set(interactions))
                interactions.forEach(function (interaction) {
                  interaction.__count++
                })
              }
              var subscriber = tracing.__subscriberRef.current
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lane)
                subscriber.onWorkScheduled(interactions, threadID)
              }
            }
          }
          function schedulePendingInteractions(root2, lane) {
            scheduleInteractions(root2, lane, tracing.__interactionsRef.current)
          }
          function startWorkOnPendingInteractions(root2, lanes) {
            var interactions = new Set()
            root2.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function (interaction) {
                  return interactions.add(interaction)
                })
              }
            })
            root2.memoizedInteractions = interactions
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lanes)
                try {
                  subscriber.onWorkStarted(interactions, threadID)
                } catch (error2) {
                  scheduleCallback(ImmediatePriority$1, function () {
                    throw error2
                  })
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedLanes) {
            var remainingLanesAfterCommit = root2.pendingLanes
            var subscriber
            try {
              subscriber = tracing.__subscriberRef.current
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedLanes)
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID)
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function () {
                throw error2
              })
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap
              pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane)
                  scheduledInteractions.forEach(function (interaction) {
                    interaction.__count--
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction)
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority$1, function () {
                          throw error2
                        })
                      }
                    }
                  })
                }
              })
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0
          }
          var actingUpdatesScopeDepth = 0
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null
            fiber.stateNode = null
          }
          var resolveFamily = null
          var failedBoundaries = null
          var setRefreshHandler = function (handler) {
            {
              resolveFamily = handler
            }
          }
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type
              }
              var family = resolveFamily(type)
              if (family === void 0) {
                return type
              }
              return family.current
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type)
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type
              }
              var family = resolveFamily(type)
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === 'function') {
                  var currentRender = resolveFunctionForHotReloading(type.render)
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender,
                    }
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName
                    }
                    return syntheticType
                  }
                }
                return type
              }
              return family.current
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false
              }
              var prevType = fiber.elementType
              var nextType = element.type
              var needsCompareFamilies = false
              var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === 'function') {
                    needsCompareFamilies = true
                  }
                  break
                }
                case FunctionComponent: {
                  if (typeof nextType === 'function') {
                    needsCompareFamilies = true
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true
                  }
                  break
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true
                  }
                  break
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true
                  }
                  break
                }
                default:
                  return false
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType)
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true
                }
              }
              return false
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return
              }
              if (typeof WeakSet !== 'function') {
                return
              }
              if (failedBoundaries === null) {
                failedBoundaries = new WeakSet()
              }
              failedBoundaries.add(fiber)
            }
          }
          var scheduleRefresh = function (root2, update) {
            {
              if (resolveFamily === null) {
                return
              }
              var staleFamilies = update.staleFamilies,
                updatedFamilies = update.updatedFamilies
              flushPassiveEffects()
              flushSync(function () {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies)
              })
            }
          }
          var scheduleRoot = function (root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return
              }
              flushPassiveEffects()
              flushSync(function () {
                updateContainer(element, root2, null, null)
              })
            }
          }
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate,
                child = fiber.child,
                sibling = fiber.sibling,
                tag = fiber.tag,
                type = fiber.type
              var candidateType = null
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type
                  break
                case ForwardRef:
                  candidateType = type.render
                  break
              }
              if (resolveFamily === null) {
                throw new Error('Expected resolveFamily to be set during hot reload.')
              }
              var needsRender = false
              var needsRemount = false
              if (candidateType !== null) {
                var family = resolveFamily(candidateType)
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true
                    } else {
                      needsRender = true
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || (alternate !== null && failedBoundaries.has(alternate))) {
                  needsRemount = true
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies)
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies)
              }
            }
          }
          var findHostInstancesForRefresh = function (root2, families) {
            {
              var hostInstances = new Set()
              var types = new Set(
                families.map(function (family) {
                  return family.current
                })
              )
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances)
              return hostInstances
            }
          }
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child,
                sibling = fiber.sibling,
                tag = fiber.tag,
                type = fiber.type
              var candidateType = null
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type
                  break
                case ForwardRef:
                  candidateType = type.render
                  break
              }
              var didMatch = false
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances)
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances)
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances)
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances)
              if (foundHostInstances) {
                return
              }
              var node = fiber
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode)
                    return
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo)
                    return
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo)
                    return
                }
                if (node.return === null) {
                  throw new Error('Expected to reach root first.')
                }
                node = node.return
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber
              var foundHostInstances = false
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true
                  hostInstances.add(node.stateNode)
                } else if (node.child !== null) {
                  node.child.return = node
                  node = node.child
                  continue
                }
                if (node === fiber) {
                  return foundHostInstances
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances
                  }
                  node = node.return
                }
                node.sibling.return = node.return
                node = node.sibling
              }
            }
            return false
          }
          var hasBadMapPolyfill
          {
            hasBadMapPolyfill = false
            try {
              var nonExtensibleObject = Object.preventExtensions({})
              new Map([[nonExtensibleObject, null]])
              new Set([nonExtensibleObject])
            } catch (e) {
              hasBadMapPolyfill = true
            }
          }
          var debugCounter = 1
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag
            this.key = key
            this.elementType = null
            this.type = null
            this.stateNode = null
            this.return = null
            this.child = null
            this.sibling = null
            this.index = 0
            this.ref = null
            this.pendingProps = pendingProps
            this.memoizedProps = null
            this.updateQueue = null
            this.memoizedState = null
            this.dependencies = null
            this.mode = mode
            this.flags = NoFlags
            this.nextEffect = null
            this.firstEffect = null
            this.lastEffect = null
            this.lanes = NoLanes
            this.childLanes = NoLanes
            this.alternate = null
            {
              this.actualDuration = Number.NaN
              this.actualStartTime = Number.NaN
              this.selfBaseDuration = Number.NaN
              this.treeBaseDuration = Number.NaN
              this.actualDuration = 0
              this.actualStartTime = -1
              this.selfBaseDuration = 0
              this.treeBaseDuration = 0
            }
            {
              this._debugID = debugCounter++
              this._debugSource = null
              this._debugOwner = null
              this._debugNeedsRemount = false
              this._debugHookTypes = null
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
                Object.preventExtensions(this)
              }
            }
          }
          var createFiber = function (tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode)
          }
          function shouldConstruct$1(Component2) {
            var prototype = Component2.prototype
            return !!(prototype && prototype.isReactComponent)
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === void 0
          }
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === 'function') {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent
              }
            }
            return IndeterminateComponent
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode)
              workInProgress2.elementType = current2.elementType
              workInProgress2.type = current2.type
              workInProgress2.stateNode = current2.stateNode
              {
                workInProgress2._debugID = current2._debugID
                workInProgress2._debugSource = current2._debugSource
                workInProgress2._debugOwner = current2._debugOwner
                workInProgress2._debugHookTypes = current2._debugHookTypes
              }
              workInProgress2.alternate = current2
              current2.alternate = workInProgress2
            } else {
              workInProgress2.pendingProps = pendingProps
              workInProgress2.type = current2.type
              workInProgress2.flags = NoFlags
              workInProgress2.nextEffect = null
              workInProgress2.firstEffect = null
              workInProgress2.lastEffect = null
              {
                workInProgress2.actualDuration = 0
                workInProgress2.actualStartTime = -1
              }
            }
            workInProgress2.childLanes = current2.childLanes
            workInProgress2.lanes = current2.lanes
            workInProgress2.child = current2.child
            workInProgress2.memoizedProps = current2.memoizedProps
            workInProgress2.memoizedState = current2.memoizedState
            workInProgress2.updateQueue = current2.updateQueue
            var currentDependencies = current2.dependencies
            workInProgress2.dependencies =
              currentDependencies === null
                ? null
                : {
                    lanes: currentDependencies.lanes,
                    firstContext: currentDependencies.firstContext,
                  }
            workInProgress2.sibling = current2.sibling
            workInProgress2.index = current2.index
            workInProgress2.ref = current2.ref
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration
              workInProgress2.treeBaseDuration = current2.treeBaseDuration
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type)
                  break
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type)
                  break
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type)
                  break
              }
            }
            return workInProgress2
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement
            workInProgress2.nextEffect = null
            workInProgress2.firstEffect = null
            workInProgress2.lastEffect = null
            var current2 = workInProgress2.alternate
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes
              workInProgress2.lanes = renderLanes2
              workInProgress2.child = null
              workInProgress2.memoizedProps = null
              workInProgress2.memoizedState = null
              workInProgress2.updateQueue = null
              workInProgress2.dependencies = null
              workInProgress2.stateNode = null
              {
                workInProgress2.selfBaseDuration = 0
                workInProgress2.treeBaseDuration = 0
              }
            } else {
              workInProgress2.childLanes = current2.childLanes
              workInProgress2.lanes = current2.lanes
              workInProgress2.child = current2.child
              workInProgress2.memoizedProps = current2.memoizedProps
              workInProgress2.memoizedState = current2.memoizedState
              workInProgress2.updateQueue = current2.updateQueue
              workInProgress2.type = current2.type
              var currentDependencies = current2.dependencies
              workInProgress2.dependencies =
                currentDependencies === null
                  ? null
                  : {
                      lanes: currentDependencies.lanes,
                      firstContext: currentDependencies.firstContext,
                    }
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration
                workInProgress2.treeBaseDuration = current2.treeBaseDuration
              }
            }
            return workInProgress2
          }
          function createHostRootFiber(tag) {
            var mode
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode
            } else {
              mode = NoMode
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode
            }
            return createFiber(HostRoot, null, null, mode)
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent
            var resolvedType = type
            if (typeof type === 'function') {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent
                {
                  resolvedType = resolveClassForHotReloading(resolvedType)
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType)
                }
              }
            } else if (typeof type === 'string') {
              fiberTag = HostComponent
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key)
                case REACT_DEBUG_TRACING_MODE_TYPE:
                  fiberTag = Mode
                  mode |= DebugTracingMode
                  break
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode
                  mode |= StrictMode
                  break
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key)
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key)
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key)
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key)
                case REACT_LEGACY_HIDDEN_TYPE:
                  return createFiberFromLegacyHidden(pendingProps, mode, lanes, key)
                case REACT_SCOPE_TYPE:
                default: {
                  if (typeof type === 'object' && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider
                        break getTag
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer
                        break getTag
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType)
                        }
                        break getTag
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent
                        break getTag
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent
                        resolvedType = null
                        break getTag
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block
                        break getTag
                    }
                  }
                  var info = ''
                  {
                    if (
                      type === void 0 ||
                      (typeof type === 'object' && type !== null && Object.keys(type).length === 0)
                    ) {
                      info +=
                        " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null
                    if (ownerName) {
                      info += '\n\nCheck the render method of `' + ownerName + '`.'
                    }
                  }
                  {
                    {
                      throw Error(
                        'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: ' +
                          (type == null ? type : typeof type) +
                          '.' +
                          info
                      )
                    }
                  }
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode)
            fiber.elementType = type
            fiber.type = resolvedType
            fiber.lanes = lanes
            {
              fiber._debugOwner = owner
            }
            return fiber
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null
            {
              owner = element._owner
            }
            var type = element.type
            var key = element.key
            var pendingProps = element.props
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes)
            {
              fiber._debugSource = element._source
              fiber._debugOwner = element._owner
            }
            return fiber
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode)
            fiber.lanes = lanes
            return fiber
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== 'string') {
                error('Profiler must specify an "id" as a prop')
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode)
            fiber.elementType = REACT_PROFILER_TYPE
            fiber.type = REACT_PROFILER_TYPE
            fiber.lanes = lanes
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0,
              }
            }
            return fiber
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode)
            fiber.type = REACT_SUSPENSE_TYPE
            fiber.elementType = REACT_SUSPENSE_TYPE
            fiber.lanes = lanes
            return fiber
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode)
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE
            fiber.lanes = lanes
            return fiber
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode)
            {
              fiber.type = REACT_OFFSCREEN_TYPE
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE
            fiber.lanes = lanes
            return fiber
          }
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode)
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE
            fiber.lanes = lanes
            return fiber
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode)
            fiber.lanes = lanes
            return fiber
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode)
            fiber.elementType = 'DELETED'
            fiber.type = 'DELETED'
            return fiber
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : []
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode)
            fiber.lanes = lanes
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation,
            }
            return fiber
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode)
            }
            target.tag = source.tag
            target.key = source.key
            target.elementType = source.elementType
            target.type = source.type
            target.stateNode = source.stateNode
            target.return = source.return
            target.child = source.child
            target.sibling = source.sibling
            target.index = source.index
            target.ref = source.ref
            target.pendingProps = source.pendingProps
            target.memoizedProps = source.memoizedProps
            target.updateQueue = source.updateQueue
            target.memoizedState = source.memoizedState
            target.dependencies = source.dependencies
            target.mode = source.mode
            target.flags = source.flags
            target.nextEffect = source.nextEffect
            target.firstEffect = source.firstEffect
            target.lastEffect = source.lastEffect
            target.lanes = source.lanes
            target.childLanes = source.childLanes
            target.alternate = source.alternate
            {
              target.actualDuration = source.actualDuration
              target.actualStartTime = source.actualStartTime
              target.selfBaseDuration = source.selfBaseDuration
              target.treeBaseDuration = source.treeBaseDuration
            }
            target._debugID = source._debugID
            target._debugSource = source._debugSource
            target._debugOwner = source._debugOwner
            target._debugNeedsRemount = source._debugNeedsRemount
            target._debugHookTypes = source._debugHookTypes
            return target
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag
            this.containerInfo = containerInfo
            this.pendingChildren = null
            this.current = null
            this.pingCache = null
            this.finishedWork = null
            this.timeoutHandle = noTimeout
            this.context = null
            this.pendingContext = null
            this.hydrate = hydrate2
            this.callbackNode = null
            this.callbackPriority = NoLanePriority
            this.eventTimes = createLaneMap(NoLanes)
            this.expirationTimes = createLaneMap(NoTimestamp)
            this.pendingLanes = NoLanes
            this.suspendedLanes = NoLanes
            this.pingedLanes = NoLanes
            this.expiredLanes = NoLanes
            this.mutableReadLanes = NoLanes
            this.finishedLanes = NoLanes
            this.entangledLanes = NoLanes
            this.entanglements = createLaneMap(NoLanes)
            {
              this.mutableSourceEagerHydrationData = null
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID()
              this.memoizedInteractions = new Set()
              this.pendingInteractionMap = new Map()
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = 'createBlockingRoot()'
                  break
                case ConcurrentRoot:
                  this._debugRootType = 'createRoot()'
                  break
                case LegacyRoot:
                  this._debugRootType = 'createLegacyRoot()'
                  break
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2)
            var uninitializedFiber = createHostRootFiber(tag)
            root2.current = uninitializedFiber
            uninitializedFiber.stateNode = root2
            initializeUpdateQueue(uninitializedFiber)
            return root2
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion
            var version2 = getVersion(mutableSource._source)
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version2]
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version2)
            }
          }
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : '' + key,
              children,
              containerInfo,
              implementation,
            }
          }
          var didWarnAboutNestedUpdates
          var didWarnAboutFindNodeInStrictMode
          {
            didWarnAboutNestedUpdates = false
            didWarnAboutFindNodeInStrictMode = {}
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject
            }
            var fiber = get(parentComponent)
            var parentContext = findCurrentUnmaskedContext(fiber)
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext)
              }
            }
            return parentContext
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component)
              if (fiber === void 0) {
                if (typeof component.render === 'function') {
                  {
                    {
                      throw Error('Unable to find node on an unmounted component.')
                    }
                  }
                } else {
                  {
                    {
                      throw Error('Argument appears to not be a ReactComponent. Keys: ' + Object.keys(component))
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber)
              if (hostFiber === null) {
                return null
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || 'Component'
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true
                  var previousFiber = current
                  try {
                    setCurrentFiber(hostFiber)
                    if (fiber.mode & StrictMode) {
                      error(
                        '%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node',
                        methodName,
                        methodName,
                        componentName
                      )
                    } else {
                      error(
                        '%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node',
                        methodName,
                        methodName,
                        componentName
                      )
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber)
                    } else {
                      resetCurrentFiber()
                    }
                  }
                }
              }
              return hostFiber.stateNode
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2)
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element)
            }
            var current$1 = container.current
            var eventTime = requestEventTime()
            {
              if (typeof jest !== 'undefined') {
                warnIfUnmockedScheduler(current$1)
                warnIfNotScopedWithMatchingAct(current$1)
              }
            }
            var lane = requestUpdateLane(current$1)
            var context = getContextForSubtree(parentComponent)
            if (container.context === null) {
              container.context = context
            } else {
              container.pendingContext = context
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true
                error(
                  'Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.',
                  getComponentName(current.type) || 'Unknown'
                )
              }
            }
            var update = createUpdate(eventTime, lane)
            update.payload = {
              element,
            }
            callback = callback === void 0 ? null : callback
            if (callback !== null) {
              {
                if (typeof callback !== 'function') {
                  error(
                    'render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.',
                    callback
                  )
                }
              }
              update.callback = callback
            }
            enqueueUpdate(current$1, update)
            scheduleUpdateOnFiber(current$1, lane, eventTime)
            return lane
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current
            if (!containerFiber.child) {
              return null
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode)
              default:
                return containerFiber.child.stateNode
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane)
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane)
            var alternate = fiber.alternate
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane)
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return
            }
            var eventTime = requestEventTime()
            var lane = InputDiscreteHydrationLane
            scheduleUpdateOnFiber(fiber, lane, eventTime)
            markRetryLaneIfNotHydrated(fiber, lane)
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return
            }
            var eventTime = requestEventTime()
            var lane = SelectiveHydrationLane
            scheduleUpdateOnFiber(fiber, lane, eventTime)
            markRetryLaneIfNotHydrated(fiber, lane)
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return
            }
            var eventTime = requestEventTime()
            var lane = requestUpdateLane(fiber)
            scheduleUpdateOnFiber(fiber, lane, eventTime)
            markRetryLaneIfNotHydrated(fiber, lane)
          }
          function runWithPriority$2(priority, fn) {
            try {
              setCurrentUpdateLanePriority(priority)
              return fn()
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber)
            if (hostFiber === null) {
              return null
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance
            }
            return hostFiber.stateNode
          }
          var shouldSuspendImpl = function (fiber) {
            return false
          }
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber)
          }
          var overrideHookState = null
          var overrideHookStateDeletePath = null
          var overrideHookStateRenamePath = null
          var overrideProps = null
          var overridePropsDeletePath = null
          var overridePropsRenamePath = null
          var scheduleUpdate = null
          var setSuspenseHandler = null
          {
            var copyWithDeleteImpl = function (obj, path, index2) {
              var key = path[index2]
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj)
              if (index2 + 1 === path.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1)
                } else {
                  delete updated[key]
                }
                return updated
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1)
              return updated
            }
            var copyWithDelete = function (obj, path) {
              return copyWithDeleteImpl(obj, path, 0)
            }
            var copyWithRenameImpl = function (obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2]
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj)
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2]
                updated[newKey] = updated[oldKey]
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1)
                } else {
                  delete updated[oldKey]
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1)
              }
              return updated
            }
            var copyWithRename = function (obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn('copyWithRename() expects paths of the same length')
                return
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn('copyWithRename() expects paths to be the same except for the deepest key')
                    return
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0)
            }
            var copyWithSetImpl = function (obj, path, index2, value) {
              if (index2 >= path.length) {
                return value
              }
              var key = path[index2]
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj)
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value)
              return updated
            }
            var copyWithSet = function (obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value)
            }
            var findHook = function (fiber, id) {
              var currentHook2 = fiber.memoizedState
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next
                id--
              }
              return currentHook2
            }
            overrideHookState = function (fiber, id, path, value) {
              var hook = findHook(fiber, id)
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value)
                hook.memoizedState = newState
                hook.baseState = newState
                fiber.memoizedProps = _assign({}, fiber.memoizedProps)
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
              }
            }
            overrideHookStateDeletePath = function (fiber, id, path) {
              var hook = findHook(fiber, id)
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path)
                hook.memoizedState = newState
                hook.baseState = newState
                fiber.memoizedProps = _assign({}, fiber.memoizedProps)
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
              }
            }
            overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id)
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath)
                hook.memoizedState = newState
                hook.baseState = newState
                fiber.memoizedProps = _assign({}, fiber.memoizedProps)
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
              }
            }
            overrideProps = function (fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value)
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
            }
            overridePropsDeletePath = function (fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path)
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
            }
            overridePropsRenamePath = function (fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath)
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
            }
            scheduleUpdate = function (fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
            }
            setSuspenseHandler = function (newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl
            }
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber)
            if (hostFiber === null) {
              return null
            }
            return hostFiber.stateNode
          }
          function emptyFindFiberByHostInstance(instance) {
            return null
          }
          function getCurrentFiberForDevTools() {
            return current
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools,
            })
          }
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2)
          }
          function ReactDOMBlockingRoot(container, tag, options2) {
            this._internalRoot = createRootImpl(container, tag, options2)
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
            var root2 = this._internalRoot
            {
              if (typeof arguments[1] === 'function') {
                error(
                  'render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().'
                )
              }
              var container = root2.containerInfo
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current)
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error(
                      "render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container."
                    )
                  }
                }
              }
            }
            updateContainer(children, root2, null, null)
          }
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
            {
              if (typeof arguments[0] === 'function') {
                error(
                  'unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().'
                )
              }
            }
            var root2 = this._internalRoot
            var container = root2.containerInfo
            updateContainer(null, root2, null, function () {
              unmarkContainerAsRoot(container)
            })
          }
          function createRootImpl(container, tag, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true
            var hydrationCallbacks = (options2 != null && options2.hydrationOptions) || null
            var mutableSources =
              (options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources) ||
              null
            var root2 = createContainer(container, tag, hydrate2)
            markContainerAsRoot(root2.current, container)
            var containerNodeType = container.nodeType
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container
              listenToAllSupportedEvents(rootContainerElement)
            }
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i]
                registerMutableSourceForHydration(root2, mutableSource)
              }
            }
            return root2
          }
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2)
          }
          function isValidContainer(node) {
            return !!(
              node &&
              (node.nodeType === ELEMENT_NODE ||
                node.nodeType === DOCUMENT_NODE ||
                node.nodeType === DOCUMENT_FRAGMENT_NODE ||
                (node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '))
            )
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner
          var topLevelUpdateWarnings
          var warnedAboutHydrateAPI = false
          {
            topLevelUpdateWarnings = function (container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current)
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error(
                      'render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.'
                    )
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer
              var rootEl = getReactRootElementInContainer(container)
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl))
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error(
                  'render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.'
                )
              }
              if (
                container.nodeType === ELEMENT_NODE &&
                container.tagName &&
                container.tagName.toUpperCase() === 'BODY'
              ) {
                error(
                  'render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.'
                )
              }
            }
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement
            } else {
              return container.firstChild
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container)
            return !!(
              rootElement &&
              rootElement.nodeType === ELEMENT_NODE &&
              rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME)
            )
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container)
            if (!shouldHydrate) {
              var warned = false
              var rootSibling
              while ((rootSibling = container.lastChild)) {
                {
                  if (
                    !warned &&
                    rootSibling.nodeType === ELEMENT_NODE &&
                    rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)
                  ) {
                    warned = true
                    error(
                      'render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.'
                    )
                  }
                }
                container.removeChild(rootSibling)
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true
                warn(
                  'render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.'
                )
              }
            }
            return createLegacyRoot(
              container,
              shouldHydrate
                ? {
                    hydrate: true,
                  }
                : void 0
            )
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== 'function') {
                error(
                  '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.',
                  callerName,
                  callback
                )
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container)
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, 'render')
            }
            var root2 = container._reactRootContainer
            var fiberRoot
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate)
              fiberRoot = root2._internalRoot
              if (typeof callback === 'function') {
                var originalCallback = callback
                callback = function () {
                  var instance = getPublicRootInstance(fiberRoot)
                  originalCallback.call(instance)
                }
              }
              unbatchedUpdates(function () {
                updateContainer(children, fiberRoot, parentComponent, callback)
              })
            } else {
              fiberRoot = root2._internalRoot
              if (typeof callback === 'function') {
                var _originalCallback = callback
                callback = function () {
                  var instance = getPublicRootInstance(fiberRoot)
                  _originalCallback.call(instance)
                }
              }
              updateContainer(children, fiberRoot, parentComponent, callback)
            }
            return getPublicRootInstance(fiberRoot)
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender
                if (!warnedAboutRefsInRender) {
                  error(
                    '%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.',
                    getComponentName(owner.type) || 'A component'
                  )
                }
                owner.stateNode._warnedAboutRefsInRender = true
              }
            }
            if (componentOrElement == null) {
              return null
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement
            }
            {
              return findHostInstanceWithWarning(componentOrElement, 'findDOMNode')
            }
          }
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error('Target container is not a DOM element.')
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0
              if (isModernRoot) {
                error(
                  'You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?'
                )
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback)
          }
          function render(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error('Target container is not a DOM element.')
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0
              if (isModernRoot) {
                error(
                  'You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?'
                )
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback)
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error('Target container is not a DOM element.')
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error('parentComponent must be a valid React Component')
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback)
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error('unmountComponentAtNode(...): Target container is not a DOM element.')
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0
              if (isModernRoot) {
                error(
                  'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?'
                )
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container)
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl)
                if (renderedByDifferentReact) {
                  error(
                    "unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React."
                  )
                }
              }
              unbatchedUpdates(function () {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
                  container._reactRootContainer = null
                  unmarkContainerAsRoot(container)
                })
              })
              return true
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container)
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl))
                var isContainerReactRoot =
                  container.nodeType === ELEMENT_NODE &&
                  isValidContainer(container.parentNode) &&
                  !!container.parentNode._reactRootContainer
                if (hasNonRootReactChild) {
                  error(
                    "unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s",
                    isContainerReactRoot
                      ? 'You may have accidentally passed in a React root node instead of its container.'
                      : 'Instead, have the parent component update its state and rerender in order to remove this component.'
                  )
                }
              }
              return false
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1)
          setAttemptContinuousHydration(attemptContinuousHydration$1)
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1)
          setAttemptHydrationAtPriority(runWithPriority$2)
          var didWarnAboutUnstableCreatePortal = false
          {
            if (
              typeof Map !== 'function' ||
              Map.prototype == null ||
              typeof Map.prototype.forEach !== 'function' ||
              typeof Set !== 'function' ||
              Set.prototype == null ||
              typeof Set.prototype.clear !== 'function' ||
              typeof Set.prototype.forEach !== 'function'
            ) {
              error(
                'React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills'
              )
            }
          }
          setRestoreImplementation(restoreControlledState$3)
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1)
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null
            if (!isValidContainer(container)) {
              {
                throw Error('Target container is not a DOM element.')
              }
            }
            return createPortal(children, container, null, key)
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback)
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true
                warn(
                  'The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.'
                )
              }
            }
            return createPortal$1(children, container, key)
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing,
            ],
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: 'react-dom',
          })
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (
                (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1) ||
                navigator.userAgent.indexOf('Firefox') > -1
              ) {
                var protocol = window.location.protocol
                if (/^(https?|file):$/.test(protocol)) {
                  console.info(
                    '%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools' +
                      (protocol === 'file:'
                        ? '\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq'
                        : ''),
                    'font-weight:bold'
                  )
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals
          exports.createPortal = createPortal$1
          exports.findDOMNode = findDOMNode
          exports.flushSync = flushSync
          exports.hydrate = hydrate
          exports.render = render
          exports.unmountComponentAtNode = unmountComponentAtNode
          exports.unstable_batchedUpdates = batchedUpdates$1
          exports.unstable_createPortal = unstable_createPortal
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer
          exports.version = ReactVersion
        })()
      }
    },
  })

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    'node_modules/react-dom/index.js'(exports, module2) {
      'use strict'
      if (false) {
        checkDCE()
        module2.exports = null
      } else {
        module2.exports = require_react_dom_development()
      }
    },
  })

  // node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    'node_modules/tslib/tslib.js'(exports, module2) {
      var __extends2
      var __assign2
      var __rest2
      var __decorate2
      var __param2
      var __metadata2
      var __awaiter2
      var __generator2
      var __exportStar2
      var __values2
      var __read2
      var __spread2
      var __spreadArrays2
      var __await2
      var __asyncGenerator2
      var __asyncDelegator2
      var __asyncValues2
      var __makeTemplateObject2
      var __importStar2
      var __importDefault2
      var __classPrivateFieldGet2
      var __classPrivateFieldSet2
      var __createBinding2
      ;(function (factory) {
        var root =
          typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {}
        if (typeof define === 'function' && define.amd) {
          define('tslib', ['exports'], function (exports2) {
            factory(createExporter(root, createExporter(exports2)))
          })
        } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
          factory(createExporter(root, createExporter(module2.exports)))
        } else {
          factory(createExporter(root))
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root) {
            if (typeof Object.create === 'function') {
              Object.defineProperty(exports2, '__esModule', { value: true })
            } else {
              exports2.__esModule = true
            }
          }
          return function (id, v) {
            return (exports2[id] = previous ? previous(id, v) : v)
          }
        }
      })(function (exporter) {
        var extendStatics =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function (d, b) {
              d.__proto__ = b
            }) ||
          function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]
          }
        __extends2 = function (d, b) {
          extendStatics(d, b)
          function __() {
            this.constructor = d
          }
          d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __())
        }
        __assign2 =
          Object.assign ||
          function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i]
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p]
            }
            return t
          }
        __rest2 = function (s, e) {
          var t = {}
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p]
          if (s != null && typeof Object.getOwnPropertySymbols === 'function')
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]]
            }
          return t
        }
        __decorate2 = function (decorators, target, key, desc) {
          var c = arguments.length,
            r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
            d
          if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
            r = Reflect.decorate(decorators, target, key, desc)
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r
          return c > 3 && r && Object.defineProperty(target, key, r), r
        }
        __param2 = function (paramIndex, decorator) {
          return function (target, key) {
            decorator(target, key, paramIndex)
          }
        }
        __metadata2 = function (metadataKey, metadataValue) {
          if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
            return Reflect.metadata(metadataKey, metadataValue)
        }
        __awaiter2 = function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value)
                })
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value))
              } catch (e) {
                reject(e)
              }
            }
            function rejected(value) {
              try {
                step(generator['throw'](value))
              } catch (e) {
                reject(e)
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected)
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next())
          })
        }
        __generator2 = function (thisArg, body) {
          var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1]
                return t[1]
              },
              trys: [],
              ops: [],
            },
            f,
            y,
            t,
            g
          return (
            (g = { next: verb(0), throw: verb(1), return: verb(2) }),
            typeof Symbol === 'function' &&
              (g[Symbol.iterator] = function () {
                return this
              }),
            g
          )
          function verb(n) {
            return function (v) {
              return step([n, v])
            }
          }
          function step(op) {
            if (f) throw new TypeError('Generator is already executing.')
            while (_)
              try {
                if (
                  ((f = 1),
                  y &&
                    (t =
                      op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                    !(t = t.call(y, op[1])).done)
                )
                  return t
                if (((y = 0), t)) op = [op[0] & 2, t.value]
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op
                    break
                  case 4:
                    _.label++
                    return { value: op[1], done: false }
                  case 5:
                    _.label++
                    y = op[1]
                    op = [0]
                    continue
                  case 7:
                    op = _.ops.pop()
                    _.trys.pop()
                    continue
                  default:
                    if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0
                      continue
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                      _.label = op[1]
                      break
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1]
                      t = op
                      break
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2]
                      _.ops.push(op)
                      break
                    }
                    if (t[2]) _.ops.pop()
                    _.trys.pop()
                    continue
                }
                op = body.call(thisArg, _)
              } catch (e) {
                op = [6, e]
                y = 0
              } finally {
                f = t = 0
              }
            if (op[0] & 5) throw op[1]
            return { value: op[0] ? op[1] : void 0, done: true }
          }
        }
        __createBinding2 = function (o, m, k, k2) {
          if (k2 === void 0) k2 = k
          o[k2] = m[k]
        }
        __exportStar2 = function (m, exports2) {
          for (var p in m) if (p !== 'default' && !exports2.hasOwnProperty(p)) exports2[p] = m[p]
        }
        __values2 = function (o) {
          var s = typeof Symbol === 'function' && Symbol.iterator,
            m = s && o[s],
            i = 0
          if (m) return m.call(o)
          if (o && typeof o.length === 'number')
            return {
              next: function () {
                if (o && i >= o.length) o = void 0
                return { value: o && o[i++], done: !o }
              },
            }
          throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.')
        }
        __read2 = function (o, n) {
          var m = typeof Symbol === 'function' && o[Symbol.iterator]
          if (!m) return o
          var i = m.call(o),
            r,
            ar = [],
            e
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value)
          } catch (error) {
            e = { error }
          } finally {
            try {
              if (r && !r.done && (m = i['return'])) m.call(i)
            } finally {
              if (e) throw e.error
            }
          }
          return ar
        }
        __spread2 = function () {
          for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read2(arguments[i]))
          return ar
        }
        __spreadArrays2 = function () {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j]
          return r
        }
        __await2 = function (v) {
          return this instanceof __await2 ? ((this.v = v), this) : new __await2(v)
        }
        __asyncGenerator2 = function (thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.')
          var g = generator.apply(thisArg, _arguments || []),
            i,
            q = []
          return (
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this
            }),
            i
          )
          function verb(n) {
            if (g[n])
              i[n] = function (v) {
                return new Promise(function (a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v)
                })
              }
          }
          function resume(n, v) {
            try {
              step(g[n](v))
            } catch (e) {
              settle(q[0][3], e)
            }
          }
          function step(r) {
            r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r)
          }
          function fulfill(value) {
            resume('next', value)
          }
          function reject(value) {
            resume('throw', value)
          }
          function settle(f, v) {
            if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1])
          }
        }
        __asyncDelegator2 = function (o) {
          var i, p
          return (
            (i = {}),
            verb('next'),
            verb('throw', function (e) {
              throw e
            }),
            verb('return'),
            (i[Symbol.iterator] = function () {
              return this
            }),
            i
          )
          function verb(n, f) {
            i[n] = o[n]
              ? function (v) {
                  return (p = !p) ? { value: __await2(o[n](v)), done: n === 'return' } : f ? f(v) : v
                }
              : f
          }
        }
        __asyncValues2 = function (o) {
          if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.')
          var m = o[Symbol.asyncIterator],
            i
          return m
            ? m.call(o)
            : ((o = typeof __values2 === 'function' ? __values2(o) : o[Symbol.iterator]()),
              (i = {}),
              verb('next'),
              verb('throw'),
              verb('return'),
              (i[Symbol.asyncIterator] = function () {
                return this
              }),
              i)
          function verb(n) {
            i[n] =
              o[n] &&
              function (v) {
                return new Promise(function (resolve, reject) {
                  ;(v = o[n](v)), settle(resolve, reject, v.done, v.value)
                })
              }
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function (v2) {
              resolve({ value: v2, done: d })
            }, reject)
          }
        }
        __makeTemplateObject2 = function (cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, 'raw', { value: raw })
          } else {
            cooked.raw = raw
          }
          return cooked
        }
        __importStar2 = function (mod) {
          if (mod && mod.__esModule) return mod
          var result = {}
          if (mod != null) {
            for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k]
          }
          result['default'] = mod
          return result
        }
        __importDefault2 = function (mod) {
          return mod && mod.__esModule ? mod : { default: mod }
        }
        __classPrivateFieldGet2 = function (receiver, privateMap) {
          if (!privateMap.has(receiver)) {
            throw new TypeError('attempted to get private field on non-instance')
          }
          return privateMap.get(receiver)
        }
        __classPrivateFieldSet2 = function (receiver, privateMap, value) {
          if (!privateMap.has(receiver)) {
            throw new TypeError('attempted to set private field on non-instance')
          }
          privateMap.set(receiver, value)
          return value
        }
        exporter('__extends', __extends2)
        exporter('__assign', __assign2)
        exporter('__rest', __rest2)
        exporter('__decorate', __decorate2)
        exporter('__param', __param2)
        exporter('__metadata', __metadata2)
        exporter('__awaiter', __awaiter2)
        exporter('__generator', __generator2)
        exporter('__exportStar', __exportStar2)
        exporter('__createBinding', __createBinding2)
        exporter('__values', __values2)
        exporter('__read', __read2)
        exporter('__spread', __spread2)
        exporter('__spreadArrays', __spreadArrays2)
        exporter('__await', __await2)
        exporter('__asyncGenerator', __asyncGenerator2)
        exporter('__asyncDelegator', __asyncDelegator2)
        exporter('__asyncValues', __asyncValues2)
        exporter('__makeTemplateObject', __makeTemplateObject2)
        exporter('__importStar', __importStar2)
        exporter('__importDefault', __importDefault2)
        exporter('__classPrivateFieldGet', __classPrivateFieldGet2)
        exporter('__classPrivateFieldSet', __classPrivateFieldSet2)
      })
    },
  })

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    'node_modules/react-is/cjs/react-is.development.js'(exports) {
      'use strict'
      if (true) {
        ;(function () {
          'use strict'
          var hasSymbol = typeof Symbol === 'function' && Symbol.for
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 60103
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 60107
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 60108
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 60114
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 60109
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 60110
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 60111
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 60111
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 60112
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 60113
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 60120
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 60117
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 60118
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 60119
          function isValidElementType(type) {
            return (
              typeof type === 'string' ||
              typeof type === 'function' ||
              type === REACT_FRAGMENT_TYPE ||
              type === REACT_CONCURRENT_MODE_TYPE ||
              type === REACT_PROFILER_TYPE ||
              type === REACT_STRICT_MODE_TYPE ||
              type === REACT_SUSPENSE_TYPE ||
              type === REACT_SUSPENSE_LIST_TYPE ||
              (typeof type === 'object' &&
                type !== null &&
                (type.$$typeof === REACT_LAZY_TYPE ||
                  type.$$typeof === REACT_MEMO_TYPE ||
                  type.$$typeof === REACT_PROVIDER_TYPE ||
                  type.$$typeof === REACT_CONTEXT_TYPE ||
                  type.$$typeof === REACT_FORWARD_REF_TYPE ||
                  type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
                  type.$$typeof === REACT_RESPONDER_TYPE ||
                  type.$$typeof === REACT_SCOPE_TYPE ||
                  type.$$typeof === REACT_BLOCK_TYPE))
            )
          }
          function typeOf(object) {
            if (typeof object === 'object' && object !== null) {
              var $$typeof = object.$$typeof
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type
                    default:
                      var $$typeofType = type && type.$$typeof
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType
                        default:
                          return $$typeof
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof
              }
            }
            return void 0
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE
          var ContextConsumer = REACT_CONTEXT_TYPE
          var ContextProvider = REACT_PROVIDER_TYPE
          var Element2 = REACT_ELEMENT_TYPE
          var ForwardRef = REACT_FORWARD_REF_TYPE
          var Fragment = REACT_FRAGMENT_TYPE
          var Lazy = REACT_LAZY_TYPE
          var Memo2 = REACT_MEMO_TYPE
          var Portal = REACT_PORTAL_TYPE
          var Profiler = REACT_PROFILER_TYPE
          var StrictMode = REACT_STRICT_MODE_TYPE
          var Suspense = REACT_SUSPENSE_TYPE
          var hasWarnedAboutDeprecatedIsAsyncMode = false
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true
                console['warn'](
                  'The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.'
                )
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE
          }
          function isElement2(object) {
            return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE
          }
          exports.AsyncMode = AsyncMode
          exports.ConcurrentMode = ConcurrentMode
          exports.ContextConsumer = ContextConsumer
          exports.ContextProvider = ContextProvider
          exports.Element = Element2
          exports.ForwardRef = ForwardRef
          exports.Fragment = Fragment
          exports.Lazy = Lazy
          exports.Memo = Memo2
          exports.Portal = Portal
          exports.Profiler = Profiler
          exports.StrictMode = StrictMode
          exports.Suspense = Suspense
          exports.isAsyncMode = isAsyncMode
          exports.isConcurrentMode = isConcurrentMode
          exports.isContextConsumer = isContextConsumer
          exports.isContextProvider = isContextProvider
          exports.isElement = isElement2
          exports.isForwardRef = isForwardRef
          exports.isFragment = isFragment
          exports.isLazy = isLazy
          exports.isMemo = isMemo
          exports.isPortal = isPortal
          exports.isProfiler = isProfiler
          exports.isStrictMode = isStrictMode
          exports.isSuspense = isSuspense
          exports.isValidElementType = isValidElementType
          exports.typeOf = typeOf
        })()
      }
    },
  })

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    'node_modules/react-is/index.js'(exports, module2) {
      'use strict'
      if (false) {
        module2.exports = null
      } else {
        module2.exports = require_react_is_development()
      }
    },
  })

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    'node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js'(exports, module2) {
      'use strict'
      var reactIs = require_react_is()
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true,
      }
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true,
      }
      var FORWARD_REF_STATICS = {
        $$typeof: true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
      }
      var MEMO_STATICS = {
        $$typeof: true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true,
      }
      var TYPE_STATICS = {}
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS
        }
        return TYPE_STATICS[component['$$typeof']] || REACT_STATICS
      }
      var defineProperty = Object.defineProperty
      var getOwnPropertyNames = Object.getOwnPropertyNames
      var getOwnPropertySymbols = Object.getOwnPropertySymbols
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor
      var getPrototypeOf = Object.getPrototypeOf
      var objectPrototype = Object.prototype
      function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== 'string') {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent)
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist)
            }
          }
          var keys = getOwnPropertyNames(sourceComponent)
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent))
          }
          var targetStatics = getStatics(targetComponent)
          var sourceStatics = getStatics(sourceComponent)
          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i]
            if (
              !KNOWN_STATICS[key] &&
              !(blacklist && blacklist[key]) &&
              !(sourceStatics && sourceStatics[key]) &&
              !(targetStatics && targetStatics[key])
            ) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key)
              try {
                defineProperty(targetComponent, key, descriptor)
              } catch (e) {}
            }
          }
        }
        return targetComponent
      }
      module2.exports = hoistNonReactStatics2
    },
  })

  // node_modules/popper.js/dist/umd/popper.js
  var require_popper = __commonJS({
    'node_modules/popper.js/dist/umd/popper.js'(exports, module2) {
      ;(function (global8, factory) {
        typeof exports === 'object' && typeof module2 !== 'undefined'
          ? (module2.exports = factory())
          : typeof define === 'function' && define.amd
          ? define(factory)
          : (global8.Popper = factory())
      })(exports, function () {
        'use strict'
        var isBrowser =
          typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined'
        var timeoutDuration = (function () {
          var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox']
          for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
            if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
              return 1
            }
          }
          return 0
        })()
        function microtaskDebounce(fn) {
          var called = false
          return function () {
            if (called) {
              return
            }
            called = true
            window.Promise.resolve().then(function () {
              called = false
              fn()
            })
          }
        }
        function taskDebounce(fn) {
          var scheduled = false
          return function () {
            if (!scheduled) {
              scheduled = true
              setTimeout(function () {
                scheduled = false
                fn()
              }, timeoutDuration)
            }
          }
        }
        var supportsMicroTasks = isBrowser && window.Promise
        var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce
        function isFunction(functionToCheck) {
          var getType = {}
          return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]'
        }
        function getStyleComputedProperty(element, property) {
          if (element.nodeType !== 1) {
            return []
          }
          var window2 = element.ownerDocument.defaultView
          var css = window2.getComputedStyle(element, null)
          return property ? css[property] : css
        }
        function getParentNode(element) {
          if (element.nodeName === 'HTML') {
            return element
          }
          return element.parentNode || element.host
        }
        function getScrollParent(element) {
          if (!element) {
            return document.body
          }
          switch (element.nodeName) {
            case 'HTML':
            case 'BODY':
              return element.ownerDocument.body
            case '#document':
              return element.body
          }
          var _getStyleComputedProp = getStyleComputedProperty(element),
            overflow = _getStyleComputedProp.overflow,
            overflowX = _getStyleComputedProp.overflowX,
            overflowY = _getStyleComputedProp.overflowY
          if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
            return element
          }
          return getScrollParent(getParentNode(element))
        }
        function getReferenceNode(reference) {
          return reference && reference.referenceNode ? reference.referenceNode : reference
        }
        var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode)
        var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent)
        function isIE(version2) {
          if (version2 === 11) {
            return isIE11
          }
          if (version2 === 10) {
            return isIE10
          }
          return isIE11 || isIE10
        }
        function getOffsetParent(element) {
          if (!element) {
            return document.documentElement
          }
          var noOffsetParent = isIE(10) ? document.body : null
          var offsetParent = element.offsetParent || null
          while (offsetParent === noOffsetParent && element.nextElementSibling) {
            offsetParent = (element = element.nextElementSibling).offsetParent
          }
          var nodeName = offsetParent && offsetParent.nodeName
          if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
            return element ? element.ownerDocument.documentElement : document.documentElement
          }
          if (
            ['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 &&
            getStyleComputedProperty(offsetParent, 'position') === 'static'
          ) {
            return getOffsetParent(offsetParent)
          }
          return offsetParent
        }
        function isOffsetContainer(element) {
          var nodeName = element.nodeName
          if (nodeName === 'BODY') {
            return false
          }
          return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element
        }
        function getRoot(node) {
          if (node.parentNode !== null) {
            return getRoot(node.parentNode)
          }
          return node
        }
        function findCommonOffsetParent(element1, element2) {
          if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
            return document.documentElement
          }
          var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING
          var start = order ? element1 : element2
          var end = order ? element2 : element1
          var range = document.createRange()
          range.setStart(start, 0)
          range.setEnd(end, 0)
          var commonAncestorContainer = range.commonAncestorContainer
          if ((element1 !== commonAncestorContainer && element2 !== commonAncestorContainer) || start.contains(end)) {
            if (isOffsetContainer(commonAncestorContainer)) {
              return commonAncestorContainer
            }
            return getOffsetParent(commonAncestorContainer)
          }
          var element1root = getRoot(element1)
          if (element1root.host) {
            return findCommonOffsetParent(element1root.host, element2)
          } else {
            return findCommonOffsetParent(element1, getRoot(element2).host)
          }
        }
        function getScroll(element) {
          var side = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'top'
          var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft'
          var nodeName = element.nodeName
          if (nodeName === 'BODY' || nodeName === 'HTML') {
            var html = element.ownerDocument.documentElement
            var scrollingElement = element.ownerDocument.scrollingElement || html
            return scrollingElement[upperSide]
          }
          return element[upperSide]
        }
        function includeScroll(rect, element) {
          var subtract = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false
          var scrollTop = getScroll(element, 'top')
          var scrollLeft = getScroll(element, 'left')
          var modifier = subtract ? -1 : 1
          rect.top += scrollTop * modifier
          rect.bottom += scrollTop * modifier
          rect.left += scrollLeft * modifier
          rect.right += scrollLeft * modifier
          return rect
        }
        function getBordersSize(styles, axis) {
          var sideA = axis === 'x' ? 'Left' : 'Top'
          var sideB = sideA === 'Left' ? 'Right' : 'Bottom'
          return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width'])
        }
        function getSize(axis, body, html, computedStyle) {
          return Math.max(
            body['offset' + axis],
            body['scroll' + axis],
            html['client' + axis],
            html['offset' + axis],
            html['scroll' + axis],
            isIE(10)
              ? parseInt(html['offset' + axis]) +
                  parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) +
                  parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')])
              : 0
          )
        }
        function getWindowSizes(document2) {
          var body = document2.body
          var html = document2.documentElement
          var computedStyle = isIE(10) && getComputedStyle(html)
          return {
            height: getSize('Height', body, html, computedStyle),
            width: getSize('Width', body, html, computedStyle),
          }
        }
        var classCallCheck = function (instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function')
          }
        }
        var createClass = (function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i]
              descriptor.enumerable = descriptor.enumerable || false
              descriptor.configurable = true
              if ('value' in descriptor) descriptor.writable = true
              Object.defineProperty(target, descriptor.key, descriptor)
            }
          }
          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps)
            if (staticProps) defineProperties(Constructor, staticProps)
            return Constructor
          }
        })()
        var defineProperty = function (obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true,
            })
          } else {
            obj[key] = value
          }
          return obj
        }
        var _extends =
          Object.assign ||
          function (target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i]
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key]
                }
              }
            }
            return target
          }
        function getClientRect(offsets) {
          return _extends({}, offsets, {
            right: offsets.left + offsets.width,
            bottom: offsets.top + offsets.height,
          })
        }
        function getBoundingClientRect(element) {
          var rect = {}
          try {
            if (isIE(10)) {
              rect = element.getBoundingClientRect()
              var scrollTop = getScroll(element, 'top')
              var scrollLeft = getScroll(element, 'left')
              rect.top += scrollTop
              rect.left += scrollLeft
              rect.bottom += scrollTop
              rect.right += scrollLeft
            } else {
              rect = element.getBoundingClientRect()
            }
          } catch (e) {}
          var result = {
            left: rect.left,
            top: rect.top,
            width: rect.right - rect.left,
            height: rect.bottom - rect.top,
          }
          var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {}
          var width = sizes.width || element.clientWidth || result.width
          var height = sizes.height || element.clientHeight || result.height
          var horizScrollbar = element.offsetWidth - width
          var vertScrollbar = element.offsetHeight - height
          if (horizScrollbar || vertScrollbar) {
            var styles = getStyleComputedProperty(element)
            horizScrollbar -= getBordersSize(styles, 'x')
            vertScrollbar -= getBordersSize(styles, 'y')
            result.width -= horizScrollbar
            result.height -= vertScrollbar
          }
          return getClientRect(result)
        }
        function getOffsetRectRelativeToArbitraryNode(children, parent) {
          var fixedPosition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false
          var isIE102 = isIE(10)
          var isHTML = parent.nodeName === 'HTML'
          var childrenRect = getBoundingClientRect(children)
          var parentRect = getBoundingClientRect(parent)
          var scrollParent = getScrollParent(children)
          var styles = getStyleComputedProperty(parent)
          var borderTopWidth = parseFloat(styles.borderTopWidth)
          var borderLeftWidth = parseFloat(styles.borderLeftWidth)
          if (fixedPosition && isHTML) {
            parentRect.top = Math.max(parentRect.top, 0)
            parentRect.left = Math.max(parentRect.left, 0)
          }
          var offsets = getClientRect({
            top: childrenRect.top - parentRect.top - borderTopWidth,
            left: childrenRect.left - parentRect.left - borderLeftWidth,
            width: childrenRect.width,
            height: childrenRect.height,
          })
          offsets.marginTop = 0
          offsets.marginLeft = 0
          if (!isIE102 && isHTML) {
            var marginTop = parseFloat(styles.marginTop)
            var marginLeft = parseFloat(styles.marginLeft)
            offsets.top -= borderTopWidth - marginTop
            offsets.bottom -= borderTopWidth - marginTop
            offsets.left -= borderLeftWidth - marginLeft
            offsets.right -= borderLeftWidth - marginLeft
            offsets.marginTop = marginTop
            offsets.marginLeft = marginLeft
          }
          if (
            isIE102 && !fixedPosition
              ? parent.contains(scrollParent)
              : parent === scrollParent && scrollParent.nodeName !== 'BODY'
          ) {
            offsets = includeScroll(offsets, parent)
          }
          return offsets
        }
        function getViewportOffsetRectRelativeToArtbitraryNode(element) {
          var excludeScroll = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false
          var html = element.ownerDocument.documentElement
          var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html)
          var width = Math.max(html.clientWidth, window.innerWidth || 0)
          var height = Math.max(html.clientHeight, window.innerHeight || 0)
          var scrollTop = !excludeScroll ? getScroll(html) : 0
          var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0
          var offset2 = {
            top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
            left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
            width,
            height,
          }
          return getClientRect(offset2)
        }
        function isFixed(element) {
          var nodeName = element.nodeName
          if (nodeName === 'BODY' || nodeName === 'HTML') {
            return false
          }
          if (getStyleComputedProperty(element, 'position') === 'fixed') {
            return true
          }
          var parentNode = getParentNode(element)
          if (!parentNode) {
            return false
          }
          return isFixed(parentNode)
        }
        function getFixedPositionOffsetParent(element) {
          if (!element || !element.parentElement || isIE()) {
            return document.documentElement
          }
          var el = element.parentElement
          while (el && getStyleComputedProperty(el, 'transform') === 'none') {
            el = el.parentElement
          }
          return el || document.documentElement
        }
        function getBoundaries(popper, reference, padding, boundariesElement) {
          var fixedPosition = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false
          var boundaries = { top: 0, left: 0 }
          var offsetParent = fixedPosition
            ? getFixedPositionOffsetParent(popper)
            : findCommonOffsetParent(popper, getReferenceNode(reference))
          if (boundariesElement === 'viewport') {
            boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition)
          } else {
            var boundariesNode = void 0
            if (boundariesElement === 'scrollParent') {
              boundariesNode = getScrollParent(getParentNode(reference))
              if (boundariesNode.nodeName === 'BODY') {
                boundariesNode = popper.ownerDocument.documentElement
              }
            } else if (boundariesElement === 'window') {
              boundariesNode = popper.ownerDocument.documentElement
            } else {
              boundariesNode = boundariesElement
            }
            var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition)
            if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
              var _getWindowSizes = getWindowSizes(popper.ownerDocument),
                height = _getWindowSizes.height,
                width = _getWindowSizes.width
              boundaries.top += offsets.top - offsets.marginTop
              boundaries.bottom = height + offsets.top
              boundaries.left += offsets.left - offsets.marginLeft
              boundaries.right = width + offsets.left
            } else {
              boundaries = offsets
            }
          }
          padding = padding || 0
          var isPaddingNumber = typeof padding === 'number'
          boundaries.left += isPaddingNumber ? padding : padding.left || 0
          boundaries.top += isPaddingNumber ? padding : padding.top || 0
          boundaries.right -= isPaddingNumber ? padding : padding.right || 0
          boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0
          return boundaries
        }
        function getArea(_ref) {
          var width = _ref.width,
            height = _ref.height
          return width * height
        }
        function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
          var padding = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0
          if (placement.indexOf('auto') === -1) {
            return placement
          }
          var boundaries = getBoundaries(popper, reference, padding, boundariesElement)
          var rects = {
            top: {
              width: boundaries.width,
              height: refRect.top - boundaries.top,
            },
            right: {
              width: boundaries.right - refRect.right,
              height: boundaries.height,
            },
            bottom: {
              width: boundaries.width,
              height: boundaries.bottom - refRect.bottom,
            },
            left: {
              width: refRect.left - boundaries.left,
              height: boundaries.height,
            },
          }
          var sortedAreas = Object.keys(rects)
            .map(function (key) {
              return _extends(
                {
                  key,
                },
                rects[key],
                {
                  area: getArea(rects[key]),
                }
              )
            })
            .sort(function (a, b) {
              return b.area - a.area
            })
          var filteredAreas = sortedAreas.filter(function (_ref2) {
            var width = _ref2.width,
              height = _ref2.height
            return width >= popper.clientWidth && height >= popper.clientHeight
          })
          var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key
          var variation = placement.split('-')[1]
          return computedPlacement + (variation ? '-' + variation : '')
        }
        function getReferenceOffsets(state, popper, reference) {
          var fixedPosition = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null
          var commonOffsetParent = fixedPosition
            ? getFixedPositionOffsetParent(popper)
            : findCommonOffsetParent(popper, getReferenceNode(reference))
          return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition)
        }
        function getOuterSizes(element) {
          var window2 = element.ownerDocument.defaultView
          var styles = window2.getComputedStyle(element)
          var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0)
          var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0)
          var result = {
            width: element.offsetWidth + y,
            height: element.offsetHeight + x,
          }
          return result
        }
        function getOppositePlacement(placement) {
          var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' }
          return placement.replace(/left|right|bottom|top/g, function (matched) {
            return hash[matched]
          })
        }
        function getPopperOffsets(popper, referenceOffsets, placement) {
          placement = placement.split('-')[0]
          var popperRect = getOuterSizes(popper)
          var popperOffsets = {
            width: popperRect.width,
            height: popperRect.height,
          }
          var isHoriz = ['right', 'left'].indexOf(placement) !== -1
          var mainSide = isHoriz ? 'top' : 'left'
          var secondarySide = isHoriz ? 'left' : 'top'
          var measurement = isHoriz ? 'height' : 'width'
          var secondaryMeasurement = !isHoriz ? 'height' : 'width'
          popperOffsets[mainSide] =
            referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2
          if (placement === secondarySide) {
            popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement]
          } else {
            popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)]
          }
          return popperOffsets
        }
        function find(arr, check) {
          if (Array.prototype.find) {
            return arr.find(check)
          }
          return arr.filter(check)[0]
        }
        function findIndex(arr, prop, value) {
          if (Array.prototype.findIndex) {
            return arr.findIndex(function (cur) {
              return cur[prop] === value
            })
          }
          var match = find(arr, function (obj) {
            return obj[prop] === value
          })
          return arr.indexOf(match)
        }
        function runModifiers(modifiers2, data, ends) {
          var modifiersToRun = ends === void 0 ? modifiers2 : modifiers2.slice(0, findIndex(modifiers2, 'name', ends))
          modifiersToRun.forEach(function (modifier) {
            if (modifier['function']) {
              console.warn('`modifier.function` is deprecated, use `modifier.fn`!')
            }
            var fn = modifier['function'] || modifier.fn
            if (modifier.enabled && isFunction(fn)) {
              data.offsets.popper = getClientRect(data.offsets.popper)
              data.offsets.reference = getClientRect(data.offsets.reference)
              data = fn(data, modifier)
            }
          })
          return data
        }
        function update() {
          if (this.state.isDestroyed) {
            return
          }
          var data = {
            instance: this,
            styles: {},
            arrowStyles: {},
            attributes: {},
            flipped: false,
            offsets: {},
          }
          data.offsets.reference = getReferenceOffsets(
            this.state,
            this.popper,
            this.reference,
            this.options.positionFixed
          )
          data.placement = computeAutoPlacement(
            this.options.placement,
            data.offsets.reference,
            this.popper,
            this.reference,
            this.options.modifiers.flip.boundariesElement,
            this.options.modifiers.flip.padding
          )
          data.originalPlacement = data.placement
          data.positionFixed = this.options.positionFixed
          data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement)
          data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute'
          data = runModifiers(this.modifiers, data)
          if (!this.state.isCreated) {
            this.state.isCreated = true
            this.options.onCreate(data)
          } else {
            this.options.onUpdate(data)
          }
        }
        function isModifierEnabled(modifiers2, modifierName) {
          return modifiers2.some(function (_ref) {
            var name = _ref.name,
              enabled = _ref.enabled
            return enabled && name === modifierName
          })
        }
        function getSupportedPropertyName(property) {
          var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O']
          var upperProp = property.charAt(0).toUpperCase() + property.slice(1)
          for (var i = 0; i < prefixes.length; i++) {
            var prefix = prefixes[i]
            var toCheck = prefix ? '' + prefix + upperProp : property
            if (typeof document.body.style[toCheck] !== 'undefined') {
              return toCheck
            }
          }
          return null
        }
        function destroy() {
          this.state.isDestroyed = true
          if (isModifierEnabled(this.modifiers, 'applyStyle')) {
            this.popper.removeAttribute('x-placement')
            this.popper.style.position = ''
            this.popper.style.top = ''
            this.popper.style.left = ''
            this.popper.style.right = ''
            this.popper.style.bottom = ''
            this.popper.style.willChange = ''
            this.popper.style[getSupportedPropertyName('transform')] = ''
          }
          this.disableEventListeners()
          if (this.options.removeOnDestroy) {
            this.popper.parentNode.removeChild(this.popper)
          }
          return this
        }
        function getWindow(element) {
          var ownerDocument = element.ownerDocument
          return ownerDocument ? ownerDocument.defaultView : window
        }
        function attachToScrollParents(scrollParent, event, callback, scrollParents) {
          var isBody = scrollParent.nodeName === 'BODY'
          var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent
          target.addEventListener(event, callback, { passive: true })
          if (!isBody) {
            attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents)
          }
          scrollParents.push(target)
        }
        function setupEventListeners(reference, options, state, updateBound) {
          state.updateBound = updateBound
          getWindow(reference).addEventListener('resize', state.updateBound, { passive: true })
          var scrollElement = getScrollParent(reference)
          attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents)
          state.scrollElement = scrollElement
          state.eventsEnabled = true
          return state
        }
        function enableEventListeners() {
          if (!this.state.eventsEnabled) {
            this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate)
          }
        }
        function removeEventListeners(reference, state) {
          getWindow(reference).removeEventListener('resize', state.updateBound)
          state.scrollParents.forEach(function (target) {
            target.removeEventListener('scroll', state.updateBound)
          })
          state.updateBound = null
          state.scrollParents = []
          state.scrollElement = null
          state.eventsEnabled = false
          return state
        }
        function disableEventListeners() {
          if (this.state.eventsEnabled) {
            cancelAnimationFrame(this.scheduleUpdate)
            this.state = removeEventListeners(this.reference, this.state)
          }
        }
        function isNumeric(n) {
          return n !== '' && !isNaN(parseFloat(n)) && isFinite(n)
        }
        function setStyles(element, styles) {
          Object.keys(styles).forEach(function (prop) {
            var unit = ''
            if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
              unit = 'px'
            }
            element.style[prop] = styles[prop] + unit
          })
        }
        function setAttributes(element, attributes) {
          Object.keys(attributes).forEach(function (prop) {
            var value = attributes[prop]
            if (value !== false) {
              element.setAttribute(prop, attributes[prop])
            } else {
              element.removeAttribute(prop)
            }
          })
        }
        function applyStyle(data) {
          setStyles(data.instance.popper, data.styles)
          setAttributes(data.instance.popper, data.attributes)
          if (data.arrowElement && Object.keys(data.arrowStyles).length) {
            setStyles(data.arrowElement, data.arrowStyles)
          }
          return data
        }
        function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
          var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed)
          var placement = computeAutoPlacement(
            options.placement,
            referenceOffsets,
            popper,
            reference,
            options.modifiers.flip.boundariesElement,
            options.modifiers.flip.padding
          )
          popper.setAttribute('x-placement', placement)
          setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' })
          return options
        }
        function getRoundedOffsets(data, shouldRound) {
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference
          var round = Math.round,
            floor = Math.floor
          var noRound = function noRound2(v) {
            return v
          }
          var referenceWidth = round(reference.width)
          var popperWidth = round(popper.width)
          var isVertical = ['left', 'right'].indexOf(data.placement) !== -1
          var isVariation = data.placement.indexOf('-') !== -1
          var sameWidthParity = referenceWidth % 2 === popperWidth % 2
          var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1
          var horizontalToInteger = !shouldRound
            ? noRound
            : isVertical || isVariation || sameWidthParity
            ? round
            : floor
          var verticalToInteger = !shouldRound ? noRound : round
          return {
            left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
            top: verticalToInteger(popper.top),
            bottom: verticalToInteger(popper.bottom),
            right: horizontalToInteger(popper.right),
          }
        }
        var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent)
        function computeStyle(data, options) {
          var x = options.x,
            y = options.y
          var popper = data.offsets.popper
          var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
            return modifier.name === 'applyStyle'
          }).gpuAcceleration
          if (legacyGpuAccelerationOption !== void 0) {
            console.warn(
              'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!'
            )
          }
          var gpuAcceleration =
            legacyGpuAccelerationOption !== void 0 ? legacyGpuAccelerationOption : options.gpuAcceleration
          var offsetParent = getOffsetParent(data.instance.popper)
          var offsetParentRect = getBoundingClientRect(offsetParent)
          var styles = {
            position: popper.position,
          }
          var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox)
          var sideA = x === 'bottom' ? 'top' : 'bottom'
          var sideB = y === 'right' ? 'left' : 'right'
          var prefixedProperty = getSupportedPropertyName('transform')
          var left = void 0,
            top = void 0
          if (sideA === 'bottom') {
            if (offsetParent.nodeName === 'HTML') {
              top = -offsetParent.clientHeight + offsets.bottom
            } else {
              top = -offsetParentRect.height + offsets.bottom
            }
          } else {
            top = offsets.top
          }
          if (sideB === 'right') {
            if (offsetParent.nodeName === 'HTML') {
              left = -offsetParent.clientWidth + offsets.right
            } else {
              left = -offsetParentRect.width + offsets.right
            }
          } else {
            left = offsets.left
          }
          if (gpuAcceleration && prefixedProperty) {
            styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)'
            styles[sideA] = 0
            styles[sideB] = 0
            styles.willChange = 'transform'
          } else {
            var invertTop = sideA === 'bottom' ? -1 : 1
            var invertLeft = sideB === 'right' ? -1 : 1
            styles[sideA] = top * invertTop
            styles[sideB] = left * invertLeft
            styles.willChange = sideA + ', ' + sideB
          }
          var attributes = {
            'x-placement': data.placement,
          }
          data.attributes = _extends({}, attributes, data.attributes)
          data.styles = _extends({}, styles, data.styles)
          data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles)
          return data
        }
        function isModifierRequired(modifiers2, requestingName, requestedName) {
          var requesting = find(modifiers2, function (_ref) {
            var name = _ref.name
            return name === requestingName
          })
          var isRequired =
            !!requesting &&
            modifiers2.some(function (modifier) {
              return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order
            })
          if (!isRequired) {
            var _requesting = '`' + requestingName + '`'
            var requested = '`' + requestedName + '`'
            console.warn(
              requested +
                ' modifier is required by ' +
                _requesting +
                ' modifier in order to work, be sure to include it before ' +
                _requesting +
                '!'
            )
          }
          return isRequired
        }
        function arrow(data, options) {
          var _data$offsets$arrow
          if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
            return data
          }
          var arrowElement = options.element
          if (typeof arrowElement === 'string') {
            arrowElement = data.instance.popper.querySelector(arrowElement)
            if (!arrowElement) {
              return data
            }
          } else {
            if (!data.instance.popper.contains(arrowElement)) {
              console.warn('WARNING: `arrow.element` must be child of its popper element!')
              return data
            }
          }
          var placement = data.placement.split('-')[0]
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference
          var isVertical = ['left', 'right'].indexOf(placement) !== -1
          var len = isVertical ? 'height' : 'width'
          var sideCapitalized = isVertical ? 'Top' : 'Left'
          var side = sideCapitalized.toLowerCase()
          var altSide = isVertical ? 'left' : 'top'
          var opSide = isVertical ? 'bottom' : 'right'
          var arrowElementSize = getOuterSizes(arrowElement)[len]
          if (reference[opSide] - arrowElementSize < popper[side]) {
            data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize)
          }
          if (reference[side] + arrowElementSize > popper[opSide]) {
            data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide]
          }
          data.offsets.popper = getClientRect(data.offsets.popper)
          var center = reference[side] + reference[len] / 2 - arrowElementSize / 2
          var css = getStyleComputedProperty(data.instance.popper)
          var popperMarginSide = parseFloat(css['margin' + sideCapitalized])
          var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'])
          var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide
          sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0)
          data.arrowElement = arrowElement
          data.offsets.arrow =
            ((_data$offsets$arrow = {}),
            defineProperty(_data$offsets$arrow, side, Math.round(sideValue)),
            defineProperty(_data$offsets$arrow, altSide, ''),
            _data$offsets$arrow)
          return data
        }
        function getOppositeVariation(variation) {
          if (variation === 'end') {
            return 'start'
          } else if (variation === 'start') {
            return 'end'
          }
          return variation
        }
        var placements = [
          'auto-start',
          'auto',
          'auto-end',
          'top-start',
          'top',
          'top-end',
          'right-start',
          'right',
          'right-end',
          'bottom-end',
          'bottom',
          'bottom-start',
          'left-end',
          'left',
          'left-start',
        ]
        var validPlacements = placements.slice(3)
        function clockwise(placement) {
          var counter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false
          var index = validPlacements.indexOf(placement)
          var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index))
          return counter ? arr.reverse() : arr
        }
        var BEHAVIORS = {
          FLIP: 'flip',
          CLOCKWISE: 'clockwise',
          COUNTERCLOCKWISE: 'counterclockwise',
        }
        function flip(data, options) {
          if (isModifierEnabled(data.instance.modifiers, 'inner')) {
            return data
          }
          if (data.flipped && data.placement === data.originalPlacement) {
            return data
          }
          var boundaries = getBoundaries(
            data.instance.popper,
            data.instance.reference,
            options.padding,
            options.boundariesElement,
            data.positionFixed
          )
          var placement = data.placement.split('-')[0]
          var placementOpposite = getOppositePlacement(placement)
          var variation = data.placement.split('-')[1] || ''
          var flipOrder = []
          switch (options.behavior) {
            case BEHAVIORS.FLIP:
              flipOrder = [placement, placementOpposite]
              break
            case BEHAVIORS.CLOCKWISE:
              flipOrder = clockwise(placement)
              break
            case BEHAVIORS.COUNTERCLOCKWISE:
              flipOrder = clockwise(placement, true)
              break
            default:
              flipOrder = options.behavior
          }
          flipOrder.forEach(function (step, index) {
            if (placement !== step || flipOrder.length === index + 1) {
              return data
            }
            placement = data.placement.split('-')[0]
            placementOpposite = getOppositePlacement(placement)
            var popperOffsets = data.offsets.popper
            var refOffsets = data.offsets.reference
            var floor = Math.floor
            var overlapsRef =
              (placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left)) ||
              (placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right)) ||
              (placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top)) ||
              (placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom))
            var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left)
            var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right)
            var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top)
            var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom)
            var overflowsBoundaries =
              (placement === 'left' && overflowsLeft) ||
              (placement === 'right' && overflowsRight) ||
              (placement === 'top' && overflowsTop) ||
              (placement === 'bottom' && overflowsBottom)
            var isVertical = ['top', 'bottom'].indexOf(placement) !== -1
            var flippedVariationByRef =
              !!options.flipVariations &&
              ((isVertical && variation === 'start' && overflowsLeft) ||
                (isVertical && variation === 'end' && overflowsRight) ||
                (!isVertical && variation === 'start' && overflowsTop) ||
                (!isVertical && variation === 'end' && overflowsBottom))
            var flippedVariationByContent =
              !!options.flipVariationsByContent &&
              ((isVertical && variation === 'start' && overflowsRight) ||
                (isVertical && variation === 'end' && overflowsLeft) ||
                (!isVertical && variation === 'start' && overflowsBottom) ||
                (!isVertical && variation === 'end' && overflowsTop))
            var flippedVariation = flippedVariationByRef || flippedVariationByContent
            if (overlapsRef || overflowsBoundaries || flippedVariation) {
              data.flipped = true
              if (overlapsRef || overflowsBoundaries) {
                placement = flipOrder[index + 1]
              }
              if (flippedVariation) {
                variation = getOppositeVariation(variation)
              }
              data.placement = placement + (variation ? '-' + variation : '')
              data.offsets.popper = _extends(
                {},
                data.offsets.popper,
                getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement)
              )
              data = runModifiers(data.instance.modifiers, data, 'flip')
            }
          })
          return data
        }
        function keepTogether(data) {
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference
          var placement = data.placement.split('-')[0]
          var floor = Math.floor
          var isVertical = ['top', 'bottom'].indexOf(placement) !== -1
          var side = isVertical ? 'right' : 'bottom'
          var opSide = isVertical ? 'left' : 'top'
          var measurement = isVertical ? 'width' : 'height'
          if (popper[side] < floor(reference[opSide])) {
            data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement]
          }
          if (popper[opSide] > floor(reference[side])) {
            data.offsets.popper[opSide] = floor(reference[side])
          }
          return data
        }
        function toValue(str, measurement, popperOffsets, referenceOffsets) {
          var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/)
          var value = +split[1]
          var unit = split[2]
          if (!value) {
            return str
          }
          if (unit.indexOf('%') === 0) {
            var element = void 0
            switch (unit) {
              case '%p':
                element = popperOffsets
                break
              case '%':
              case '%r':
              default:
                element = referenceOffsets
            }
            var rect = getClientRect(element)
            return (rect[measurement] / 100) * value
          } else if (unit === 'vh' || unit === 'vw') {
            var size = void 0
            if (unit === 'vh') {
              size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0)
            } else {
              size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)
            }
            return (size / 100) * value
          } else {
            return value
          }
        }
        function parseOffset(offset2, popperOffsets, referenceOffsets, basePlacement) {
          var offsets = [0, 0]
          var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1
          var fragments = offset2.split(/(\+|\-)/).map(function (frag) {
            return frag.trim()
          })
          var divider = fragments.indexOf(
            find(fragments, function (frag) {
              return frag.search(/,|\s/) !== -1
            })
          )
          if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
            console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.')
          }
          var splitRegex = /\s*,\s*|\s+/
          var ops =
            divider !== -1
              ? [
                  fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]),
                  [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1)),
                ]
              : [fragments]
          ops = ops.map(function (op, index) {
            var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width'
            var mergeWithPrevious = false
            return op
              .reduce(function (a, b) {
                if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
                  a[a.length - 1] = b
                  mergeWithPrevious = true
                  return a
                } else if (mergeWithPrevious) {
                  a[a.length - 1] += b
                  mergeWithPrevious = false
                  return a
                } else {
                  return a.concat(b)
                }
              }, [])
              .map(function (str) {
                return toValue(str, measurement, popperOffsets, referenceOffsets)
              })
          })
          ops.forEach(function (op, index) {
            op.forEach(function (frag, index2) {
              if (isNumeric(frag)) {
                offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1)
              }
            })
          })
          return offsets
        }
        function offset(data, _ref) {
          var offset2 = _ref.offset
          var placement = data.placement,
            _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference
          var basePlacement = placement.split('-')[0]
          var offsets = void 0
          if (isNumeric(+offset2)) {
            offsets = [+offset2, 0]
          } else {
            offsets = parseOffset(offset2, popper, reference, basePlacement)
          }
          if (basePlacement === 'left') {
            popper.top += offsets[0]
            popper.left -= offsets[1]
          } else if (basePlacement === 'right') {
            popper.top += offsets[0]
            popper.left += offsets[1]
          } else if (basePlacement === 'top') {
            popper.left += offsets[0]
            popper.top -= offsets[1]
          } else if (basePlacement === 'bottom') {
            popper.left += offsets[0]
            popper.top += offsets[1]
          }
          data.popper = popper
          return data
        }
        function preventOverflow(data, options) {
          var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper)
          if (data.instance.reference === boundariesElement) {
            boundariesElement = getOffsetParent(boundariesElement)
          }
          var transformProp = getSupportedPropertyName('transform')
          var popperStyles = data.instance.popper.style
          var top = popperStyles.top,
            left = popperStyles.left,
            transform = popperStyles[transformProp]
          popperStyles.top = ''
          popperStyles.left = ''
          popperStyles[transformProp] = ''
          var boundaries = getBoundaries(
            data.instance.popper,
            data.instance.reference,
            options.padding,
            boundariesElement,
            data.positionFixed
          )
          popperStyles.top = top
          popperStyles.left = left
          popperStyles[transformProp] = transform
          options.boundaries = boundaries
          var order = options.priority
          var popper = data.offsets.popper
          var check = {
            primary: function primary(placement) {
              var value = popper[placement]
              if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
                value = Math.max(popper[placement], boundaries[placement])
              }
              return defineProperty({}, placement, value)
            },
            secondary: function secondary(placement) {
              var mainSide = placement === 'right' ? 'left' : 'top'
              var value = popper[mainSide]
              if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
                value = Math.min(
                  popper[mainSide],
                  boundaries[placement] - (placement === 'right' ? popper.width : popper.height)
                )
              }
              return defineProperty({}, mainSide, value)
            },
          }
          order.forEach(function (placement) {
            var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary'
            popper = _extends({}, popper, check[side](placement))
          })
          data.offsets.popper = popper
          return data
        }
        function shift(data) {
          var placement = data.placement
          var basePlacement = placement.split('-')[0]
          var shiftvariation = placement.split('-')[1]
          if (shiftvariation) {
            var _data$offsets = data.offsets,
              reference = _data$offsets.reference,
              popper = _data$offsets.popper
            var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1
            var side = isVertical ? 'left' : 'top'
            var measurement = isVertical ? 'width' : 'height'
            var shiftOffsets = {
              start: defineProperty({}, side, reference[side]),
              end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement]),
            }
            data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation])
          }
          return data
        }
        function hide(data) {
          if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
            return data
          }
          var refRect = data.offsets.reference
          var bound = find(data.instance.modifiers, function (modifier) {
            return modifier.name === 'preventOverflow'
          }).boundaries
          if (
            refRect.bottom < bound.top ||
            refRect.left > bound.right ||
            refRect.top > bound.bottom ||
            refRect.right < bound.left
          ) {
            if (data.hide === true) {
              return data
            }
            data.hide = true
            data.attributes['x-out-of-boundaries'] = ''
          } else {
            if (data.hide === false) {
              return data
            }
            data.hide = false
            data.attributes['x-out-of-boundaries'] = false
          }
          return data
        }
        function inner(data) {
          var placement = data.placement
          var basePlacement = placement.split('-')[0]
          var _data$offsets = data.offsets,
            popper = _data$offsets.popper,
            reference = _data$offsets.reference
          var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1
          var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1
          popper[isHoriz ? 'left' : 'top'] =
            reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0)
          data.placement = getOppositePlacement(placement)
          data.offsets.popper = getClientRect(popper)
          return data
        }
        var modifiers = {
          shift: {
            order: 100,
            enabled: true,
            fn: shift,
          },
          offset: {
            order: 200,
            enabled: true,
            fn: offset,
            offset: 0,
          },
          preventOverflow: {
            order: 300,
            enabled: true,
            fn: preventOverflow,
            priority: ['left', 'right', 'top', 'bottom'],
            padding: 5,
            boundariesElement: 'scrollParent',
          },
          keepTogether: {
            order: 400,
            enabled: true,
            fn: keepTogether,
          },
          arrow: {
            order: 500,
            enabled: true,
            fn: arrow,
            element: '[x-arrow]',
          },
          flip: {
            order: 600,
            enabled: true,
            fn: flip,
            behavior: 'flip',
            padding: 5,
            boundariesElement: 'viewport',
            flipVariations: false,
            flipVariationsByContent: false,
          },
          inner: {
            order: 700,
            enabled: false,
            fn: inner,
          },
          hide: {
            order: 800,
            enabled: true,
            fn: hide,
          },
          computeStyle: {
            order: 850,
            enabled: true,
            fn: computeStyle,
            gpuAcceleration: true,
            x: 'bottom',
            y: 'right',
          },
          applyStyle: {
            order: 900,
            enabled: true,
            fn: applyStyle,
            onLoad: applyStyleOnLoad,
            gpuAcceleration: void 0,
          },
        }
        var Defaults = {
          placement: 'bottom',
          positionFixed: false,
          eventsEnabled: true,
          removeOnDestroy: false,
          onCreate: function onCreate() {},
          onUpdate: function onUpdate() {},
          modifiers,
        }
        var Popper = (function () {
          function Popper2(reference, popper) {
            var _this = this
            var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}
            classCallCheck(this, Popper2)
            this.scheduleUpdate = function () {
              return requestAnimationFrame(_this.update)
            }
            this.update = debounce(this.update.bind(this))
            this.options = _extends({}, Popper2.Defaults, options)
            this.state = {
              isDestroyed: false,
              isCreated: false,
              scrollParents: [],
            }
            this.reference = reference && reference.jquery ? reference[0] : reference
            this.popper = popper && popper.jquery ? popper[0] : popper
            this.options.modifiers = {}
            Object.keys(_extends({}, Popper2.Defaults.modifiers, options.modifiers)).forEach(function (name) {
              _this.options.modifiers[name] = _extends(
                {},
                Popper2.Defaults.modifiers[name] || {},
                options.modifiers ? options.modifiers[name] : {}
              )
            })
            this.modifiers = Object.keys(this.options.modifiers)
              .map(function (name) {
                return _extends(
                  {
                    name,
                  },
                  _this.options.modifiers[name]
                )
              })
              .sort(function (a, b) {
                return a.order - b.order
              })
            this.modifiers.forEach(function (modifierOptions) {
              if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
                modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state)
              }
            })
            this.update()
            var eventsEnabled = this.options.eventsEnabled
            if (eventsEnabled) {
              this.enableEventListeners()
            }
            this.state.eventsEnabled = eventsEnabled
          }
          createClass(Popper2, [
            {
              key: 'update',
              value: function update$$1() {
                return update.call(this)
              },
            },
            {
              key: 'destroy',
              value: function destroy$$1() {
                return destroy.call(this)
              },
            },
            {
              key: 'enableEventListeners',
              value: function enableEventListeners$$1() {
                return enableEventListeners.call(this)
              },
            },
            {
              key: 'disableEventListeners',
              value: function disableEventListeners$$1() {
                return disableEventListeners.call(this)
              },
            },
          ])
          return Popper2
        })()
        Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils
        Popper.placements = placements
        Popper.Defaults = Defaults
        return Popper
      })
    },
  })

  // node_modules/react-tippy/dist/react-tippy.js
  var require_react_tippy = __commonJS({
    'node_modules/react-tippy/dist/react-tippy.js'(exports, module2) {
      ;(function webpackUniversalModuleDefinition(root, factory) {
        if (typeof exports === 'object' && typeof module2 === 'object')
          module2.exports = factory(require_react(), require_popper(), require_react_dom())
        else if (typeof define === 'function' && define.amd)
          define('reactTippy', ['react', 'popper.js', 'react-dom'], factory)
        else if (typeof exports === 'object')
          exports['reactTippy'] = factory(require_react(), require_popper(), require_react_dom())
        else root['reactTippy'] = factory(root['React'], root['Popper'], root['ReactDOM'])
      })(
        exports,
        function (__WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_38__, __WEBPACK_EXTERNAL_MODULE_39__) {
          return (function (modules) {
            var installedModules = {}
            function __webpack_require__(moduleId) {
              if (installedModules[moduleId]) return installedModules[moduleId].exports
              var module3 = (installedModules[moduleId] = {
                i: moduleId,
                l: false,
                exports: {},
              })
              modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__)
              module3.l = true
              return module3.exports
            }
            __webpack_require__.m = modules
            __webpack_require__.c = installedModules
            __webpack_require__.i = function (value) {
              return value
            }
            __webpack_require__.d = function (exports2, name, getter) {
              if (!__webpack_require__.o(exports2, name)) {
                Object.defineProperty(exports2, name, {
                  configurable: false,
                  enumerable: true,
                  get: getter,
                })
              }
            }
            __webpack_require__.n = function (module3) {
              var getter =
                module3 && module3.__esModule
                  ? function getDefault() {
                      return module3['default']
                    }
                  : function getModuleExports() {
                      return module3
                    }
              __webpack_require__.d(getter, 'a', getter)
              return getter
            }
            __webpack_require__.o = function (object, property) {
              return Object.prototype.hasOwnProperty.call(object, property)
            }
            __webpack_require__.p = ''
            return __webpack_require__((__webpack_require__.s = 15))
          })([
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              var Browser = (exports2.Browser = {})
              if (typeof window !== 'undefined') {
                Browser.SUPPORTED = 'requestAnimationFrame' in window
                Browser.SUPPORTS_TOUCH = 'ontouchstart' in window
                Browser.touch = false
                Browser.dynamicInputDetection = true
                Browser.iOS = function () {
                  return /iPhone|iPad|iPod/.test(navigator.userAgent) && !window.MSStream
                }
              }
              var Store = (exports2.Store = [])
              var Selectors = (exports2.Selectors = {
                POPPER: '.tippy-popper',
                TOOLTIP: '.tippy-tooltip',
                CONTENT: '.tippy-tooltip-content',
                CIRCLE: '[x-circle]',
                ARROW: '[x-arrow]',
                TOOLTIPPED_EL: '[data-tooltipped]',
                CONTROLLER: '[data-tippy-controller]',
              })
              var Defaults = (exports2.Defaults = {
                html: false,
                position: 'top',
                animation: 'shift',
                animateFill: true,
                arrow: false,
                arrowSize: 'regular',
                delay: 0,
                trigger: 'mouseenter focus',
                duration: 350,
                interactive: false,
                interactiveBorder: 2,
                theme: 'dark',
                size: 'regular',
                distance: 10,
                offset: 0,
                hideOnClick: true,
                multiple: false,
                followCursor: false,
                inertia: false,
                flipDuration: 350,
                sticky: false,
                stickyDuration: 200,
                appendTo: function appendTo() {
                  return document.body
                },
                zIndex: 9999,
                touchHold: false,
                performance: false,
                dynamicTitle: false,
                useContext: false,
                reactInstance: void 0,
                popperOptions: {},
                open: void 0,
                onRequestClose: function onRequestClose() {},
              })
              var DefaultsKeys = (exports2.DefaultsKeys = Browser.SUPPORTED && Object.keys(Defaults))
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = prefix
              function prefix(property) {
                var prefixes = [false, 'webkit']
                var upperProp = property.charAt(0).toUpperCase() + property.slice(1)
                for (var i = 0; i < prefixes.length; i++) {
                  var _prefix = prefixes[i]
                  var prefixedProp = _prefix ? '' + _prefix + upperProp : property
                  if (typeof window.document.body.style[prefixedProp] !== 'undefined') {
                    return prefixedProp
                  }
                }
                return null
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = find
              function find(arr, checkFn) {
                if (Array.prototype.find) {
                  return arr.find(checkFn)
                }
                return arr.filter(checkFn)[0]
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = getCorePlacement
              function getCorePlacement(placement) {
                return placement.replace(/-.+/, '')
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = closest
              var _matches = __webpack_require__(8)
              function closest(element, parentSelector) {
                var _closest =
                  Element.prototype.closest ||
                  function (selector) {
                    var el = this
                    while (el) {
                      if (_matches.matches.call(el, selector)) {
                        return el
                      }
                      el = el.parentElement
                    }
                  }
                return _closest.call(element, parentSelector)
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = defer
              function defer(fn) {
                window.requestAnimationFrame(function () {
                  setTimeout(fn, 0)
                })
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = getInnerElements
              var _globals = __webpack_require__(0)
              function getInnerElements(popper) {
                return {
                  tooltip: popper.querySelector(_globals.Selectors.TOOLTIP),
                  circle: popper.querySelector(_globals.Selectors.CIRCLE),
                  content: popper.querySelector(_globals.Selectors.CONTENT),
                }
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = isVisible
              function isVisible(popper) {
                return popper.style.visibility === 'visible'
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              function defaultMatchSelector(s) {
                var matches2 = (this.document || this.ownerDocument).querySelectorAll(s),
                  i = matches2.length
                while (--i >= 0 && matches2.item(i) !== this) {}
                return i > -1
              }
              var matches = (exports2.matches =
                typeof window === 'undefined'
                  ? defaultMatchSelector
                  : Element.prototype.matches ||
                    Element.prototype.matchesSelector ||
                    Element.prototype.webkitMatchesSelector ||
                    Element.prototype.mozMatchesSelector ||
                    Element.prototype.msMatchesSelector ||
                    defaultMatchSelector)
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              var _extends =
                Object.assign ||
                function (target) {
                  for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i]
                    for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key]
                      }
                    }
                  }
                  return target
                }
              var _createClass = (function () {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i]
                    descriptor.enumerable = descriptor.enumerable || false
                    descriptor.configurable = true
                    if ('value' in descriptor) descriptor.writable = true
                    Object.defineProperty(target, descriptor.key, descriptor)
                  }
                }
                return function (Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps)
                  if (staticProps) defineProperties(Constructor, staticProps)
                  return Constructor
                }
              })()
              var _react = __webpack_require__(13)
              var _react2 = _interopRequireDefault(_react)
              var _tippy = __webpack_require__(30)
              var _tippy2 = _interopRequireDefault(_tippy)
              var _globals = __webpack_require__(0)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError('Cannot call a class as a function')
                }
              }
              function _possibleConstructorReturn(self2, call) {
                if (!self2) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === 'object' || typeof call === 'function') ? call : self2
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== 'function' && superClass !== null) {
                  throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                  constructor: { value: subClass, enumerable: false, writable: true, configurable: true },
                })
                if (superClass)
                  Object.setPrototypeOf
                    ? Object.setPrototypeOf(subClass, superClass)
                    : (subClass.__proto__ = superClass)
              }
              var stopPortalEvent = function stopPortalEvent2(e) {
                return e.stopPropagation()
              }
              var defaultProps = {
                html: null,
                position: 'top',
                animation: 'shift',
                animateFill: true,
                arrow: false,
                delay: 0,
                hideDelay: 0,
                trigger: 'mouseenter focus',
                duration: 375,
                hideDuration: 375,
                interactive: false,
                interactiveBorder: 2,
                theme: 'dark',
                offset: 0,
                hideOnClick: true,
                multiple: false,
                followCursor: false,
                inertia: false,
                popperOptions: {},
                onShow: function onShow() {},
                onShown: function onShown() {},
                onHide: function onHide() {},
                onHidden: function onHidden2() {},
                disabled: false,
                arrowSize: 'regular',
                size: 'regular',
                className: '',
                style: {},
                distance: 10,
                onRequestClose: function onRequestClose() {},
                sticky: false,
                stickyDuration: 200,
                tag: 'div',
                touchHold: false,
                unmountHTMLWhenHide: false,
                zIndex: 9999,
              }
              var propKeys = Object.keys(defaultProps)
              var detectPropsChanged = function detectPropsChanged2(props, prevProps) {
                var result = []
                propKeys.forEach(function (key) {
                  if (props[key] !== prevProps[key]) {
                    result.push(key)
                  }
                })
                return result
              }
              var Tooltip = (function (_Component) {
                _inherits(Tooltip2, _Component)
                function Tooltip2(props) {
                  _classCallCheck(this, Tooltip2)
                  var _this = _possibleConstructorReturn(
                    this,
                    (Tooltip2.__proto__ || Object.getPrototypeOf(Tooltip2)).call(this, props)
                  )
                  _this.initTippy = _this._initTippy.bind(_this)
                  _this.destroyTippy = _this._destroyTippy.bind(_this)
                  _this.updateTippy = _this._updateTippy.bind(_this)
                  _this.updateReactDom = _this._updateReactDom.bind(_this)
                  _this.showTooltip = _this._showTooltip.bind(_this)
                  _this.hideTooltip = _this._hideTooltip.bind(_this)
                  _this.updateSettings = _this._updateSettings.bind(_this)
                  _this.state = {
                    reactDOMValue: null,
                  }
                  return _this
                }
                _createClass(Tooltip2, [
                  {
                    key: 'componentDidMount',
                    value: function componentDidMount() {
                      if (typeof window === 'undefined' || typeof document === 'undefined') {
                        return
                      }
                      this.initTippy()
                    },
                  },
                  {
                    key: 'componentWillUnmount',
                    value: function componentWillUnmount() {
                      if (typeof window === 'undefined' || typeof document === 'undefined') {
                        return
                      }
                      this.destroyTippy()
                    },
                  },
                  {
                    key: 'componentDidUpdate',
                    value: function componentDidUpdate(prevProps) {
                      var _this2 = this
                      if (typeof window === 'undefined' || typeof document === 'undefined') {
                        return
                      }
                      if (this.props.disabled === false && prevProps.disabled === true) {
                        this.updateSettings('disabled', false)
                        this.destroyTippy()
                        this.initTippy()
                        return
                      }
                      if (this.props.disabled === true && prevProps.disabled === false) {
                        this.updateSettings('disabled', true)
                        this.destroyTippy()
                        return
                      }
                      if (this.props.open === true && !prevProps.open) {
                        this.updateSettings('open', true)
                        setTimeout(function () {
                          _this2.showTooltip()
                        }, 0)
                      }
                      if (this.props.open === false && prevProps.open === true) {
                        this.updateSettings('open', false)
                        this.hideTooltip()
                      }
                      if (this.props.html !== prevProps.html) {
                        this.updateReactDom()
                      }
                      if (this.props.title !== prevProps.title) {
                        this.updateTippy()
                      }
                      var propChanges = detectPropsChanged(this.props, prevProps)
                      propChanges.forEach(function (key) {
                        _this2.updateSettings(key, _this2.props[key])
                      })
                    },
                  },
                  {
                    key: '_showTooltip',
                    value: function _showTooltip() {
                      if (typeof window === 'undefined' || typeof document === 'undefined') {
                        return
                      }
                      if (this.tippy) {
                        var popper = this.tippy.getPopperElement(this.tooltipDOM)
                        this.tippy.show(popper, this.props.duration)
                      }
                    },
                  },
                  {
                    key: '_hideTooltip',
                    value: function _hideTooltip() {
                      if (typeof window === 'undefined' || typeof document === 'undefined') {
                        return
                      }
                      if (this.tippy) {
                        var popper = this.tippy.getPopperElement(this.tooltipDOM)
                        this.tippy.hide(popper, this.props.hideDuration)
                      }
                    },
                  },
                  {
                    key: '_updateSettings',
                    value: function _updateSettings(name, value) {
                      if (typeof window === 'undefined' || typeof document === 'undefined') {
                        return
                      }
                      if (this.tippy) {
                        var popper = this.tippy.getPopperElement(this.tooltipDOM)
                        this.tippy.updateSettings(popper, name, value)
                      }
                    },
                  },
                  {
                    key: '_updateReactDom',
                    value: function _updateReactDom() {
                      if (typeof window === 'undefined' || typeof document === 'undefined') {
                        return
                      }
                      if (this.tippy) {
                        this.updateSettings('reactDOM', this.props.html)
                        var popper = this.tippy.getPopperElement(this.tooltipDOM)
                        var isVisible = popper.style.visibility === 'visible' || this.props.open
                        if (isVisible) {
                          this.tippy.updateForReact(popper, this.props.html)
                        }
                      }
                    },
                  },
                  {
                    key: '_updateTippy',
                    value: function _updateTippy() {
                      if (typeof window === 'undefined' || typeof document === 'undefined') {
                        return
                      }
                      if (this.tippy) {
                        var popper = this.tippy.getPopperElement(this.tooltipDOM)
                        this.tippy.update(popper)
                      }
                    },
                  },
                  {
                    key: '_initTippy',
                    value: function _initTippy() {
                      var _this3 = this
                      if (
                        typeof window === 'undefined' ||
                        typeof document === 'undefined' ||
                        !_globals.Browser.SUPPORTED
                      ) {
                        return
                      }
                      if (!this.props.disabled) {
                        if (this.props.title) {
                          this.tooltipDOM.setAttribute('title', this.props.title)
                        }
                        this.tippy = (0, _tippy2.default)(this.tooltipDOM, {
                          disabled: this.props.disabled,
                          position: this.props.position,
                          animation: this.props.animation,
                          animateFill: this.props.animateFill,
                          arrow: this.props.arrow,
                          arrowSize: this.props.arrowSize,
                          delay: this.props.delay,
                          hideDelay: this.props.hideDelay,
                          trigger: this.props.trigger,
                          duration: this.props.duration,
                          hideDuration: this.props.hideDuration,
                          interactive: this.props.interactive,
                          interactiveBorder: this.props.interactiveBorder,
                          theme: this.props.theme,
                          offset: this.props.offset,
                          hideOnClick: this.props.hideOnClick,
                          multiple: this.props.multiple,
                          size: this.props.size,
                          followCursor: this.props.followCursor,
                          inertia: this.props.inertia,
                          popperOptions: this.props.popperOptions,
                          onShow: this.props.onShow,
                          onShown: this.props.onShown,
                          onHide: this.props.onHide,
                          onHidden: this.props.onHidden,
                          distance: this.props.distance,
                          reactDOM: this.props.html,
                          setReactDOMValue: function setReactDOMValue(newReactDOM) {
                            return _this3.setState({ reactDOMValue: newReactDOM })
                          },
                          unmountHTMLWhenHide: this.props.unmountHTMLWhenHide,
                          open: this.props.open,
                          sticky: this.props.sticky,
                          stickyDuration: this.props.stickyDuration,
                          tag: this.props.tag,
                          touchHold: this.props.touchHold,
                          onRequestClose: this.props.onRequestClose,
                          useContext: this.props.useContext,
                          reactInstance: this.props.useContext ? this : void 0,
                          performance: true,
                          html: this.props.rawTemplate ? this.props.rawTemplate : void 0,
                          zIndex: this.props.zIndex,
                        })
                        if (this.props.open) {
                          this.showTooltip()
                        }
                      } else {
                        this.tippy = null
                      }
                    },
                  },
                  {
                    key: '_destroyTippy',
                    value: function _destroyTippy() {
                      if (typeof window === 'undefined' || typeof document === 'undefined') {
                        return
                      }
                      if (this.tippy) {
                        var popper = this.tippy.getPopperElement(this.tooltipDOM)
                        this.updateSettings('open', false)
                        this.tippy.hide(popper, 0)
                        this.tippy.destroy(popper)
                        this.tippy = null
                      }
                    },
                  },
                  {
                    key: 'render',
                    value: function render() {
                      var _this4 = this
                      var Tag = this.props.tag
                      return _react2.default.createElement(
                        _react2.default.Fragment,
                        null,
                        _react2.default.createElement(
                          Tag,
                          {
                            ref: function ref(tooltip) {
                              _this4.tooltipDOM = tooltip
                            },
                            title: this.props.title,
                            className: this.props.className,
                            tabIndex: this.props.tabIndex,
                            style: _extends(
                              {
                                display: 'inline',
                              },
                              this.props.style
                            ),
                          },
                          this.props.children
                        ),
                        this.state.reactDOMValue &&
                          _react2.default.createElement(
                            'div',
                            {
                              onClick: stopPortalEvent,
                              onContextMenu: stopPortalEvent,
                              onDoubleClick: stopPortalEvent,
                              onDrag: stopPortalEvent,
                              onDragEnd: stopPortalEvent,
                              onDragEnter: stopPortalEvent,
                              onDragExit: stopPortalEvent,
                              onDragLeave: stopPortalEvent,
                              onDragOver: stopPortalEvent,
                              onDragStart: stopPortalEvent,
                              onDrop: stopPortalEvent,
                              onMouseDown: stopPortalEvent,
                              onMouseEnter: stopPortalEvent,
                              onMouseLeave: stopPortalEvent,
                              onMouseMove: stopPortalEvent,
                              onMouseOver: stopPortalEvent,
                              onMouseOut: stopPortalEvent,
                              onMouseUp: stopPortalEvent,
                              onKeyDown: stopPortalEvent,
                              onKeyPress: stopPortalEvent,
                              onKeyUp: stopPortalEvent,
                              onFocus: stopPortalEvent,
                              onBlur: stopPortalEvent,
                              onChange: stopPortalEvent,
                              onInput: stopPortalEvent,
                              onInvalid: stopPortalEvent,
                              onSubmit: stopPortalEvent,
                            },
                            this.state.reactDOMValue
                          )
                      )
                    },
                  },
                ])
                return Tooltip2
              })(_react.Component)
              Tooltip.defaultProps = defaultProps
              exports2.default = Tooltip
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = followCursorHandler
              var _globals = __webpack_require__(0)
              var _getCorePlacement = __webpack_require__(3)
              var _getCorePlacement2 = _interopRequireDefault(_getCorePlacement)
              var _find = __webpack_require__(2)
              var _find2 = _interopRequireDefault(_find)
              var _prefix = __webpack_require__(1)
              var _prefix2 = _interopRequireDefault(_prefix)
              var _closest = __webpack_require__(4)
              var _closest2 = _interopRequireDefault(_closest)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function followCursorHandler(e) {
                var _this = this
                var refData = (0, _find2.default)(_globals.Store, function (refData2) {
                  return refData2.el === _this
                })
                if (!refData) return
                var popper = refData.popper,
                  offset = refData.settings.offset
                var position = (0, _getCorePlacement2.default)(popper.getAttribute('x-placement'))
                var halfPopperWidth = Math.round(popper.offsetWidth / 2)
                var halfPopperHeight = Math.round(popper.offsetHeight / 2)
                var viewportPadding = 5
                var pageWidth = document.documentElement.offsetWidth || document.body.offsetWidth
                var pageX = e.pageX,
                  pageY = e.pageY
                var x = void 0,
                  y = void 0
                switch (position) {
                  case 'top':
                    x = pageX - halfPopperWidth + offset
                    y = pageY - 2.25 * halfPopperHeight
                    break
                  case 'left':
                    x = pageX - 2 * halfPopperWidth - 10
                    y = pageY - halfPopperHeight + offset
                    break
                  case 'right':
                    x = pageX + halfPopperHeight
                    y = pageY - halfPopperHeight + offset
                    break
                  case 'bottom':
                    x = pageX - halfPopperWidth + offset
                    y = pageY + halfPopperHeight / 1.5
                    break
                }
                var isRightOverflowing = pageX + viewportPadding + halfPopperWidth + offset > pageWidth
                var isLeftOverflowing = pageX - viewportPadding - halfPopperWidth + offset < 0
                if (position === 'top' || position === 'bottom') {
                  if (isRightOverflowing) {
                    x = pageWidth - viewportPadding - 2 * halfPopperWidth
                  }
                  if (isLeftOverflowing) {
                    x = viewportPadding
                  }
                }
                popper.style[(0, _prefix2.default)('transform')] = 'translate3d(' + x + 'px, ' + y + 'px, 0)'
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = getOffsetDistanceInPx
              var _globals = __webpack_require__(0)
              function getOffsetDistanceInPx(distance) {
                return -(distance - _globals.Defaults.distance) + 'px'
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = removeTitle
              function removeTitle(el) {
                var title = el.getAttribute('title')
                if (title) {
                  el.setAttribute('data-original-title', title)
                }
                el.removeAttribute('title')
              }
            },
            function (module3, exports2) {
              module3.exports = __WEBPACK_EXTERNAL_MODULE_13__
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              var _react = __webpack_require__(13)
              var _react2 = _interopRequireDefault(_react)
              var _component = __webpack_require__(9)
              var _component2 = _interopRequireDefault(_component)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function _objectWithoutProperties(obj, keys) {
                var target = {}
                for (var i in obj) {
                  if (keys.indexOf(i) >= 0) continue
                  if (!Object.prototype.hasOwnProperty.call(obj, i)) continue
                  target[i] = obj[i]
                }
                return target
              }
              var withTooltip = function withTooltip2(Component2) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}
                return function (_ref) {
                  var props = _objectWithoutProperties(_ref, [])
                  return _react2.default.createElement(
                    _component2.default,
                    options,
                    _react2.default.createElement(Component2, props)
                  )
                }
              }
              exports2.default = withTooltip
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.withTooltip = exports2.Tooltip = void 0
              var _component = __webpack_require__(9)
              var _component2 = _interopRequireDefault(_component)
              var _hoc = __webpack_require__(14)
              var _hoc2 = _interopRequireDefault(_hoc)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              exports2.Tooltip = _component2.default
              exports2.withTooltip = _hoc2.default
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = bindEventListeners
              var _globals = __webpack_require__(0)
              var _hideAllPoppers = __webpack_require__(25)
              var _hideAllPoppers2 = _interopRequireDefault(_hideAllPoppers)
              var _closest = __webpack_require__(4)
              var _closest2 = _interopRequireDefault(_closest)
              var _find = __webpack_require__(2)
              var _find2 = _interopRequireDefault(_find)
              var _matches = __webpack_require__(8)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function bindEventListeners() {
                var touchHandler = function touchHandler2() {
                  _globals.Browser.touch = true
                  if (_globals.Browser.iOS()) {
                    document.body.classList.add('tippy-touch')
                  }
                  if (_globals.Browser.dynamicInputDetection && window.performance) {
                    document.addEventListener('mousemove', mousemoveHandler)
                  }
                }
                var mousemoveHandler = (function () {
                  var time = void 0
                  return function () {
                    var now = performance.now()
                    if (now - time < 20) {
                      _globals.Browser.touch = false
                      document.removeEventListener('mousemove', mousemoveHandler)
                      if (!_globals.Browser.iOS()) {
                        document.body.classList.remove('tippy-touch')
                      }
                    }
                    time = now
                  }
                })()
                var clickHandler = function clickHandler2(event) {
                  if (!(event.target instanceof Element)) {
                    return (0, _hideAllPoppers2.default)()
                  }
                  var el = (0, _closest2.default)(event.target, _globals.Selectors.TOOLTIPPED_EL)
                  var popper = (0, _closest2.default)(event.target, _globals.Selectors.POPPER)
                  if (popper) {
                    var ref = (0, _find2.default)(_globals.Store, function (ref2) {
                      return ref2.popper === popper
                    })
                    if (!ref) return
                    var interactive = ref.settings.interactive
                    if (interactive) return
                  }
                  if (el) {
                    var _ref = (0, _find2.default)(_globals.Store, function (ref2) {
                      return ref2.el === el
                    })
                    if (!_ref) return
                    var _ref$settings = _ref.settings,
                      hideOnClick = _ref$settings.hideOnClick,
                      multiple = _ref$settings.multiple,
                      trigger = _ref$settings.trigger
                    if ((!multiple && _globals.Browser.touch) || (!multiple && trigger.indexOf('click') !== -1)) {
                      return (0, _hideAllPoppers2.default)(_ref)
                    }
                    if (hideOnClick !== true || trigger.indexOf('click') !== -1) return
                  }
                  if (
                    (0, _closest2.default)(event.target, _globals.Selectors.CONTROLLER) ||
                    !document.querySelector(_globals.Selectors.POPPER)
                  )
                    return
                  ;(0, _hideAllPoppers2.default)()
                }
                var blurHandler = function blurHandler2(event) {
                  var _document = document,
                    el = _document.activeElement
                  if (el && el.blur && _matches.matches.call(el, _globals.Selectors.TOOLTIPPED_EL)) {
                    el.blur()
                  }
                }
                document.addEventListener('click', clickHandler)
                document.addEventListener('touchstart', touchHandler)
                window.addEventListener('blur', blurHandler)
                if (
                  !_globals.Browser.SUPPORTS_TOUCH &&
                  (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0)
                ) {
                  document.addEventListener('pointerdown', touchHandler)
                }
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = createPopperElement
              var _getCorePlacement = __webpack_require__(3)
              var _getCorePlacement2 = _interopRequireDefault(_getCorePlacement)
              var _getOffsetDistanceInPx = __webpack_require__(11)
              var _getOffsetDistanceInPx2 = _interopRequireDefault(_getOffsetDistanceInPx)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function createPopperElement(id, title, settings) {
                var position = settings.position,
                  distance = settings.distance,
                  arrow = settings.arrow,
                  animateFill = settings.animateFill,
                  inertia = settings.inertia,
                  animation = settings.animation,
                  arrowSize = settings.arrowSize,
                  size = settings.size,
                  theme = settings.theme,
                  html = settings.html,
                  zIndex = settings.zIndex,
                  interactive = settings.interactive
                var popper = document.createElement('div')
                popper.setAttribute('class', 'tippy-popper')
                popper.setAttribute('role', 'tooltip')
                popper.setAttribute('aria-hidden', 'true')
                popper.setAttribute('id', 'tippy-tooltip-' + id)
                popper.style.zIndex = zIndex
                var tooltip = document.createElement('div')
                tooltip.setAttribute('class', 'tippy-tooltip tippy-tooltip--' + size + ' leave')
                tooltip.setAttribute('data-animation', animation)
                theme.split(' ').forEach(function (t) {
                  tooltip.classList.add(t + '-theme')
                })
                if (arrow) {
                  var _arrow = document.createElement('div')
                  _arrow.setAttribute('class', 'arrow-' + arrowSize)
                  _arrow.setAttribute('x-arrow', '')
                  tooltip.appendChild(_arrow)
                }
                if (animateFill) {
                  tooltip.setAttribute('data-animatefill', '')
                  var circle = document.createElement('div')
                  circle.setAttribute('class', 'leave')
                  circle.setAttribute('x-circle', '')
                  tooltip.appendChild(circle)
                }
                if (inertia) {
                  tooltip.setAttribute('data-inertia', '')
                }
                if (interactive) {
                  tooltip.setAttribute('data-interactive', '')
                }
                var content = document.createElement('div')
                content.setAttribute('class', 'tippy-tooltip-content')
                if (html) {
                  var templateId = void 0
                  if (html instanceof Element) {
                    content.appendChild(html)
                    templateId = '#' + html.id || 'tippy-html-template'
                  } else {
                    content.innerHTML = document.getElementById(html.replace('#', '')).innerHTML
                    templateId = html
                  }
                  popper.classList.add('html-template')
                  interactive && popper.setAttribute('tabindex', '-1')
                  tooltip.setAttribute('data-template-id', templateId)
                } else {
                  content.innerHTML = title
                }
                tooltip.style[(0, _getCorePlacement2.default)(position)] = (0, _getOffsetDistanceInPx2.default)(
                  distance
                )
                tooltip.appendChild(content)
                popper.appendChild(tooltip)
                return popper
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              var _extends =
                Object.assign ||
                function (target) {
                  for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i]
                    for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key]
                      }
                    }
                  }
                  return target
                }
              exports2.default = createPopperInstance
              var _popper = __webpack_require__(38)
              var _popper2 = _interopRequireDefault(_popper)
              var _defer = __webpack_require__(5)
              var _defer2 = _interopRequireDefault(_defer)
              var _prefix = __webpack_require__(1)
              var _prefix2 = _interopRequireDefault(_prefix)
              var _getCorePlacement = __webpack_require__(3)
              var _getCorePlacement2 = _interopRequireDefault(_getCorePlacement)
              var _getInnerElements2 = __webpack_require__(6)
              var _getInnerElements3 = _interopRequireDefault(_getInnerElements2)
              var _getOffsetDistanceInPx = __webpack_require__(11)
              var _getOffsetDistanceInPx2 = _interopRequireDefault(_getOffsetDistanceInPx)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function createPopperInstance(data) {
                var el = data.el,
                  popper = data.popper,
                  _data$settings = data.settings,
                  position = _data$settings.position,
                  popperOptions = _data$settings.popperOptions,
                  offset = _data$settings.offset,
                  distance = _data$settings.distance,
                  flipDuration = _data$settings.flipDuration
                var _getInnerElements = (0, _getInnerElements3.default)(popper),
                  tooltip = _getInnerElements.tooltip
                var config = _extends(
                  {
                    placement: position,
                  },
                  popperOptions || {},
                  {
                    modifiers: _extends({}, popperOptions ? popperOptions.modifiers : {}, {
                      flip: _extends(
                        {
                          padding: distance + 5,
                        },
                        popperOptions && popperOptions.modifiers ? popperOptions.modifiers.flip : {}
                      ),
                      offset: _extends(
                        {
                          offset,
                        },
                        popperOptions && popperOptions.modifiers ? popperOptions.modifiers.offset : {}
                      ),
                    }),
                    onUpdate: function onUpdate() {
                      var styles2 = tooltip.style
                      styles2.top = ''
                      styles2.bottom = ''
                      styles2.left = ''
                      styles2.right = ''
                      styles2[(0, _getCorePlacement2.default)(popper.getAttribute('x-placement'))] = (0,
                      _getOffsetDistanceInPx2.default)(distance)
                    },
                  }
                )
                if (window.MutationObserver) {
                  var styles = popper.style
                  var observer = new MutationObserver(function () {
                    styles[(0, _prefix2.default)('transitionDuration')] = '0ms'
                    data.popperInstance.update()
                    ;(0, _defer2.default)(function () {
                      styles[(0, _prefix2.default)('transitionDuration')] = flipDuration + 'ms'
                    })
                  })
                  observer.observe(popper, {
                    childList: true,
                    subtree: true,
                    characterData: true,
                  })
                  data._mutationObserver = observer
                }
                return new _popper2.default(el, popper, config)
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = createTooltips
              var _getIndividualSettings = __webpack_require__(24)
              var _getIndividualSettings2 = _interopRequireDefault(_getIndividualSettings)
              var _createPopperElement = __webpack_require__(17)
              var _createPopperElement2 = _interopRequireDefault(_createPopperElement)
              var _createTrigger = __webpack_require__(20)
              var _createTrigger2 = _interopRequireDefault(_createTrigger)
              var _getEventListenerHandlers = __webpack_require__(23)
              var _getEventListenerHandlers2 = _interopRequireDefault(_getEventListenerHandlers)
              var _evaluateSettings = __webpack_require__(21)
              var _evaluateSettings2 = _interopRequireDefault(_evaluateSettings)
              var _removeTitle = __webpack_require__(12)
              var _removeTitle2 = _interopRequireDefault(_removeTitle)
              var _globals = __webpack_require__(0)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              var idCounter = 1
              function createTooltips(els) {
                var _this = this
                return els.reduce(function (a, el) {
                  var id = idCounter
                  var settings = (0, _evaluateSettings2.default)(
                    _this.settings.performance
                      ? _this.settings
                      : (0, _getIndividualSettings2.default)(el, _this.settings)
                  )
                  var html = settings.html,
                    reactDOM = settings.reactDOM,
                    trigger = settings.trigger,
                    touchHold = settings.touchHold
                  var title = el.getAttribute('title')
                  if (!title && !html && !reactDOM) return a
                  el.setAttribute('data-tooltipped', '')
                  el.setAttribute('aria-describedby', 'tippy-tooltip-' + id)
                  ;(0, _removeTitle2.default)(el)
                  var popper = (0, _createPopperElement2.default)(id, title, settings)
                  var handlers2 = _getEventListenerHandlers2.default.call(_this, el, popper, settings)
                  var listeners = []
                  trigger
                    .trim()
                    .split(' ')
                    .forEach(function (event) {
                      return (listeners = listeners.concat(
                        (0, _createTrigger2.default)(event, el, handlers2, touchHold)
                      ))
                    })
                  a.push({
                    id,
                    el,
                    popper,
                    settings,
                    listeners,
                    tippyInstance: _this,
                  })
                  idCounter++
                  return a
                }, [])
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = createTrigger
              var _globals = __webpack_require__(0)
              function createTrigger(event, el, handlers2, touchHold) {
                var listeners = []
                if (event === 'manual') return listeners
                el.addEventListener(event, handlers2.handleTrigger)
                listeners.push({
                  event,
                  handler: handlers2.handleTrigger,
                })
                if (event === 'mouseenter') {
                  if (_globals.Browser.SUPPORTS_TOUCH && touchHold) {
                    el.addEventListener('touchstart', handlers2.handleTrigger)
                    listeners.push({
                      event: 'touchstart',
                      handler: handlers2.handleTrigger,
                    })
                    el.addEventListener('touchend', handlers2.handleMouseleave)
                    listeners.push({
                      event: 'touchend',
                      handler: handlers2.handleMouseleave,
                    })
                  }
                  el.addEventListener('mouseleave', handlers2.handleMouseleave)
                  listeners.push({
                    event: 'mouseleave',
                    handler: handlers2.handleMouseleave,
                  })
                }
                if (event === 'focus') {
                  el.addEventListener('blur', handlers2.handleBlur)
                  listeners.push({
                    event: 'blur',
                    handler: handlers2.handleBlur,
                  })
                }
                return listeners
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = evaluateSettings
              function evaluateSettings(settings) {
                if (settings.arrow) {
                  settings.animateFill = false
                }
                if (settings.appendTo && typeof settings.appendTo === 'function') {
                  settings.appendTo = settings.appendTo()
                }
                return settings
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = getArrayOfElements
              function getArrayOfElements(selector) {
                if (selector instanceof Element) {
                  return [selector]
                }
                if (Array.isArray(selector)) {
                  return selector
                }
                return [].slice.call(document.querySelectorAll(selector))
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = getEventListenerHandlers
              var _globals = __webpack_require__(0)
              var _isVisible = __webpack_require__(7)
              var _isVisible2 = _interopRequireDefault(_isVisible)
              var _closest = __webpack_require__(4)
              var _closest2 = _interopRequireDefault(_closest)
              var _cursorIsOutsideInteractiveBorder = __webpack_require__(32)
              var _cursorIsOutsideInteractiveBorder2 = _interopRequireDefault(_cursorIsOutsideInteractiveBorder)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function getEventListenerHandlers(el, popper, settings) {
                var _this = this
                var position = settings.position,
                  delay = settings.delay,
                  duration = settings.duration,
                  interactive = settings.interactive,
                  interactiveBorder = settings.interactiveBorder,
                  distance = settings.distance,
                  hideOnClick = settings.hideOnClick,
                  trigger = settings.trigger,
                  touchHold = settings.touchHold,
                  touchWait = settings.touchWait
                var showDelay = void 0,
                  hideDelay = void 0
                var clearTimeouts = function clearTimeouts2() {
                  clearTimeout(showDelay)
                  clearTimeout(hideDelay)
                }
                var _show = function _show2() {
                  clearTimeouts()
                  if ((0, _isVisible2.default)(popper)) return
                  var _delay = Array.isArray(delay) ? delay[0] : delay
                  if (delay) {
                    showDelay = setTimeout(function () {
                      return _this.show(popper)
                    }, _delay)
                  } else {
                    _this.show(popper)
                  }
                }
                var show = function show2(event) {
                  return _this.callbacks.wait ? _this.callbacks.wait.call(popper, _show, event) : _show()
                }
                var hide = function hide2() {
                  clearTimeouts()
                  var _delay = Array.isArray(delay) ? delay[1] : delay
                  if (delay) {
                    hideDelay = setTimeout(function () {
                      return _this.hide(popper)
                    }, _delay)
                  } else {
                    _this.hide(popper)
                  }
                }
                var handleTrigger = function handleTrigger2(event) {
                  var mouseenterTouch =
                    event.type === 'mouseenter' && _globals.Browser.SUPPORTS_TOUCH && _globals.Browser.touch
                  if (mouseenterTouch && touchHold) return
                  var isClick = event.type === 'click'
                  var isNotPersistent = hideOnClick !== 'persistent'
                  isClick && (0, _isVisible2.default)(popper) && isNotPersistent ? hide() : show(event)
                  if (mouseenterTouch && _globals.Browser.iOS() && el.click) {
                    el.click()
                  }
                }
                var handleMouseleave = function handleMouseleave2(event) {
                  if (
                    event.type === 'mouseleave' &&
                    _globals.Browser.SUPPORTS_TOUCH &&
                    _globals.Browser.touch &&
                    touchHold
                  ) {
                    return
                  }
                  if (interactive) {
                    var handleMousemove = function handleMousemove2(event2) {
                      var triggerHide = function triggerHide2() {
                        document.body.removeEventListener('mouseleave', hide)
                        document.removeEventListener('mousemove', handleMousemove2)
                        hide()
                      }
                      var closestTooltippedEl = (0, _closest2.default)(event2.target, _globals.Selectors.TOOLTIPPED_EL)
                      var isOverPopper = (0, _closest2.default)(event2.target, _globals.Selectors.POPPER) === popper
                      var isOverEl = closestTooltippedEl === el
                      var isClickTriggered = trigger.indexOf('click') !== -1
                      var isOverOtherTooltippedEl = closestTooltippedEl && closestTooltippedEl !== el
                      if (isOverOtherTooltippedEl) {
                        return triggerHide()
                      }
                      if (isOverPopper || isOverEl || isClickTriggered) return
                      if ((0, _cursorIsOutsideInteractiveBorder2.default)(event2, popper, settings)) {
                        triggerHide()
                      }
                    }
                    document.body.addEventListener('mouseleave', hide)
                    document.addEventListener('mousemove', handleMousemove)
                    return
                  }
                  hide()
                }
                var handleBlur = function handleBlur2(event) {
                  if (!event.relatedTarget || _globals.Browser.touch) return
                  if ((0, _closest2.default)(event.relatedTarget, _globals.Selectors.POPPER)) return
                  hide()
                }
                return {
                  handleTrigger,
                  handleMouseleave,
                  handleBlur,
                }
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = getIndividualSettings
              var _globals = __webpack_require__(0)
              function getIndividualSettings(el, instanceSettings) {
                var settings = _globals.DefaultsKeys.reduce(function (acc, key) {
                  var val = el.getAttribute('data-' + key.toLowerCase()) || instanceSettings[key]
                  if (val === 'false') val = false
                  if (val === 'true') val = true
                  if (isFinite(val) && !isNaN(parseFloat(val))) {
                    val = parseFloat(val)
                  }
                  if (typeof val === 'string' && val.trim().charAt(0) === '[') {
                    val = JSON.parse(val)
                  }
                  acc[key] = val
                  return acc
                }, {})
                return Object.assign({}, instanceSettings, settings)
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = hideAllPoppers
              var _globals = __webpack_require__(0)
              function hideAllPoppers(exclude) {
                _globals.Store.forEach(function (refData) {
                  var popper = refData.popper,
                    tippyInstance = refData.tippyInstance,
                    _refData$settings = refData.settings,
                    appendTo = _refData$settings.appendTo,
                    hideOnClick = _refData$settings.hideOnClick,
                    trigger = _refData$settings.trigger
                  if (!appendTo.contains(popper)) return
                  var isHideOnClick = hideOnClick === true || trigger.indexOf('focus') !== -1
                  var isNotCurrentRef = !exclude || popper !== exclude.popper
                  if (isHideOnClick && isNotCurrentRef) {
                    refData.settings.onRequestClose()
                    tippyInstance.hide(popper)
                  }
                })
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = init3
              var _bindEventListeners = __webpack_require__(16)
              var _bindEventListeners2 = _interopRequireDefault(_bindEventListeners)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function init3() {
                if (init3.done) return false
                init3.done = true
                ;(0, _bindEventListeners2.default)()
                return true
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = makeSticky
              var _defer = __webpack_require__(5)
              var _defer2 = _interopRequireDefault(_defer)
              var _prefix = __webpack_require__(1)
              var _prefix2 = _interopRequireDefault(_prefix)
              var _isVisible = __webpack_require__(7)
              var _isVisible2 = _interopRequireDefault(_isVisible)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function makeSticky(refData) {
                var popper = refData.popper,
                  popperInstance = refData.popperInstance,
                  stickyDuration = refData.settings.stickyDuration
                var applyTransitionDuration = function applyTransitionDuration2() {
                  return (popper.style[(0, _prefix2.default)('transitionDuration')] = stickyDuration + 'ms')
                }
                var removeTransitionDuration = function removeTransitionDuration2() {
                  return (popper.style[(0, _prefix2.default)('transitionDuration')] = '')
                }
                var updatePosition = function updatePosition2() {
                  popperInstance && popperInstance.scheduleUpdate()
                  applyTransitionDuration()
                  ;(0, _isVisible2.default)(popper)
                    ? window.requestAnimationFrame(updatePosition2)
                    : removeTransitionDuration()
                }
                ;(0, _defer2.default)(updatePosition)
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = mountPopper
              var _globals = __webpack_require__(0)
              var _followCursorHandler = __webpack_require__(10)
              var _followCursorHandler2 = _interopRequireDefault(_followCursorHandler)
              var _createPopperInstance = __webpack_require__(18)
              var _createPopperInstance2 = _interopRequireDefault(_createPopperInstance)
              var _prefix = __webpack_require__(1)
              var _prefix2 = _interopRequireDefault(_prefix)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function mountPopper(data) {
                var el = data.el,
                  popper = data.popper,
                  _data$settings = data.settings,
                  appendTo = _data$settings.appendTo,
                  followCursor = _data$settings.followCursor
                if (appendTo.contains(popper)) return
                appendTo.appendChild(popper)
                if (!data.popperInstance) {
                  data.popperInstance = (0, _createPopperInstance2.default)(data)
                } else {
                  data.popperInstance.update()
                  if (!followCursor || _globals.Browser.touch) {
                    data.popperInstance.enableEventListeners()
                  }
                }
                if (followCursor && !_globals.Browser.touch) {
                  el.addEventListener('mousemove', _followCursorHandler2.default)
                  data.popperInstance.disableEventListeners()
                }
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = onTransitionEnd
              var _globals = __webpack_require__(0)
              var _getInnerElements2 = __webpack_require__(6)
              var _getInnerElements3 = _interopRequireDefault(_getInnerElements2)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function onTransitionEnd(data, duration, callback) {
                if (!duration) {
                  return callback()
                }
                var _getInnerElements = (0, _getInnerElements3.default)(data.popper),
                  tooltip = _getInnerElements.tooltip
                var transitionendFired = false
                var listenerCallback = function listenerCallback2(e) {
                  if (e.target === tooltip && !transitionendFired) {
                    transitionendFired = true
                    callback()
                  }
                }
                tooltip.addEventListener('webkitTransitionEnd', listenerCallback)
                tooltip.addEventListener('transitionend', listenerCallback)
                clearTimeout(data._transitionendTimeout)
                data._transitionendTimeout = setTimeout(function () {
                  if (!transitionendFired) {
                    callback()
                  }
                }, duration)
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              var _extends =
                Object.assign ||
                function (target) {
                  for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i]
                    for (var key in source) {
                      if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key]
                      }
                    }
                  }
                  return target
                }
              var _createClass = (function () {
                function defineProperties(target, props) {
                  for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i]
                    descriptor.enumerable = descriptor.enumerable || false
                    descriptor.configurable = true
                    if ('value' in descriptor) descriptor.writable = true
                    Object.defineProperty(target, descriptor.key, descriptor)
                  }
                }
                return function (Constructor, protoProps, staticProps) {
                  if (protoProps) defineProperties(Constructor.prototype, protoProps)
                  if (staticProps) defineProperties(Constructor, staticProps)
                  return Constructor
                }
              })()
              var _globals = __webpack_require__(0)
              var _reactDom = __webpack_require__(39)
              var _reactDom2 = _interopRequireDefault(_reactDom)
              var _init = __webpack_require__(26)
              var _init2 = _interopRequireDefault(_init)
              var _defer = __webpack_require__(5)
              var _defer2 = _interopRequireDefault(_defer)
              var _prefix = __webpack_require__(1)
              var _prefix2 = _interopRequireDefault(_prefix)
              var _find = __webpack_require__(2)
              var _find2 = _interopRequireDefault(_find)
              var _findIndex = __webpack_require__(34)
              var _findIndex2 = _interopRequireDefault(_findIndex)
              var _removeTitle = __webpack_require__(12)
              var _removeTitle2 = _interopRequireDefault(_removeTitle)
              var _elementIsInViewport = __webpack_require__(33)
              var _elementIsInViewport2 = _interopRequireDefault(_elementIsInViewport)
              var _triggerReflow = __webpack_require__(37)
              var _triggerReflow2 = _interopRequireDefault(_triggerReflow)
              var _modifyClassList = __webpack_require__(35)
              var _modifyClassList2 = _interopRequireDefault(_modifyClassList)
              var _getInnerElements4 = __webpack_require__(6)
              var _getInnerElements5 = _interopRequireDefault(_getInnerElements4)
              var _applyTransitionDuration = __webpack_require__(31)
              var _applyTransitionDuration2 = _interopRequireDefault(_applyTransitionDuration)
              var _isVisible = __webpack_require__(7)
              var _isVisible2 = _interopRequireDefault(_isVisible)
              var _noop = __webpack_require__(36)
              var _noop2 = _interopRequireDefault(_noop)
              var _followCursorHandler = __webpack_require__(10)
              var _followCursorHandler2 = _interopRequireDefault(_followCursorHandler)
              var _getArrayOfElements = __webpack_require__(22)
              var _getArrayOfElements2 = _interopRequireDefault(_getArrayOfElements)
              var _onTransitionEnd = __webpack_require__(29)
              var _onTransitionEnd2 = _interopRequireDefault(_onTransitionEnd)
              var _mountPopper = __webpack_require__(28)
              var _mountPopper2 = _interopRequireDefault(_mountPopper)
              var _makeSticky = __webpack_require__(27)
              var _makeSticky2 = _interopRequireDefault(_makeSticky)
              var _createTooltips = __webpack_require__(19)
              var _createTooltips2 = _interopRequireDefault(_createTooltips)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function _defineProperty(obj, key, value) {
                if (key in obj) {
                  Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true })
                } else {
                  obj[key] = value
                }
                return obj
              }
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError('Cannot call a class as a function')
                }
              }
              var Tippy2 = (function () {
                function Tippy3(selector) {
                  var settings = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}
                  _classCallCheck(this, Tippy3)
                  if (!_globals.Browser.SUPPORTED) return
                  ;(0, _init2.default)()
                  this.state = {
                    destroyed: false,
                  }
                  this.selector = selector
                  this.settings = _extends({}, _globals.Defaults, settings)
                  if (settings.show || settings.shown || settings.hide || settings.hidden) {
                    console.warn(
                      'Callbacks without the `on` prefix are deprecated (with the exception of `wait`). Use onShow, onShown, onHide, and onHidden instead.'
                    )
                  }
                  this.callbacks = {
                    wait: settings.wait,
                    show: settings.onShow || settings.show || _noop2.default,
                    shown: settings.onShown || settings.shown || _noop2.default,
                    hide: settings.onHide || settings.hide || _noop2.default,
                    hidden: settings.onHidden || settings.hidden || _noop2.default,
                  }
                  this.store = _createTooltips2.default.call(this, (0, _getArrayOfElements2.default)(selector))
                  _globals.Store.push.apply(_globals.Store, this.store)
                }
                _createClass(Tippy3, [
                  {
                    key: 'getPopperElement',
                    value: function getPopperElement(el) {
                      try {
                        return (0, _find2.default)(this.store, function (data) {
                          return data.el === el
                        }).popper
                      } catch (e) {
                        console.error(
                          '[getPopperElement]: Element passed as the argument does not exist in the instance'
                        )
                      }
                    },
                  },
                  {
                    key: 'getReferenceElement',
                    value: function getReferenceElement(popper) {
                      try {
                        return (0, _find2.default)(this.store, function (data) {
                          return data.popper === popper
                        }).el
                      } catch (e) {
                        console.error(
                          '[getReferenceElement]: Popper passed as the argument does not exist in the instance'
                        )
                      }
                    },
                  },
                  {
                    key: 'getReferenceData',
                    value: function getReferenceData(x) {
                      return (0, _find2.default)(this.store, function (data) {
                        return data.el === x || data.popper === x
                      })
                    },
                  },
                  {
                    key: 'updateSettings',
                    value: function updateSettings(popper, name, value) {
                      var data = (0, _find2.default)(this.store, function (data2) {
                        return data2.popper === popper
                      })
                      if (!data) return
                      var newSettings = _extends({}, data.settings, _defineProperty({}, name, value))
                      data.settings = newSettings
                    },
                  },
                  {
                    key: 'updateForReact',
                    value: function updateForReact(popper, updatedContent) {
                      var tooltipContent = popper.querySelector(_globals.Selectors.CONTENT)
                      var data = (0, _find2.default)(this.store, function (data2) {
                        return data2.popper === popper
                      })
                      if (!data) return
                      var _data$settings = data.settings,
                        useContext4 = _data$settings.useContext,
                        setReactDOMValue = _data$settings.setReactDOMValue
                      if (useContext4) {
                        setReactDOMValue(_reactDom2.default.createPortal(updatedContent, tooltipContent))
                      } else {
                        _reactDom2.default.render(updatedContent, tooltipContent)
                      }
                    },
                  },
                  {
                    key: 'show',
                    value: function show(popper, customDuration) {
                      var _this = this
                      if (this.state.destroyed) return
                      var data = (0, _find2.default)(this.store, function (data2) {
                        return data2.popper === popper
                      })
                      if (!data) return
                      var _getInnerElements = (0, _getInnerElements5.default)(popper),
                        tooltip = _getInnerElements.tooltip,
                        circle = _getInnerElements.circle,
                        content = _getInnerElements.content
                      if (!document.body.contains(data.el)) {
                        this.destroy(popper)
                        return
                      }
                      this.callbacks.show.call(popper)
                      if (data.settings && data.settings.open === false) {
                        return
                      }
                      if (data.settings.reactDOM) {
                        this.updateForReact(popper, data.settings.reactDOM)
                      }
                      var el = data.el,
                        _data$settings2 = data.settings,
                        appendTo = _data$settings2.appendTo,
                        sticky = _data$settings2.sticky,
                        interactive = _data$settings2.interactive,
                        followCursor = _data$settings2.followCursor,
                        flipDuration = _data$settings2.flipDuration,
                        duration = _data$settings2.duration,
                        dynamicTitle = _data$settings2.dynamicTitle
                      if (dynamicTitle) {
                        var title = el.getAttribute('title')
                        if (title) {
                          content.innerHTML = title
                          ;(0, _removeTitle2.default)(el)
                        }
                      }
                      var _duration =
                        customDuration !== void 0 ? customDuration : Array.isArray(duration) ? duration[0] : duration
                      ;(0, _applyTransitionDuration2.default)([popper, tooltip, circle], 0)
                      ;(0, _mountPopper2.default)(data)
                      popper.style.visibility = 'visible'
                      popper.setAttribute('aria-hidden', 'false')
                      ;(0, _defer2.default)(function () {
                        if (!followCursor || _globals.Browser.touch) {
                          data.popperInstance.update()
                          ;(0, _applyTransitionDuration2.default)([popper], flipDuration)
                        }
                        ;(0, _applyTransitionDuration2.default)([tooltip, circle], _duration)
                        if (circle) content.style.opacity = 1
                        interactive && el.classList.add('active')
                        sticky && (0, _makeSticky2.default)(data)
                        ;(0, _triggerReflow2.default)(tooltip, circle)
                        ;(0, _modifyClassList2.default)([tooltip, circle], function (list) {
                          list.contains('tippy-notransition') && list.remove('tippy-notransition')
                          list.remove('leave')
                          list.add('enter')
                        })
                        ;(0, _onTransitionEnd2.default)(data, _duration, function () {
                          if (!(0, _isVisible2.default)(popper) || data._onShownFired) return
                          interactive && popper.focus()
                          tooltip.classList.add('tippy-notransition')
                          data._onShownFired = true
                          _this.callbacks.shown.call(popper)
                        })
                      })
                    },
                  },
                  {
                    key: 'hide',
                    value: function hide(popper, customDuration) {
                      var _this2 = this
                      if (this.state.destroyed) return
                      this.callbacks.hide.call(popper)
                      var data = (0, _find2.default)(this.store, function (data2) {
                        return data2.popper === popper
                      })
                      if (!data) return
                      var _getInnerElements2 = (0, _getInnerElements5.default)(popper),
                        tooltip = _getInnerElements2.tooltip,
                        circle = _getInnerElements2.circle,
                        content = _getInnerElements2.content
                      if (data.settings.disabled === false && data && data.settings.open) {
                        return
                      }
                      var isUnmount =
                        data && data.settings && data.settings.unmountHTMLWhenHide && data.settings.reactDOM
                      var el = data.el,
                        _data$settings3 = data.settings,
                        appendTo = _data$settings3.appendTo,
                        sticky = _data$settings3.sticky,
                        interactive = _data$settings3.interactive,
                        followCursor = _data$settings3.followCursor,
                        html = _data$settings3.html,
                        trigger = _data$settings3.trigger,
                        duration = _data$settings3.duration
                      var _duration =
                        customDuration !== void 0 ? customDuration : Array.isArray(duration) ? duration[1] : duration
                      data._onShownFired = false
                      interactive && el.classList.remove('active')
                      popper.style.visibility = 'hidden'
                      popper.setAttribute('aria-hidden', 'true')
                      ;(0, _applyTransitionDuration2.default)([tooltip, circle, circle ? content : null], _duration)
                      if (circle) content.style.opacity = 0
                      ;(0, _modifyClassList2.default)([tooltip, circle], function (list) {
                        list.contains('tippy-tooltip') && list.remove('tippy-notransition')
                        list.remove('enter')
                        list.add('leave')
                      })
                      if (html && trigger.indexOf('click') !== -1 && (0, _elementIsInViewport2.default)(el)) {
                        el.focus()
                      }
                      ;(0, _onTransitionEnd2.default)(data, _duration, function () {
                        if (
                          (0, _isVisible2.default)(popper) ||
                          !appendTo.contains(popper) ||
                          getComputedStyle(tooltip).opacity === '1'
                        )
                          return
                        el.removeEventListener('mousemove', _followCursorHandler2.default)
                        data.popperInstance.disableEventListeners()
                        appendTo.removeChild(popper)
                        _this2.callbacks.hidden.call(popper)
                        if (isUnmount) {
                          _reactDom2.default.unmountComponentAtNode(content)
                        }
                      })
                    },
                  },
                  {
                    key: 'update',
                    value: function update(popper) {
                      if (this.state.destroyed) return
                      var data = (0, _find2.default)(this.store, function (data2) {
                        return data2.popper === popper
                      })
                      if (!data) return
                      var _getInnerElements3 = (0, _getInnerElements5.default)(popper),
                        content = _getInnerElements3.content
                      var el = data.el,
                        html = data.settings.html
                      if (html instanceof Element) {
                        console.warn('Aborted: update() should not be used if `html` is a DOM element')
                        return
                      }
                      content.innerHTML = html
                        ? document.getElementById(html.replace('#', '')).innerHTML
                        : el.getAttribute('title') || el.getAttribute('data-original-title')
                      if (!html) (0, _removeTitle2.default)(el)
                    },
                  },
                  {
                    key: 'destroy',
                    value: function destroy(popper, _isLast) {
                      var _this3 = this
                      if (this.state.destroyed) return
                      var data = (0, _find2.default)(this.store, function (data2) {
                        return data2.popper === popper
                      })
                      if (!data) return
                      var el = data.el,
                        popperInstance = data.popperInstance,
                        listeners = data.listeners,
                        _mutationObserver = data._mutationObserver
                      if ((0, _isVisible2.default)(popper)) {
                        this.hide(popper, 0)
                      }
                      listeners.forEach(function (listener) {
                        return el.removeEventListener(listener.event, listener.handler)
                      })
                      el.setAttribute('title', el.getAttribute('data-original-title'))
                      el.removeAttribute('data-original-title')
                      el.removeAttribute('data-tooltipped')
                      el.removeAttribute('aria-describedby')
                      popperInstance && popperInstance.destroy()
                      _mutationObserver && _mutationObserver.disconnect()
                      _globals.Store.splice(
                        (0, _findIndex2.default)(_globals.Store, function (data2) {
                          return data2.popper === popper
                        }),
                        1
                      )
                      if (_isLast === void 0 || _isLast) {
                        this.store = _globals.Store.filter(function (data2) {
                          return data2.tippyInstance === _this3
                        })
                      }
                    },
                  },
                  {
                    key: 'destroyAll',
                    value: function destroyAll() {
                      var _this4 = this
                      if (this.state.destroyed) return
                      var storeLength = this.store.length
                      this.store.forEach(function (_ref, index) {
                        var popper = _ref.popper
                        _this4.destroy(popper, index === storeLength - 1)
                      })
                      this.store = null
                      this.state.destroyed = true
                    },
                  },
                ])
                return Tippy3
              })()
              function tippy(selector, settings) {
                return new Tippy2(selector, settings)
              }
              tippy.Browser = _globals.Browser
              tippy.Defaults = _globals.Defaults
              tippy.disableDynamicInputDetection = function () {
                return (_globals.Browser.dynamicInputDetection = false)
              }
              tippy.enableDynamicInputDetection = function () {
                return (_globals.Browser.dynamicInputDetection = true)
              }
              exports2.default = tippy
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = applyTransitionDuration
              var _globals = __webpack_require__(0)
              var _prefix = __webpack_require__(1)
              var _prefix2 = _interopRequireDefault(_prefix)
              var _matches = __webpack_require__(8)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function applyTransitionDuration(els, duration) {
                els.forEach(function (el) {
                  if (!el) return
                  var isContent = _matches.matches.call(el, _globals.Selectors.CONTENT)
                  var _duration = isContent ? Math.round(duration / 1.3) : duration
                  el.style[(0, _prefix2.default)('transitionDuration')] = _duration + 'ms'
                })
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = cursorIsOutsideInteractiveBorder
              var _getCorePlacement = __webpack_require__(3)
              var _getCorePlacement2 = _interopRequireDefault(_getCorePlacement)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function cursorIsOutsideInteractiveBorder(event, popper, settings) {
                if (!popper.getAttribute('x-placement')) return true
                var x = event.clientX,
                  y = event.clientY
                var interactiveBorder = settings.interactiveBorder,
                  distance = settings.distance
                var rect = popper.getBoundingClientRect()
                var corePosition = (0, _getCorePlacement2.default)(popper.getAttribute('x-placement'))
                var borderWithDistance = interactiveBorder + distance
                var exceeds = {
                  top: rect.top - y > interactiveBorder,
                  bottom: y - rect.bottom > interactiveBorder,
                  left: rect.left - x > interactiveBorder,
                  right: x - rect.right > interactiveBorder,
                }
                switch (corePosition) {
                  case 'top':
                    exceeds.top = rect.top - y > borderWithDistance
                    break
                  case 'bottom':
                    exceeds.bottom = y - rect.bottom > borderWithDistance
                    break
                  case 'left':
                    exceeds.left = rect.left - x > borderWithDistance
                    break
                  case 'right':
                    exceeds.right = x - rect.right > borderWithDistance
                    break
                }
                return exceeds.top || exceeds.bottom || exceeds.left || exceeds.right
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = elementIsInViewport
              function elementIsInViewport(el) {
                var rect = el.getBoundingClientRect()
                return (
                  rect.top >= 0 &&
                  rect.left >= 0 &&
                  rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                  rect.right <= (window.innerWidth || document.documentElement.clientWidth)
                )
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = findIndex
              var _find = __webpack_require__(2)
              var _find2 = _interopRequireDefault(_find)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function findIndex(arr, checkFn) {
                if (Array.prototype.findIndex) {
                  return arr.findIndex(checkFn)
                }
                return arr.indexOf((0, _find2.default)(arr, checkFn))
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = modifyClassList
              function modifyClassList(els, callback) {
                els.forEach(function (el) {
                  if (!el) return
                  callback(el.classList)
                })
              }
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = noop
              function noop() {}
            },
            function (module3, exports2, __webpack_require__) {
              'use strict'
              Object.defineProperty(exports2, '__esModule', {
                value: true,
              })
              exports2.default = triggerReflow
              var _prefix = __webpack_require__(1)
              var _prefix2 = _interopRequireDefault(_prefix)
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj }
              }
              function triggerReflow(tooltip, circle) {
                circle
                  ? window.getComputedStyle(circle)[(0, _prefix2.default)('transform')]
                  : window.getComputedStyle(tooltip).opacity
              }
            },
            function (module3, exports2) {
              module3.exports = __WEBPACK_EXTERNAL_MODULE_38__
            },
            function (module3, exports2) {
              module3.exports = __WEBPACK_EXTERNAL_MODULE_39__
            },
          ])
        }
      )
    },
  })

  // src/mounts/panel.tsx
  var import_react8 = __toModule(require_react())
  var import_react_dom = __toModule(require_react_dom())

  // node_modules/tslib/modules/index.js
  var import_tslib = __toModule(require_tslib())
  var {
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __exportStar,
    __createBinding,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet,
  } = import_tslib.default

  // node_modules/@sentry/types/esm/session.js
  var SessionStatus
  ;(function (SessionStatus2) {
    SessionStatus2['Ok'] = 'ok'
    SessionStatus2['Exited'] = 'exited'
    SessionStatus2['Crashed'] = 'crashed'
    SessionStatus2['Abnormal'] = 'abnormal'
  })(SessionStatus || (SessionStatus = {}))
  var RequestSessionStatus
  ;(function (RequestSessionStatus2) {
    RequestSessionStatus2['Ok'] = 'ok'
    RequestSessionStatus2['Errored'] = 'errored'
    RequestSessionStatus2['Crashed'] = 'crashed'
  })(RequestSessionStatus || (RequestSessionStatus = {}))

  // node_modules/@sentry/types/esm/severity.js
  var Severity
  ;(function (Severity2) {
    Severity2['Fatal'] = 'fatal'
    Severity2['Error'] = 'error'
    Severity2['Warning'] = 'warning'
    Severity2['Log'] = 'log'
    Severity2['Info'] = 'info'
    Severity2['Debug'] = 'debug'
    Severity2['Critical'] = 'critical'
  })(Severity || (Severity = {}))
  ;(function (Severity2) {
    function fromString(level) {
      switch (level) {
        case 'debug':
          return Severity2.Debug
        case 'info':
          return Severity2.Info
        case 'warn':
        case 'warning':
          return Severity2.Warning
        case 'error':
          return Severity2.Error
        case 'fatal':
          return Severity2.Fatal
        case 'critical':
          return Severity2.Critical
        case 'log':
        default:
          return Severity2.Log
      }
    }
    Severity2.fromString = fromString
  })(Severity || (Severity = {}))

  // node_modules/@sentry/types/esm/status.js
  var Status
  ;(function (Status2) {
    Status2['Unknown'] = 'unknown'
    Status2['Skipped'] = 'skipped'
    Status2['Success'] = 'success'
    Status2['RateLimit'] = 'rate_limit'
    Status2['Invalid'] = 'invalid'
    Status2['Failed'] = 'failed'
  })(Status || (Status = {}))
  ;(function (Status2) {
    function fromHttpCode(code) {
      if (code >= 200 && code < 300) {
        return Status2.Success
      }
      if (code === 429) {
        return Status2.RateLimit
      }
      if (code >= 400 && code < 500) {
        return Status2.Invalid
      }
      if (code >= 500) {
        return Status2.Failed
      }
      return Status2.Unknown
    }
    Status2.fromHttpCode = fromHttpCode
  })(Status || (Status = {}))

  // node_modules/@sentry/types/esm/transaction.js
  var TransactionSamplingMethod
  ;(function (TransactionSamplingMethod2) {
    TransactionSamplingMethod2['Explicit'] = 'explicitly_set'
    TransactionSamplingMethod2['Sampler'] = 'client_sampler'
    TransactionSamplingMethod2['Rate'] = 'client_rate'
    TransactionSamplingMethod2['Inheritance'] = 'inheritance'
  })(TransactionSamplingMethod || (TransactionSamplingMethod = {}))

  // node_modules/@sentry/utils/esm/is.js
  function isError(wat) {
    switch (Object.prototype.toString.call(wat)) {
      case '[object Error]':
        return true
      case '[object Exception]':
        return true
      case '[object DOMException]':
        return true
      default:
        return isInstanceOf(wat, Error)
    }
  }
  function isErrorEvent(wat) {
    return Object.prototype.toString.call(wat) === '[object ErrorEvent]'
  }
  function isDOMError(wat) {
    return Object.prototype.toString.call(wat) === '[object DOMError]'
  }
  function isDOMException(wat) {
    return Object.prototype.toString.call(wat) === '[object DOMException]'
  }
  function isString(wat) {
    return Object.prototype.toString.call(wat) === '[object String]'
  }
  function isPrimitive(wat) {
    return wat === null || (typeof wat !== 'object' && typeof wat !== 'function')
  }
  function isPlainObject(wat) {
    return Object.prototype.toString.call(wat) === '[object Object]'
  }
  function isEvent(wat) {
    return typeof Event !== 'undefined' && isInstanceOf(wat, Event)
  }
  function isElement(wat) {
    return typeof Element !== 'undefined' && isInstanceOf(wat, Element)
  }
  function isRegExp(wat) {
    return Object.prototype.toString.call(wat) === '[object RegExp]'
  }
  function isThenable(wat) {
    return Boolean(wat && wat.then && typeof wat.then === 'function')
  }
  function isSyntheticEvent(wat) {
    return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat
  }
  function isInstanceOf(wat, base) {
    try {
      return wat instanceof base
    } catch (_e) {
      return false
    }
  }

  // node_modules/@sentry/utils/esm/browser.js
  function htmlTreeAsString(elem, keyAttrs) {
    try {
      var currentElem = elem
      var MAX_TRAVERSE_HEIGHT = 5
      var MAX_OUTPUT_LEN = 80
      var out = []
      var height = 0
      var len = 0
      var separator = ' > '
      var sepLength = separator.length
      var nextStr = void 0
      while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {
        nextStr = _htmlElementAsString(currentElem, keyAttrs)
        if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {
          break
        }
        out.push(nextStr)
        len += nextStr.length
        currentElem = currentElem.parentNode
      }
      return out.reverse().join(separator)
    } catch (_oO) {
      return '<unknown>'
    }
  }
  function _htmlElementAsString(el, keyAttrs) {
    var _a, _b
    var elem = el
    var out = []
    var className
    var classes
    var key
    var attr
    var i
    if (!elem || !elem.tagName) {
      return ''
    }
    out.push(elem.tagName.toLowerCase())
    var keyAttrPairs = ((_a = keyAttrs) === null || _a === void 0 ? void 0 : _a.length)
      ? keyAttrs
          .filter(function (keyAttr) {
            return elem.getAttribute(keyAttr)
          })
          .map(function (keyAttr) {
            return [keyAttr, elem.getAttribute(keyAttr)]
          })
      : null
    if ((_b = keyAttrPairs) === null || _b === void 0 ? void 0 : _b.length) {
      keyAttrPairs.forEach(function (keyAttrPair) {
        out.push('[' + keyAttrPair[0] + '="' + keyAttrPair[1] + '"]')
      })
    } else {
      if (elem.id) {
        out.push('#' + elem.id)
      }
      className = elem.className
      if (className && isString(className)) {
        classes = className.split(/\s+/)
        for (i = 0; i < classes.length; i++) {
          out.push('.' + classes[i])
        }
      }
    }
    var allowedAttrs = ['type', 'name', 'title', 'alt']
    for (i = 0; i < allowedAttrs.length; i++) {
      key = allowedAttrs[i]
      attr = elem.getAttribute(key)
      if (attr) {
        out.push('[' + key + '="' + attr + '"]')
      }
    }
    return out.join('')
  }

  // node_modules/@sentry/utils/esm/polyfill.js
  var setPrototypeOf = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties)
  function setProtoOf(obj, proto) {
    obj.__proto__ = proto
    return obj
  }
  function mixinProperties(obj, proto) {
    for (var prop in proto) {
      if (!obj.hasOwnProperty(prop)) {
        obj[prop] = proto[prop]
      }
    }
    return obj
  }

  // node_modules/@sentry/utils/esm/error.js
  var SentryError = (function (_super) {
    __extends(SentryError2, _super)
    function SentryError2(message) {
      var _newTarget = this.constructor
      var _this = _super.call(this, message) || this
      _this.message = message
      _this.name = _newTarget.prototype.constructor.name
      setPrototypeOf(_this, _newTarget.prototype)
      return _this
    }
    return SentryError2
  })(Error)

  // node_modules/@sentry/utils/esm/dsn.js
  var DSN_REGEX = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w.-]+)(?::(\d+))?\/(.+)/
  var ERROR_MESSAGE = 'Invalid Dsn'
  var Dsn = (function () {
    function Dsn2(from) {
      if (typeof from === 'string') {
        this._fromString(from)
      } else {
        this._fromComponents(from)
      }
      this._validate()
    }
    Dsn2.prototype.toString = function (withPassword) {
      if (withPassword === void 0) {
        withPassword = false
      }
      var _a = this,
        host = _a.host,
        path = _a.path,
        pass = _a.pass,
        port = _a.port,
        projectId = _a.projectId,
        protocol = _a.protocol,
        publicKey = _a.publicKey
      return (
        protocol +
        '://' +
        publicKey +
        (withPassword && pass ? ':' + pass : '') +
        ('@' + host + (port ? ':' + port : '') + '/' + (path ? path + '/' : path) + projectId)
      )
    }
    Dsn2.prototype._fromString = function (str) {
      var match = DSN_REGEX.exec(str)
      if (!match) {
        throw new SentryError(ERROR_MESSAGE)
      }
      var _a = __read(match.slice(1), 6),
        protocol = _a[0],
        publicKey = _a[1],
        _b = _a[2],
        pass = _b === void 0 ? '' : _b,
        host = _a[3],
        _c = _a[4],
        port = _c === void 0 ? '' : _c,
        lastPath = _a[5]
      var path = ''
      var projectId = lastPath
      var split = projectId.split('/')
      if (split.length > 1) {
        path = split.slice(0, -1).join('/')
        projectId = split.pop()
      }
      if (projectId) {
        var projectMatch = projectId.match(/^\d+/)
        if (projectMatch) {
          projectId = projectMatch[0]
        }
      }
      this._fromComponents({ host, pass, path, projectId, port, protocol, publicKey })
    }
    Dsn2.prototype._fromComponents = function (components) {
      if ('user' in components && !('publicKey' in components)) {
        components.publicKey = components.user
      }
      this.user = components.publicKey || ''
      this.protocol = components.protocol
      this.publicKey = components.publicKey || ''
      this.pass = components.pass || ''
      this.host = components.host
      this.port = components.port || ''
      this.path = components.path || ''
      this.projectId = components.projectId
    }
    Dsn2.prototype._validate = function () {
      var _this = this
      ;['protocol', 'publicKey', 'host', 'projectId'].forEach(function (component) {
        if (!_this[component]) {
          throw new SentryError(ERROR_MESSAGE + ': ' + component + ' missing')
        }
      })
      if (!this.projectId.match(/^\d+$/)) {
        throw new SentryError(ERROR_MESSAGE + ': Invalid projectId ' + this.projectId)
      }
      if (this.protocol !== 'http' && this.protocol !== 'https') {
        throw new SentryError(ERROR_MESSAGE + ': Invalid protocol ' + this.protocol)
      }
      if (this.port && isNaN(parseInt(this.port, 10))) {
        throw new SentryError(ERROR_MESSAGE + ': Invalid port ' + this.port)
      }
    }
    return Dsn2
  })()

  // node_modules/@sentry/utils/esm/node.js
  function isNodeEnv() {
    return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'
  }
  function dynamicRequire(mod, request) {
    return mod.require(request)
  }
  function loadModule(moduleName) {
    var mod
    try {
      mod = dynamicRequire(module, moduleName)
    } catch (e) {}
    try {
      var cwd = dynamicRequire(module, 'process').cwd
      mod = dynamicRequire(module, cwd() + '/node_modules/' + moduleName)
    } catch (e) {}
    return mod
  }

  // node_modules/@sentry/utils/esm/string.js
  function truncate(str, max) {
    if (max === void 0) {
      max = 0
    }
    if (typeof str !== 'string' || max === 0) {
      return str
    }
    return str.length <= max ? str : str.substr(0, max) + '...'
  }
  function safeJoin(input, delimiter) {
    if (!Array.isArray(input)) {
      return ''
    }
    var output = []
    for (var i = 0; i < input.length; i++) {
      var value = input[i]
      try {
        output.push(String(value))
      } catch (e) {
        output.push('[value cannot be serialized]')
      }
    }
    return output.join(delimiter)
  }
  function isMatchingPattern(value, pattern) {
    if (!isString(value)) {
      return false
    }
    if (isRegExp(pattern)) {
      return pattern.test(value)
    }
    if (typeof pattern === 'string') {
      return value.indexOf(pattern) !== -1
    }
    return false
  }

  // node_modules/@sentry/utils/esm/misc.js
  var fallbackGlobalObject = {}
  function getGlobalObject() {
    return isNodeEnv()
      ? global
      : typeof window !== 'undefined'
      ? window
      : typeof self !== 'undefined'
      ? self
      : fallbackGlobalObject
  }
  function uuid4() {
    var global8 = getGlobalObject()
    var crypto = global8.crypto || global8.msCrypto
    if (!(crypto === void 0) && crypto.getRandomValues) {
      var arr = new Uint16Array(8)
      crypto.getRandomValues(arr)
      arr[3] = (arr[3] & 4095) | 16384
      arr[4] = (arr[4] & 16383) | 32768
      var pad = function (num) {
        var v = num.toString(16)
        while (v.length < 4) {
          v = '0' + v
        }
        return v
      }
      return (
        pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])
      )
    }
    return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = (Math.random() * 16) | 0
      var v = c === 'x' ? r : (r & 3) | 8
      return v.toString(16)
    })
  }
  function parseUrl(url) {
    if (!url) {
      return {}
    }
    var match = url.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/)
    if (!match) {
      return {}
    }
    var query = match[6] || ''
    var fragment = match[8] || ''
    return {
      host: match[4],
      path: match[5],
      protocol: match[2],
      relative: match[5] + query + fragment,
    }
  }
  function getEventDescription(event) {
    if (event.message) {
      return event.message
    }
    if (event.exception && event.exception.values && event.exception.values[0]) {
      var exception = event.exception.values[0]
      if (exception.type && exception.value) {
        return exception.type + ': ' + exception.value
      }
      return exception.type || exception.value || event.event_id || '<unknown>'
    }
    return event.event_id || '<unknown>'
  }
  function consoleSandbox(callback) {
    var global8 = getGlobalObject()
    var levels = ['debug', 'info', 'warn', 'error', 'log', 'assert']
    if (!('console' in global8)) {
      return callback()
    }
    var originalConsole = global8.console
    var wrappedLevels = {}
    levels.forEach(function (level) {
      if (level in global8.console && originalConsole[level].__sentry_original__) {
        wrappedLevels[level] = originalConsole[level]
        originalConsole[level] = originalConsole[level].__sentry_original__
      }
    })
    var result = callback()
    Object.keys(wrappedLevels).forEach(function (level) {
      originalConsole[level] = wrappedLevels[level]
    })
    return result
  }
  function addExceptionTypeValue(event, value, type) {
    event.exception = event.exception || {}
    event.exception.values = event.exception.values || []
    event.exception.values[0] = event.exception.values[0] || {}
    event.exception.values[0].value = event.exception.values[0].value || value || ''
    event.exception.values[0].type = event.exception.values[0].type || type || 'Error'
  }
  function addExceptionMechanism(event, mechanism) {
    if (mechanism === void 0) {
      mechanism = {}
    }
    try {
      event.exception.values[0].mechanism = event.exception.values[0].mechanism || {}
      Object.keys(mechanism).forEach(function (key) {
        event.exception.values[0].mechanism[key] = mechanism[key]
      })
    } catch (_oO) {}
  }
  function getLocationHref() {
    try {
      return document.location.href
    } catch (oO) {
      return ''
    }
  }
  var SEMVER_REGEXP =
    /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  function parseSemver(input) {
    var match = input.match(SEMVER_REGEXP) || []
    var major = parseInt(match[1], 10)
    var minor = parseInt(match[2], 10)
    var patch = parseInt(match[3], 10)
    return {
      buildmetadata: match[5],
      major: isNaN(major) ? void 0 : major,
      minor: isNaN(minor) ? void 0 : minor,
      patch: isNaN(patch) ? void 0 : patch,
      prerelease: match[4],
    }
  }
  var defaultRetryAfter = 60 * 1e3
  function parseRetryAfterHeader(now, header) {
    if (!header) {
      return defaultRetryAfter
    }
    var headerDelay = parseInt('' + header, 10)
    if (!isNaN(headerDelay)) {
      return headerDelay * 1e3
    }
    var headerDate = Date.parse('' + header)
    if (!isNaN(headerDate)) {
      return headerDate - now
    }
    return defaultRetryAfter
  }

  // node_modules/@sentry/utils/esm/logger.js
  var global2 = getGlobalObject()
  var PREFIX = 'Sentry Logger '
  var Logger = (function () {
    function Logger2() {
      this._enabled = false
    }
    Logger2.prototype.disable = function () {
      this._enabled = false
    }
    Logger2.prototype.enable = function () {
      this._enabled = true
    }
    Logger2.prototype.log = function () {
      var args = []
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i]
      }
      if (!this._enabled) {
        return
      }
      consoleSandbox(function () {
        global2.console.log(PREFIX + '[Log]: ' + args.join(' '))
      })
    }
    Logger2.prototype.warn = function () {
      var args = []
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i]
      }
      if (!this._enabled) {
        return
      }
      consoleSandbox(function () {
        global2.console.warn(PREFIX + '[Warn]: ' + args.join(' '))
      })
    }
    Logger2.prototype.error = function () {
      var args = []
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i]
      }
      if (!this._enabled) {
        return
      }
      consoleSandbox(function () {
        global2.console.error(PREFIX + '[Error]: ' + args.join(' '))
      })
    }
    return Logger2
  })()
  global2.__SENTRY__ = global2.__SENTRY__ || {}
  var logger = global2.__SENTRY__.logger || (global2.__SENTRY__.logger = new Logger())

  // node_modules/@sentry/utils/esm/memo.js
  var Memo = (function () {
    function Memo2() {
      this._hasWeakSet = typeof WeakSet === 'function'
      this._inner = this._hasWeakSet ? new WeakSet() : []
    }
    Memo2.prototype.memoize = function (obj) {
      if (this._hasWeakSet) {
        if (this._inner.has(obj)) {
          return true
        }
        this._inner.add(obj)
        return false
      }
      for (var i = 0; i < this._inner.length; i++) {
        var value = this._inner[i]
        if (value === obj) {
          return true
        }
      }
      this._inner.push(obj)
      return false
    }
    Memo2.prototype.unmemoize = function (obj) {
      if (this._hasWeakSet) {
        this._inner.delete(obj)
      } else {
        for (var i = 0; i < this._inner.length; i++) {
          if (this._inner[i] === obj) {
            this._inner.splice(i, 1)
            break
          }
        }
      }
    }
    return Memo2
  })()

  // node_modules/@sentry/utils/esm/stacktrace.js
  var defaultFunctionName = '<anonymous>'
  function getFunctionName(fn) {
    try {
      if (!fn || typeof fn !== 'function') {
        return defaultFunctionName
      }
      return fn.name || defaultFunctionName
    } catch (e) {
      return defaultFunctionName
    }
  }

  // node_modules/@sentry/utils/esm/object.js
  function fill(source, name, replacementFactory) {
    if (!(name in source)) {
      return
    }
    var original = source[name]
    var wrapped = replacementFactory(original)
    if (typeof wrapped === 'function') {
      try {
        wrapped.prototype = wrapped.prototype || {}
        Object.defineProperties(wrapped, {
          __sentry_original__: {
            enumerable: false,
            value: original,
          },
        })
      } catch (_Oo) {}
    }
    source[name] = wrapped
  }
  function urlEncode(object) {
    return Object.keys(object)
      .map(function (key) {
        return encodeURIComponent(key) + '=' + encodeURIComponent(object[key])
      })
      .join('&')
  }
  function getWalkSource(value) {
    if (isError(value)) {
      var error = value
      var err = {
        message: error.message,
        name: error.name,
        stack: error.stack,
      }
      for (var i in error) {
        if (Object.prototype.hasOwnProperty.call(error, i)) {
          err[i] = error[i]
        }
      }
      return err
    }
    if (isEvent(value)) {
      var event_1 = value
      var source = {}
      source.type = event_1.type
      try {
        source.target = isElement(event_1.target)
          ? htmlTreeAsString(event_1.target)
          : Object.prototype.toString.call(event_1.target)
      } catch (_oO) {
        source.target = '<unknown>'
      }
      try {
        source.currentTarget = isElement(event_1.currentTarget)
          ? htmlTreeAsString(event_1.currentTarget)
          : Object.prototype.toString.call(event_1.currentTarget)
      } catch (_oO) {
        source.currentTarget = '<unknown>'
      }
      if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {
        source.detail = event_1.detail
      }
      for (var i in event_1) {
        if (Object.prototype.hasOwnProperty.call(event_1, i)) {
          source[i] = event_1
        }
      }
      return source
    }
    return value
  }
  function utf8Length(value) {
    return ~-encodeURI(value).split(/%..|./).length
  }
  function jsonSize(value) {
    return utf8Length(JSON.stringify(value))
  }
  function normalizeToSize(object, depth, maxSize) {
    if (depth === void 0) {
      depth = 3
    }
    if (maxSize === void 0) {
      maxSize = 100 * 1024
    }
    var serialized = normalize(object, depth)
    if (jsonSize(serialized) > maxSize) {
      return normalizeToSize(object, depth - 1, maxSize)
    }
    return serialized
  }
  function serializeValue(value) {
    var type = Object.prototype.toString.call(value)
    if (typeof value === 'string') {
      return value
    }
    if (type === '[object Object]') {
      return '[Object]'
    }
    if (type === '[object Array]') {
      return '[Array]'
    }
    var normalized = normalizeValue(value)
    return isPrimitive(normalized) ? normalized : type
  }
  function normalizeValue(value, key) {
    if (key === 'domain' && value && typeof value === 'object' && value._events) {
      return '[Domain]'
    }
    if (key === 'domainEmitter') {
      return '[DomainEmitter]'
    }
    if (typeof global !== 'undefined' && value === global) {
      return '[Global]'
    }
    if (typeof window !== 'undefined' && value === window) {
      return '[Window]'
    }
    if (typeof document !== 'undefined' && value === document) {
      return '[Document]'
    }
    if (isSyntheticEvent(value)) {
      return '[SyntheticEvent]'
    }
    if (typeof value === 'number' && value !== value) {
      return '[NaN]'
    }
    if (value === void 0) {
      return '[undefined]'
    }
    if (typeof value === 'function') {
      return '[Function: ' + getFunctionName(value) + ']'
    }
    if (typeof value === 'symbol') {
      return '[' + String(value) + ']'
    }
    if (typeof value === 'bigint') {
      return '[BigInt: ' + String(value) + ']'
    }
    return value
  }
  function walk(key, value, depth, memo) {
    if (depth === void 0) {
      depth = Infinity
    }
    if (memo === void 0) {
      memo = new Memo()
    }
    if (depth === 0) {
      return serializeValue(value)
    }
    if (value !== null && value !== void 0 && typeof value.toJSON === 'function') {
      return value.toJSON()
    }
    var normalized = normalizeValue(value, key)
    if (isPrimitive(normalized)) {
      return normalized
    }
    var source = getWalkSource(value)
    var acc = Array.isArray(value) ? [] : {}
    if (memo.memoize(value)) {
      return '[Circular ~]'
    }
    for (var innerKey in source) {
      if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {
        continue
      }
      acc[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo)
    }
    memo.unmemoize(value)
    return acc
  }
  function normalize(input, depth) {
    try {
      return JSON.parse(
        JSON.stringify(input, function (key, value) {
          return walk(key, value, depth)
        })
      )
    } catch (_oO) {
      return '**non-serializable**'
    }
  }
  function extractExceptionKeysForMessage(exception, maxLength) {
    if (maxLength === void 0) {
      maxLength = 40
    }
    var keys = Object.keys(getWalkSource(exception))
    keys.sort()
    if (!keys.length) {
      return '[object has no keys]'
    }
    if (keys[0].length >= maxLength) {
      return truncate(keys[0], maxLength)
    }
    for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {
      var serialized = keys.slice(0, includedKeys).join(', ')
      if (serialized.length > maxLength) {
        continue
      }
      if (includedKeys === keys.length) {
        return serialized
      }
      return truncate(serialized, maxLength)
    }
    return ''
  }
  function dropUndefinedKeys(val) {
    var e_1, _a
    if (isPlainObject(val)) {
      var obj = val
      var rv = {}
      try {
        for (var _b = __values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var key = _c.value
          if (typeof obj[key] !== 'undefined') {
            rv[key] = dropUndefinedKeys(obj[key])
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 }
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b)
        } finally {
          if (e_1) throw e_1.error
        }
      }
      return rv
    }
    if (Array.isArray(val)) {
      return val.map(dropUndefinedKeys)
    }
    return val
  }

  // node_modules/@sentry/utils/esm/supports.js
  function supportsFetch() {
    if (!('fetch' in getGlobalObject())) {
      return false
    }
    try {
      new Headers()
      new Request('')
      new Response()
      return true
    } catch (e) {
      return false
    }
  }
  function isNativeFetch(func) {
    return func && /^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(func.toString())
  }
  function supportsNativeFetch() {
    if (!supportsFetch()) {
      return false
    }
    var global8 = getGlobalObject()
    if (isNativeFetch(global8.fetch)) {
      return true
    }
    var result = false
    var doc = global8.document
    if (doc && typeof doc.createElement === 'function') {
      try {
        var sandbox = doc.createElement('iframe')
        sandbox.hidden = true
        doc.head.appendChild(sandbox)
        if (sandbox.contentWindow && sandbox.contentWindow.fetch) {
          result = isNativeFetch(sandbox.contentWindow.fetch)
        }
        doc.head.removeChild(sandbox)
      } catch (err) {
        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err)
      }
    }
    return result
  }
  function supportsReferrerPolicy() {
    if (!supportsFetch()) {
      return false
    }
    try {
      new Request('_', {
        referrerPolicy: 'origin',
      })
      return true
    } catch (e) {
      return false
    }
  }
  function supportsHistory() {
    var global8 = getGlobalObject()
    var chrome2 = global8.chrome
    var isChromePackagedApp = chrome2 && chrome2.app && chrome2.app.runtime
    var hasHistoryApi = 'history' in global8 && !!global8.history.pushState && !!global8.history.replaceState
    return !isChromePackagedApp && hasHistoryApi
  }

  // node_modules/@sentry/utils/esm/instrument.js
  var global3 = getGlobalObject()
  var handlers = {}
  var instrumented = {}
  function instrument(type) {
    if (instrumented[type]) {
      return
    }
    instrumented[type] = true
    switch (type) {
      case 'console':
        instrumentConsole()
        break
      case 'dom':
        instrumentDOM()
        break
      case 'xhr':
        instrumentXHR()
        break
      case 'fetch':
        instrumentFetch()
        break
      case 'history':
        instrumentHistory()
        break
      case 'error':
        instrumentError()
        break
      case 'unhandledrejection':
        instrumentUnhandledRejection()
        break
      default:
        logger.warn('unknown instrumentation type:', type)
    }
  }
  function addInstrumentationHandler(handler) {
    if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {
      return
    }
    handlers[handler.type] = handlers[handler.type] || []
    handlers[handler.type].push(handler.callback)
    instrument(handler.type)
  }
  function triggerHandlers(type, data) {
    var e_1, _a
    if (!type || !handlers[type]) {
      return
    }
    try {
      for (var _b = __values(handlers[type] || []), _c = _b.next(); !_c.done; _c = _b.next()) {
        var handler = _c.value
        try {
          handler(data)
        } catch (e) {
          logger.error(
            'Error while triggering instrumentation handler.\nType: ' +
              type +
              '\nName: ' +
              getFunctionName(handler) +
              '\nError: ' +
              e
          )
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 }
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b)
      } finally {
        if (e_1) throw e_1.error
      }
    }
  }
  function instrumentConsole() {
    if (!('console' in global3)) {
      return
    }
    ;['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function (level) {
      if (!(level in global3.console)) {
        return
      }
      fill(global3.console, level, function (originalConsoleLevel) {
        return function () {
          var args = []
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i]
          }
          triggerHandlers('console', { args, level })
          if (originalConsoleLevel) {
            Function.prototype.apply.call(originalConsoleLevel, global3.console, args)
          }
        }
      })
    })
  }
  function instrumentFetch() {
    if (!supportsNativeFetch()) {
      return
    }
    fill(global3, 'fetch', function (originalFetch) {
      return function () {
        var args = []
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i]
        }
        var handlerData = {
          args,
          fetchData: {
            method: getFetchMethod(args),
            url: getFetchUrl(args),
          },
          startTimestamp: Date.now(),
        }
        triggerHandlers('fetch', __assign({}, handlerData))
        return originalFetch.apply(global3, args).then(
          function (response) {
            triggerHandlers('fetch', __assign(__assign({}, handlerData), { endTimestamp: Date.now(), response }))
            return response
          },
          function (error) {
            triggerHandlers('fetch', __assign(__assign({}, handlerData), { endTimestamp: Date.now(), error }))
            throw error
          }
        )
      }
    })
  }
  function getFetchMethod(fetchArgs) {
    if (fetchArgs === void 0) {
      fetchArgs = []
    }
    if ('Request' in global3 && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {
      return String(fetchArgs[0].method).toUpperCase()
    }
    if (fetchArgs[1] && fetchArgs[1].method) {
      return String(fetchArgs[1].method).toUpperCase()
    }
    return 'GET'
  }
  function getFetchUrl(fetchArgs) {
    if (fetchArgs === void 0) {
      fetchArgs = []
    }
    if (typeof fetchArgs[0] === 'string') {
      return fetchArgs[0]
    }
    if ('Request' in global3 && isInstanceOf(fetchArgs[0], Request)) {
      return fetchArgs[0].url
    }
    return String(fetchArgs[0])
  }
  function instrumentXHR() {
    if (!('XMLHttpRequest' in global3)) {
      return
    }
    var requestKeys = []
    var requestValues = []
    var xhrproto = XMLHttpRequest.prototype
    fill(xhrproto, 'open', function (originalOpen) {
      return function () {
        var args = []
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i]
        }
        var xhr = this
        var url = args[1]
        xhr.__sentry_xhr__ = {
          method: isString(args[0]) ? args[0].toUpperCase() : args[0],
          url: args[1],
        }
        if (isString(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {
          xhr.__sentry_own_request__ = true
        }
        var onreadystatechangeHandler = function () {
          if (xhr.readyState === 4) {
            try {
              if (xhr.__sentry_xhr__) {
                xhr.__sentry_xhr__.status_code = xhr.status
              }
            } catch (e) {}
            try {
              var requestPos = requestKeys.indexOf(xhr)
              if (requestPos !== -1) {
                requestKeys.splice(requestPos)
                var args_1 = requestValues.splice(requestPos)[0]
                if (xhr.__sentry_xhr__ && args_1[0] !== void 0) {
                  xhr.__sentry_xhr__.body = args_1[0]
                }
              }
            } catch (e) {}
            triggerHandlers('xhr', {
              args,
              endTimestamp: Date.now(),
              startTimestamp: Date.now(),
              xhr,
            })
          }
        }
        if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {
          fill(xhr, 'onreadystatechange', function (original) {
            return function () {
              var readyStateArgs = []
              for (var _i2 = 0; _i2 < arguments.length; _i2++) {
                readyStateArgs[_i2] = arguments[_i2]
              }
              onreadystatechangeHandler()
              return original.apply(xhr, readyStateArgs)
            }
          })
        } else {
          xhr.addEventListener('readystatechange', onreadystatechangeHandler)
        }
        return originalOpen.apply(xhr, args)
      }
    })
    fill(xhrproto, 'send', function (originalSend) {
      return function () {
        var args = []
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i]
        }
        requestKeys.push(this)
        requestValues.push(args)
        triggerHandlers('xhr', {
          args,
          startTimestamp: Date.now(),
          xhr: this,
        })
        return originalSend.apply(this, args)
      }
    })
  }
  var lastHref
  function instrumentHistory() {
    if (!supportsHistory()) {
      return
    }
    var oldOnPopState = global3.onpopstate
    global3.onpopstate = function () {
      var args = []
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i]
      }
      var to = global3.location.href
      var from = lastHref
      lastHref = to
      triggerHandlers('history', {
        from,
        to,
      })
      if (oldOnPopState) {
        try {
          return oldOnPopState.apply(this, args)
        } catch (_oO) {}
      }
    }
    function historyReplacementFunction(originalHistoryFunction) {
      return function () {
        var args = []
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i]
        }
        var url = args.length > 2 ? args[2] : void 0
        if (url) {
          var from = lastHref
          var to = String(url)
          lastHref = to
          triggerHandlers('history', {
            from,
            to,
          })
        }
        return originalHistoryFunction.apply(this, args)
      }
    }
    fill(global3.history, 'pushState', historyReplacementFunction)
    fill(global3.history, 'replaceState', historyReplacementFunction)
  }
  var debounceDuration = 1e3
  var debounceTimerID
  var lastCapturedEvent
  function shouldShortcircuitPreviousDebounce(previous, current) {
    if (!previous) {
      return true
    }
    if (previous.type !== current.type) {
      return true
    }
    try {
      if (previous.target !== current.target) {
        return true
      }
    } catch (e) {}
    return false
  }
  function shouldSkipDOMEvent(event) {
    if (event.type !== 'keypress') {
      return false
    }
    try {
      var target = event.target
      if (!target || !target.tagName) {
        return true
      }
      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {
        return false
      }
    } catch (e) {}
    return true
  }
  function makeDOMEventHandler(handler, globalListener) {
    if (globalListener === void 0) {
      globalListener = false
    }
    return function (event) {
      if (!event || lastCapturedEvent === event) {
        return
      }
      if (shouldSkipDOMEvent(event)) {
        return
      }
      var name = event.type === 'keypress' ? 'input' : event.type
      if (debounceTimerID === void 0) {
        handler({
          event,
          name,
          global: globalListener,
        })
        lastCapturedEvent = event
      } else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {
        handler({
          event,
          name,
          global: globalListener,
        })
        lastCapturedEvent = event
      }
      clearTimeout(debounceTimerID)
      debounceTimerID = global3.setTimeout(function () {
        debounceTimerID = void 0
      }, debounceDuration)
    }
  }
  function instrumentDOM() {
    if (!('document' in global3)) {
      return
    }
    var triggerDOMHandler = triggerHandlers.bind(null, 'dom')
    var globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true)
    global3.document.addEventListener('click', globalDOMEventHandler, false)
    global3.document.addEventListener('keypress', globalDOMEventHandler, false)
    ;['EventTarget', 'Node'].forEach(function (target) {
      var proto = global3[target] && global3[target].prototype
      if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {
        return
      }
      fill(proto, 'addEventListener', function (originalAddEventListener) {
        return function (type, listener, options) {
          if (type === 'click' || type == 'keypress') {
            try {
              var el = this
              var handlers_1 = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {})
              var handlerForType = (handlers_1[type] = handlers_1[type] || { refCount: 0 })
              if (!handlerForType.handler) {
                var handler = makeDOMEventHandler(triggerDOMHandler)
                handlerForType.handler = handler
                originalAddEventListener.call(this, type, handler, options)
              }
              handlerForType.refCount += 1
            } catch (e) {}
          }
          return originalAddEventListener.call(this, type, listener, options)
        }
      })
      fill(proto, 'removeEventListener', function (originalRemoveEventListener) {
        return function (type, listener, options) {
          if (type === 'click' || type == 'keypress') {
            try {
              var el = this
              var handlers_2 = el.__sentry_instrumentation_handlers__ || {}
              var handlerForType = handlers_2[type]
              if (handlerForType) {
                handlerForType.refCount -= 1
                if (handlerForType.refCount <= 0) {
                  originalRemoveEventListener.call(this, type, handlerForType.handler, options)
                  handlerForType.handler = void 0
                  delete handlers_2[type]
                }
                if (Object.keys(handlers_2).length === 0) {
                  delete el.__sentry_instrumentation_handlers__
                }
              }
            } catch (e) {}
          }
          return originalRemoveEventListener.call(this, type, listener, options)
        }
      })
    })
  }
  var _oldOnErrorHandler = null
  function instrumentError() {
    _oldOnErrorHandler = global3.onerror
    global3.onerror = function (msg, url, line, column, error) {
      triggerHandlers('error', {
        column,
        error,
        line,
        msg,
        url,
      })
      if (_oldOnErrorHandler) {
        return _oldOnErrorHandler.apply(this, arguments)
      }
      return false
    }
  }
  var _oldOnUnhandledRejectionHandler = null
  function instrumentUnhandledRejection() {
    _oldOnUnhandledRejectionHandler = global3.onunhandledrejection
    global3.onunhandledrejection = function (e) {
      triggerHandlers('unhandledrejection', e)
      if (_oldOnUnhandledRejectionHandler) {
        return _oldOnUnhandledRejectionHandler.apply(this, arguments)
      }
      return true
    }
  }

  // node_modules/@sentry/utils/esm/syncpromise.js
  var States
  ;(function (States2) {
    States2['PENDING'] = 'PENDING'
    States2['RESOLVED'] = 'RESOLVED'
    States2['REJECTED'] = 'REJECTED'
  })(States || (States = {}))
  var SyncPromise = (function () {
    function SyncPromise2(executor) {
      var _this = this
      this._state = States.PENDING
      this._handlers = []
      this._resolve = function (value) {
        _this._setResult(States.RESOLVED, value)
      }
      this._reject = function (reason) {
        _this._setResult(States.REJECTED, reason)
      }
      this._setResult = function (state, value) {
        if (_this._state !== States.PENDING) {
          return
        }
        if (isThenable(value)) {
          void value.then(_this._resolve, _this._reject)
          return
        }
        _this._state = state
        _this._value = value
        _this._executeHandlers()
      }
      this._attachHandler = function (handler) {
        _this._handlers = _this._handlers.concat(handler)
        _this._executeHandlers()
      }
      this._executeHandlers = function () {
        if (_this._state === States.PENDING) {
          return
        }
        var cachedHandlers = _this._handlers.slice()
        _this._handlers = []
        cachedHandlers.forEach(function (handler) {
          if (handler.done) {
            return
          }
          if (_this._state === States.RESOLVED) {
            if (handler.onfulfilled) {
              handler.onfulfilled(_this._value)
            }
          }
          if (_this._state === States.REJECTED) {
            if (handler.onrejected) {
              handler.onrejected(_this._value)
            }
          }
          handler.done = true
        })
      }
      try {
        executor(this._resolve, this._reject)
      } catch (e) {
        this._reject(e)
      }
    }
    SyncPromise2.resolve = function (value) {
      return new SyncPromise2(function (resolve) {
        resolve(value)
      })
    }
    SyncPromise2.reject = function (reason) {
      return new SyncPromise2(function (_, reject) {
        reject(reason)
      })
    }
    SyncPromise2.all = function (collection) {
      return new SyncPromise2(function (resolve, reject) {
        if (!Array.isArray(collection)) {
          reject(new TypeError('Promise.all requires an array as input.'))
          return
        }
        if (collection.length === 0) {
          resolve([])
          return
        }
        var counter = collection.length
        var resolvedCollection = []
        collection.forEach(function (item, index) {
          void SyncPromise2.resolve(item)
            .then(function (value) {
              resolvedCollection[index] = value
              counter -= 1
              if (counter !== 0) {
                return
              }
              resolve(resolvedCollection)
            })
            .then(null, reject)
        })
      })
    }
    SyncPromise2.prototype.then = function (onfulfilled, onrejected) {
      var _this = this
      return new SyncPromise2(function (resolve, reject) {
        _this._attachHandler({
          done: false,
          onfulfilled: function (result) {
            if (!onfulfilled) {
              resolve(result)
              return
            }
            try {
              resolve(onfulfilled(result))
              return
            } catch (e) {
              reject(e)
              return
            }
          },
          onrejected: function (reason) {
            if (!onrejected) {
              reject(reason)
              return
            }
            try {
              resolve(onrejected(reason))
              return
            } catch (e) {
              reject(e)
              return
            }
          },
        })
      })
    }
    SyncPromise2.prototype.catch = function (onrejected) {
      return this.then(function (val) {
        return val
      }, onrejected)
    }
    SyncPromise2.prototype.finally = function (onfinally) {
      var _this = this
      return new SyncPromise2(function (resolve, reject) {
        var val
        var isRejected
        return _this
          .then(
            function (value) {
              isRejected = false
              val = value
              if (onfinally) {
                onfinally()
              }
            },
            function (reason) {
              isRejected = true
              val = reason
              if (onfinally) {
                onfinally()
              }
            }
          )
          .then(function () {
            if (isRejected) {
              reject(val)
              return
            }
            resolve(val)
          })
      })
    }
    SyncPromise2.prototype.toString = function () {
      return '[object SyncPromise]'
    }
    return SyncPromise2
  })()

  // node_modules/@sentry/utils/esm/promisebuffer.js
  var PromiseBuffer = (function () {
    function PromiseBuffer2(_limit) {
      this._limit = _limit
      this._buffer = []
    }
    PromiseBuffer2.prototype.isReady = function () {
      return this._limit === void 0 || this.length() < this._limit
    }
    PromiseBuffer2.prototype.add = function (taskProducer) {
      var _this = this
      if (!this.isReady()) {
        return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'))
      }
      var task = taskProducer()
      if (this._buffer.indexOf(task) === -1) {
        this._buffer.push(task)
      }
      void task
        .then(function () {
          return _this.remove(task)
        })
        .then(null, function () {
          return _this.remove(task).then(null, function () {})
        })
      return task
    }
    PromiseBuffer2.prototype.remove = function (task) {
      var removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0]
      return removedTask
    }
    PromiseBuffer2.prototype.length = function () {
      return this._buffer.length
    }
    PromiseBuffer2.prototype.drain = function (timeout) {
      var _this = this
      return new SyncPromise(function (resolve) {
        var capturedSetTimeout = setTimeout(function () {
          if (timeout && timeout > 0) {
            resolve(false)
          }
        }, timeout)
        void SyncPromise.all(_this._buffer)
          .then(function () {
            clearTimeout(capturedSetTimeout)
            resolve(true)
          })
          .then(null, function () {
            resolve(true)
          })
      })
    }
    return PromiseBuffer2
  })()

  // node_modules/@sentry/utils/esm/time.js
  var dateTimestampSource = {
    nowSeconds: function () {
      return Date.now() / 1e3
    },
  }
  function getBrowserPerformance() {
    var performance2 = getGlobalObject().performance
    if (!performance2 || !performance2.now) {
      return void 0
    }
    var timeOrigin = Date.now() - performance2.now()
    return {
      now: function () {
        return performance2.now()
      },
      timeOrigin,
    }
  }
  function getNodePerformance() {
    try {
      var perfHooks = dynamicRequire(module, 'perf_hooks')
      return perfHooks.performance
    } catch (_) {
      return void 0
    }
  }
  var platformPerformance = isNodeEnv() ? getNodePerformance() : getBrowserPerformance()
  var timestampSource =
    platformPerformance === void 0
      ? dateTimestampSource
      : {
          nowSeconds: function () {
            return (platformPerformance.timeOrigin + platformPerformance.now()) / 1e3
          },
        }
  var dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource)
  var timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource)
  var timestampWithMs = timestampInSeconds
  var _browserPerformanceTimeOriginMode
  var browserPerformanceTimeOrigin = (function () {
    var performance2 = getGlobalObject().performance
    if (!performance2 || !performance2.now) {
      _browserPerformanceTimeOriginMode = 'none'
      return void 0
    }
    var threshold = 3600 * 1e3
    var performanceNow = performance2.now()
    var dateNow = Date.now()
    var timeOriginDelta = performance2.timeOrigin
      ? Math.abs(performance2.timeOrigin + performanceNow - dateNow)
      : threshold
    var timeOriginIsReliable = timeOriginDelta < threshold
    var navigationStart = performance2.timing && performance2.timing.navigationStart
    var hasNavigationStart = typeof navigationStart === 'number'
    var navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold
    var navigationStartIsReliable = navigationStartDelta < threshold
    if (timeOriginIsReliable || navigationStartIsReliable) {
      if (timeOriginDelta <= navigationStartDelta) {
        _browserPerformanceTimeOriginMode = 'timeOrigin'
        return performance2.timeOrigin
      } else {
        _browserPerformanceTimeOriginMode = 'navigationStart'
        return navigationStart
      }
    }
    _browserPerformanceTimeOriginMode = 'dateNow'
    return dateNow
  })()

  // node_modules/@sentry/hub/esm/scope.js
  var MAX_BREADCRUMBS = 100
  var Scope = (function () {
    function Scope2() {
      this._notifyingListeners = false
      this._scopeListeners = []
      this._eventProcessors = []
      this._breadcrumbs = []
      this._user = {}
      this._tags = {}
      this._extra = {}
      this._contexts = {}
    }
    Scope2.clone = function (scope) {
      var newScope = new Scope2()
      if (scope) {
        newScope._breadcrumbs = __spread(scope._breadcrumbs)
        newScope._tags = __assign({}, scope._tags)
        newScope._extra = __assign({}, scope._extra)
        newScope._contexts = __assign({}, scope._contexts)
        newScope._user = scope._user
        newScope._level = scope._level
        newScope._span = scope._span
        newScope._session = scope._session
        newScope._transactionName = scope._transactionName
        newScope._fingerprint = scope._fingerprint
        newScope._eventProcessors = __spread(scope._eventProcessors)
        newScope._requestSession = scope._requestSession
      }
      return newScope
    }
    Scope2.prototype.addScopeListener = function (callback) {
      this._scopeListeners.push(callback)
    }
    Scope2.prototype.addEventProcessor = function (callback) {
      this._eventProcessors.push(callback)
      return this
    }
    Scope2.prototype.setUser = function (user) {
      this._user = user || {}
      if (this._session) {
        this._session.update({ user })
      }
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.getUser = function () {
      return this._user
    }
    Scope2.prototype.getRequestSession = function () {
      return this._requestSession
    }
    Scope2.prototype.setRequestSession = function (requestSession) {
      this._requestSession = requestSession
      return this
    }
    Scope2.prototype.setTags = function (tags) {
      this._tags = __assign(__assign({}, this._tags), tags)
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.setTag = function (key, value) {
      var _a
      this._tags = __assign(__assign({}, this._tags), ((_a = {}), (_a[key] = value), _a))
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.setExtras = function (extras) {
      this._extra = __assign(__assign({}, this._extra), extras)
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.setExtra = function (key, extra) {
      var _a
      this._extra = __assign(__assign({}, this._extra), ((_a = {}), (_a[key] = extra), _a))
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.setFingerprint = function (fingerprint) {
      this._fingerprint = fingerprint
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.setLevel = function (level) {
      this._level = level
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.setTransactionName = function (name) {
      this._transactionName = name
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.setTransaction = function (name) {
      return this.setTransactionName(name)
    }
    Scope2.prototype.setContext = function (key, context) {
      var _a
      if (context === null) {
        delete this._contexts[key]
      } else {
        this._contexts = __assign(__assign({}, this._contexts), ((_a = {}), (_a[key] = context), _a))
      }
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.setSpan = function (span) {
      this._span = span
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.getSpan = function () {
      return this._span
    }
    Scope2.prototype.getTransaction = function () {
      var _a, _b, _c, _d
      var span = this.getSpan()
      if ((_a = span) === null || _a === void 0 ? void 0 : _a.transaction) {
        return (_b = span) === null || _b === void 0 ? void 0 : _b.transaction
      }
      if (
        (_d = (_c = span) === null || _c === void 0 ? void 0 : _c.spanRecorder) === null || _d === void 0
          ? void 0
          : _d.spans[0]
      ) {
        return span.spanRecorder.spans[0]
      }
      return void 0
    }
    Scope2.prototype.setSession = function (session) {
      if (!session) {
        delete this._session
      } else {
        this._session = session
      }
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.getSession = function () {
      return this._session
    }
    Scope2.prototype.update = function (captureContext) {
      if (!captureContext) {
        return this
      }
      if (typeof captureContext === 'function') {
        var updatedScope = captureContext(this)
        return updatedScope instanceof Scope2 ? updatedScope : this
      }
      if (captureContext instanceof Scope2) {
        this._tags = __assign(__assign({}, this._tags), captureContext._tags)
        this._extra = __assign(__assign({}, this._extra), captureContext._extra)
        this._contexts = __assign(__assign({}, this._contexts), captureContext._contexts)
        if (captureContext._user && Object.keys(captureContext._user).length) {
          this._user = captureContext._user
        }
        if (captureContext._level) {
          this._level = captureContext._level
        }
        if (captureContext._fingerprint) {
          this._fingerprint = captureContext._fingerprint
        }
        if (captureContext._requestSession) {
          this._requestSession = captureContext._requestSession
        }
      } else if (isPlainObject(captureContext)) {
        captureContext = captureContext
        this._tags = __assign(__assign({}, this._tags), captureContext.tags)
        this._extra = __assign(__assign({}, this._extra), captureContext.extra)
        this._contexts = __assign(__assign({}, this._contexts), captureContext.contexts)
        if (captureContext.user) {
          this._user = captureContext.user
        }
        if (captureContext.level) {
          this._level = captureContext.level
        }
        if (captureContext.fingerprint) {
          this._fingerprint = captureContext.fingerprint
        }
        if (captureContext.requestSession) {
          this._requestSession = captureContext.requestSession
        }
      }
      return this
    }
    Scope2.prototype.clear = function () {
      this._breadcrumbs = []
      this._tags = {}
      this._extra = {}
      this._user = {}
      this._contexts = {}
      this._level = void 0
      this._transactionName = void 0
      this._fingerprint = void 0
      this._requestSession = void 0
      this._span = void 0
      this._session = void 0
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.addBreadcrumb = function (breadcrumb, maxBreadcrumbs) {
      var maxCrumbs = typeof maxBreadcrumbs === 'number' ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS
      if (maxCrumbs <= 0) {
        return this
      }
      var mergedBreadcrumb = __assign({ timestamp: dateTimestampInSeconds() }, breadcrumb)
      this._breadcrumbs = __spread(this._breadcrumbs, [mergedBreadcrumb]).slice(-maxCrumbs)
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.clearBreadcrumbs = function () {
      this._breadcrumbs = []
      this._notifyScopeListeners()
      return this
    }
    Scope2.prototype.applyToEvent = function (event, hint) {
      var _a
      if (this._extra && Object.keys(this._extra).length) {
        event.extra = __assign(__assign({}, this._extra), event.extra)
      }
      if (this._tags && Object.keys(this._tags).length) {
        event.tags = __assign(__assign({}, this._tags), event.tags)
      }
      if (this._user && Object.keys(this._user).length) {
        event.user = __assign(__assign({}, this._user), event.user)
      }
      if (this._contexts && Object.keys(this._contexts).length) {
        event.contexts = __assign(__assign({}, this._contexts), event.contexts)
      }
      if (this._level) {
        event.level = this._level
      }
      if (this._transactionName) {
        event.transaction = this._transactionName
      }
      if (this._span) {
        event.contexts = __assign({ trace: this._span.getTraceContext() }, event.contexts)
        var transactionName = (_a = this._span.transaction) === null || _a === void 0 ? void 0 : _a.name
        if (transactionName) {
          event.tags = __assign({ transaction: transactionName }, event.tags)
        }
      }
      this._applyFingerprint(event)
      event.breadcrumbs = __spread(event.breadcrumbs || [], this._breadcrumbs)
      event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : void 0
      return this._notifyEventProcessors(__spread(getGlobalEventProcessors(), this._eventProcessors), event, hint)
    }
    Scope2.prototype._notifyEventProcessors = function (processors, event, hint, index) {
      var _this = this
      if (index === void 0) {
        index = 0
      }
      return new SyncPromise(function (resolve, reject) {
        var processor = processors[index]
        if (event === null || typeof processor !== 'function') {
          resolve(event)
        } else {
          var result = processor(__assign({}, event), hint)
          if (isThenable(result)) {
            void result
              .then(function (final) {
                return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve)
              })
              .then(null, reject)
          } else {
            void _this
              ._notifyEventProcessors(processors, result, hint, index + 1)
              .then(resolve)
              .then(null, reject)
          }
        }
      })
    }
    Scope2.prototype._notifyScopeListeners = function () {
      var _this = this
      if (!this._notifyingListeners) {
        this._notifyingListeners = true
        this._scopeListeners.forEach(function (callback) {
          callback(_this)
        })
        this._notifyingListeners = false
      }
    }
    Scope2.prototype._applyFingerprint = function (event) {
      event.fingerprint = event.fingerprint
        ? Array.isArray(event.fingerprint)
          ? event.fingerprint
          : [event.fingerprint]
        : []
      if (this._fingerprint) {
        event.fingerprint = event.fingerprint.concat(this._fingerprint)
      }
      if (event.fingerprint && !event.fingerprint.length) {
        delete event.fingerprint
      }
    }
    return Scope2
  })()
  function getGlobalEventProcessors() {
    var global8 = getGlobalObject()
    global8.__SENTRY__ = global8.__SENTRY__ || {}
    global8.__SENTRY__.globalEventProcessors = global8.__SENTRY__.globalEventProcessors || []
    return global8.__SENTRY__.globalEventProcessors
  }
  function addGlobalEventProcessor(callback) {
    getGlobalEventProcessors().push(callback)
  }

  // node_modules/@sentry/hub/esm/session.js
  var Session = (function () {
    function Session2(context) {
      this.errors = 0
      this.sid = uuid4()
      this.duration = 0
      this.status = SessionStatus.Ok
      this.init = true
      this.ignoreDuration = false
      var startingTime = timestampInSeconds()
      this.timestamp = startingTime
      this.started = startingTime
      if (context) {
        this.update(context)
      }
    }
    Session2.prototype.update = function (context) {
      if (context === void 0) {
        context = {}
      }
      if (context.user) {
        if (!this.ipAddress && context.user.ip_address) {
          this.ipAddress = context.user.ip_address
        }
        if (!this.did && !context.did) {
          this.did = context.user.id || context.user.email || context.user.username
        }
      }
      this.timestamp = context.timestamp || timestampInSeconds()
      if (context.ignoreDuration) {
        this.ignoreDuration = context.ignoreDuration
      }
      if (context.sid) {
        this.sid = context.sid.length === 32 ? context.sid : uuid4()
      }
      if (context.init !== void 0) {
        this.init = context.init
      }
      if (!this.did && context.did) {
        this.did = '' + context.did
      }
      if (typeof context.started === 'number') {
        this.started = context.started
      }
      if (this.ignoreDuration) {
        this.duration = void 0
      } else if (typeof context.duration === 'number') {
        this.duration = context.duration
      } else {
        var duration = this.timestamp - this.started
        this.duration = duration >= 0 ? duration : 0
      }
      if (context.release) {
        this.release = context.release
      }
      if (context.environment) {
        this.environment = context.environment
      }
      if (!this.ipAddress && context.ipAddress) {
        this.ipAddress = context.ipAddress
      }
      if (!this.userAgent && context.userAgent) {
        this.userAgent = context.userAgent
      }
      if (typeof context.errors === 'number') {
        this.errors = context.errors
      }
      if (context.status) {
        this.status = context.status
      }
    }
    Session2.prototype.close = function (status) {
      if (status) {
        this.update({ status })
      } else if (this.status === SessionStatus.Ok) {
        this.update({ status: SessionStatus.Exited })
      } else {
        this.update()
      }
    }
    Session2.prototype.toJSON = function () {
      return dropUndefinedKeys({
        sid: '' + this.sid,
        init: this.init,
        started: new Date(this.started * 1e3).toISOString(),
        timestamp: new Date(this.timestamp * 1e3).toISOString(),
        status: this.status,
        errors: this.errors,
        did: typeof this.did === 'number' || typeof this.did === 'string' ? '' + this.did : void 0,
        duration: this.duration,
        attrs: dropUndefinedKeys({
          release: this.release,
          environment: this.environment,
          ip_address: this.ipAddress,
          user_agent: this.userAgent,
        }),
      })
    }
    return Session2
  })()

  // node_modules/@sentry/hub/esm/hub.js
  var API_VERSION = 4
  var DEFAULT_BREADCRUMBS = 100
  var Hub = (function () {
    function Hub2(client, scope, _version) {
      if (scope === void 0) {
        scope = new Scope()
      }
      if (_version === void 0) {
        _version = API_VERSION
      }
      this._version = _version
      this._stack = [{}]
      this.getStackTop().scope = scope
      this.bindClient(client)
    }
    Hub2.prototype.isOlderThan = function (version2) {
      return this._version < version2
    }
    Hub2.prototype.bindClient = function (client) {
      var top = this.getStackTop()
      top.client = client
      if (client && client.setupIntegrations) {
        client.setupIntegrations()
      }
    }
    Hub2.prototype.pushScope = function () {
      var scope = Scope.clone(this.getScope())
      this.getStack().push({
        client: this.getClient(),
        scope,
      })
      return scope
    }
    Hub2.prototype.popScope = function () {
      if (this.getStack().length <= 1) return false
      return !!this.getStack().pop()
    }
    Hub2.prototype.withScope = function (callback) {
      var scope = this.pushScope()
      try {
        callback(scope)
      } finally {
        this.popScope()
      }
    }
    Hub2.prototype.getClient = function () {
      return this.getStackTop().client
    }
    Hub2.prototype.getScope = function () {
      return this.getStackTop().scope
    }
    Hub2.prototype.getStack = function () {
      return this._stack
    }
    Hub2.prototype.getStackTop = function () {
      return this._stack[this._stack.length - 1]
    }
    Hub2.prototype.captureException = function (exception, hint) {
      var eventId = (this._lastEventId = uuid4())
      var finalHint = hint
      if (!hint) {
        var syntheticException = void 0
        try {
          throw new Error('Sentry syntheticException')
        } catch (exception2) {
          syntheticException = exception2
        }
        finalHint = {
          originalException: exception,
          syntheticException,
        }
      }
      this._invokeClient('captureException', exception, __assign(__assign({}, finalHint), { event_id: eventId }))
      return eventId
    }
    Hub2.prototype.captureMessage = function (message, level, hint) {
      var eventId = (this._lastEventId = uuid4())
      var finalHint = hint
      if (!hint) {
        var syntheticException = void 0
        try {
          throw new Error(message)
        } catch (exception) {
          syntheticException = exception
        }
        finalHint = {
          originalException: message,
          syntheticException,
        }
      }
      this._invokeClient('captureMessage', message, level, __assign(__assign({}, finalHint), { event_id: eventId }))
      return eventId
    }
    Hub2.prototype.captureEvent = function (event, hint) {
      var eventId = (this._lastEventId = uuid4())
      this._invokeClient('captureEvent', event, __assign(__assign({}, hint), { event_id: eventId }))
      return eventId
    }
    Hub2.prototype.lastEventId = function () {
      return this._lastEventId
    }
    Hub2.prototype.addBreadcrumb = function (breadcrumb, hint) {
      var _a = this.getStackTop(),
        scope = _a.scope,
        client = _a.client
      if (!scope || !client) return
      var _b = (client.getOptions && client.getOptions()) || {},
        _c = _b.beforeBreadcrumb,
        beforeBreadcrumb = _c === void 0 ? null : _c,
        _d = _b.maxBreadcrumbs,
        maxBreadcrumbs = _d === void 0 ? DEFAULT_BREADCRUMBS : _d
      if (maxBreadcrumbs <= 0) return
      var timestamp = dateTimestampInSeconds()
      var mergedBreadcrumb = __assign({ timestamp }, breadcrumb)
      var finalBreadcrumb = beforeBreadcrumb
        ? consoleSandbox(function () {
            return beforeBreadcrumb(mergedBreadcrumb, hint)
          })
        : mergedBreadcrumb
      if (finalBreadcrumb === null) return
      scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs)
    }
    Hub2.prototype.setUser = function (user) {
      var scope = this.getScope()
      if (scope) scope.setUser(user)
    }
    Hub2.prototype.setTags = function (tags) {
      var scope = this.getScope()
      if (scope) scope.setTags(tags)
    }
    Hub2.prototype.setExtras = function (extras) {
      var scope = this.getScope()
      if (scope) scope.setExtras(extras)
    }
    Hub2.prototype.setTag = function (key, value) {
      var scope = this.getScope()
      if (scope) scope.setTag(key, value)
    }
    Hub2.prototype.setExtra = function (key, extra) {
      var scope = this.getScope()
      if (scope) scope.setExtra(key, extra)
    }
    Hub2.prototype.setContext = function (name, context) {
      var scope = this.getScope()
      if (scope) scope.setContext(name, context)
    }
    Hub2.prototype.configureScope = function (callback) {
      var _a = this.getStackTop(),
        scope = _a.scope,
        client = _a.client
      if (scope && client) {
        callback(scope)
      }
    }
    Hub2.prototype.run = function (callback) {
      var oldHub = makeMain(this)
      try {
        callback(this)
      } finally {
        makeMain(oldHub)
      }
    }
    Hub2.prototype.getIntegration = function (integration) {
      var client = this.getClient()
      if (!client) return null
      try {
        return client.getIntegration(integration)
      } catch (_oO) {
        logger.warn('Cannot retrieve integration ' + integration.id + ' from the current Hub')
        return null
      }
    }
    Hub2.prototype.startSpan = function (context) {
      return this._callExtensionMethod('startSpan', context)
    }
    Hub2.prototype.startTransaction = function (context, customSamplingContext) {
      return this._callExtensionMethod('startTransaction', context, customSamplingContext)
    }
    Hub2.prototype.traceHeaders = function () {
      return this._callExtensionMethod('traceHeaders')
    }
    Hub2.prototype.captureSession = function (endSession) {
      if (endSession === void 0) {
        endSession = false
      }
      if (endSession) {
        return this.endSession()
      }
      this._sendSessionUpdate()
    }
    Hub2.prototype.endSession = function () {
      var _a, _b, _c, _d, _e
      ;(_c =
        (_b = (_a = this.getStackTop()) === null || _a === void 0 ? void 0 : _a.scope) === null || _b === void 0
          ? void 0
          : _b.getSession()) === null || _c === void 0
        ? void 0
        : _c.close()
      this._sendSessionUpdate()
      ;(_e = (_d = this.getStackTop()) === null || _d === void 0 ? void 0 : _d.scope) === null || _e === void 0
        ? void 0
        : _e.setSession()
    }
    Hub2.prototype.startSession = function (context) {
      var _a = this.getStackTop(),
        scope = _a.scope,
        client = _a.client
      var _b = (client && client.getOptions()) || {},
        release = _b.release,
        environment = _b.environment
      var global8 = getGlobalObject()
      var userAgent = (global8.navigator || {}).userAgent
      var session = new Session(
        __assign(
          __assign(
            __assign(
              {
                release,
                environment,
              },
              scope && { user: scope.getUser() }
            ),
            userAgent && { userAgent }
          ),
          context
        )
      )
      if (scope) {
        var currentSession = scope.getSession && scope.getSession()
        if (currentSession && currentSession.status === SessionStatus.Ok) {
          currentSession.update({ status: SessionStatus.Exited })
        }
        this.endSession()
        scope.setSession(session)
      }
      return session
    }
    Hub2.prototype._sendSessionUpdate = function () {
      var _a = this.getStackTop(),
        scope = _a.scope,
        client = _a.client
      if (!scope) return
      var session = scope.getSession && scope.getSession()
      if (session) {
        if (client && client.captureSession) {
          client.captureSession(session)
        }
      }
    }
    Hub2.prototype._invokeClient = function (method) {
      var _a
      var args = []
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i]
      }
      var _b = this.getStackTop(),
        scope = _b.scope,
        client = _b.client
      if (client && client[method]) {
        ;(_a = client)[method].apply(_a, __spread(args, [scope]))
      }
    }
    Hub2.prototype._callExtensionMethod = function (method) {
      var args = []
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i]
      }
      var carrier = getMainCarrier()
      var sentry = carrier.__SENTRY__
      if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {
        return sentry.extensions[method].apply(this, args)
      }
      logger.warn('Extension method ' + method + " couldn't be found, doing nothing.")
    }
    return Hub2
  })()
  function getMainCarrier() {
    var carrier = getGlobalObject()
    carrier.__SENTRY__ = carrier.__SENTRY__ || {
      extensions: {},
      hub: void 0,
    }
    return carrier
  }
  function makeMain(hub) {
    var registry = getMainCarrier()
    var oldHub = getHubFromCarrier(registry)
    setHubOnCarrier(registry, hub)
    return oldHub
  }
  function getCurrentHub() {
    var registry = getMainCarrier()
    if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {
      setHubOnCarrier(registry, new Hub())
    }
    if (isNodeEnv()) {
      return getHubFromActiveDomain(registry)
    }
    return getHubFromCarrier(registry)
  }
  function getHubFromActiveDomain(registry) {
    var _a, _b, _c
    try {
      var activeDomain =
        (_c =
          (_b = (_a = getMainCarrier().__SENTRY__) === null || _a === void 0 ? void 0 : _a.extensions) === null ||
          _b === void 0
            ? void 0
            : _b.domain) === null || _c === void 0
          ? void 0
          : _c.active
      if (!activeDomain) {
        return getHubFromCarrier(registry)
      }
      if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {
        var registryHubTopStack = getHubFromCarrier(registry).getStackTop()
        setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)))
      }
      return getHubFromCarrier(activeDomain)
    } catch (_Oo) {
      return getHubFromCarrier(registry)
    }
  }
  function hasHubOnCarrier(carrier) {
    return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub)
  }
  function getHubFromCarrier(carrier) {
    if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) return carrier.__SENTRY__.hub
    carrier.__SENTRY__ = carrier.__SENTRY__ || {}
    carrier.__SENTRY__.hub = new Hub()
    return carrier.__SENTRY__.hub
  }
  function setHubOnCarrier(carrier, hub) {
    if (!carrier) return false
    carrier.__SENTRY__ = carrier.__SENTRY__ || {}
    carrier.__SENTRY__.hub = hub
    return true
  }

  // node_modules/@sentry/minimal/esm/index.js
  function callOnHub(method) {
    var args = []
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i]
    }
    var hub = getCurrentHub()
    if (hub && hub[method]) {
      return hub[method].apply(hub, __spread(args))
    }
    throw new Error('No hub defined or ' + method + ' was not found on the hub, please open a bug report.')
  }
  function captureException(exception, captureContext) {
    var syntheticException
    try {
      throw new Error('Sentry syntheticException')
    } catch (exception2) {
      syntheticException = exception2
    }
    return callOnHub('captureException', exception, {
      captureContext,
      originalException: exception,
      syntheticException,
    })
  }
  function captureEvent(event) {
    return callOnHub('captureEvent', event)
  }
  function withScope(callback) {
    callOnHub('withScope', callback)
  }

  // node_modules/@sentry/core/esm/api.js
  var SENTRY_API_VERSION = '7'
  var API = (function () {
    function API2(dsn, metadata, tunnel) {
      if (metadata === void 0) {
        metadata = {}
      }
      this.dsn = dsn
      this._dsnObject = new Dsn(dsn)
      this.metadata = metadata
      this._tunnel = tunnel
    }
    API2.prototype.getDsn = function () {
      return this._dsnObject
    }
    API2.prototype.forceEnvelope = function () {
      return !!this._tunnel
    }
    API2.prototype.getBaseApiEndpoint = function () {
      var dsn = this.getDsn()
      var protocol = dsn.protocol ? dsn.protocol + ':' : ''
      var port = dsn.port ? ':' + dsn.port : ''
      return protocol + '//' + dsn.host + port + (dsn.path ? '/' + dsn.path : '') + '/api/'
    }
    API2.prototype.getStoreEndpoint = function () {
      return this._getIngestEndpoint('store')
    }
    API2.prototype.getStoreEndpointWithUrlEncodedAuth = function () {
      return this.getStoreEndpoint() + '?' + this._encodedAuth()
    }
    API2.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {
      if (this.forceEnvelope()) {
        return this._tunnel
      }
      return this._getEnvelopeEndpoint() + '?' + this._encodedAuth()
    }
    API2.prototype.getStoreEndpointPath = function () {
      var dsn = this.getDsn()
      return (dsn.path ? '/' + dsn.path : '') + '/api/' + dsn.projectId + '/store/'
    }
    API2.prototype.getRequestHeaders = function (clientName, clientVersion) {
      var dsn = this.getDsn()
      var header = ['Sentry sentry_version=' + SENTRY_API_VERSION]
      header.push('sentry_client=' + clientName + '/' + clientVersion)
      header.push('sentry_key=' + dsn.publicKey)
      if (dsn.pass) {
        header.push('sentry_secret=' + dsn.pass)
      }
      return {
        'Content-Type': 'application/json',
        'X-Sentry-Auth': header.join(', '),
      }
    }
    API2.prototype.getReportDialogEndpoint = function (dialogOptions) {
      if (dialogOptions === void 0) {
        dialogOptions = {}
      }
      var dsn = this.getDsn()
      var endpoint = this.getBaseApiEndpoint() + 'embed/error-page/'
      var encodedOptions = []
      encodedOptions.push('dsn=' + dsn.toString())
      for (var key in dialogOptions) {
        if (key === 'dsn') {
          continue
        }
        if (key === 'user') {
          if (!dialogOptions.user) {
            continue
          }
          if (dialogOptions.user.name) {
            encodedOptions.push('name=' + encodeURIComponent(dialogOptions.user.name))
          }
          if (dialogOptions.user.email) {
            encodedOptions.push('email=' + encodeURIComponent(dialogOptions.user.email))
          }
        } else {
          encodedOptions.push(encodeURIComponent(key) + '=' + encodeURIComponent(dialogOptions[key]))
        }
      }
      if (encodedOptions.length) {
        return endpoint + '?' + encodedOptions.join('&')
      }
      return endpoint
    }
    API2.prototype._getEnvelopeEndpoint = function () {
      return this._getIngestEndpoint('envelope')
    }
    API2.prototype._getIngestEndpoint = function (target) {
      if (this._tunnel) {
        return this._tunnel
      }
      var base = this.getBaseApiEndpoint()
      var dsn = this.getDsn()
      return '' + base + dsn.projectId + '/' + target + '/'
    }
    API2.prototype._encodedAuth = function () {
      var dsn = this.getDsn()
      var auth = {
        sentry_key: dsn.publicKey,
        sentry_version: SENTRY_API_VERSION,
      }
      return urlEncode(auth)
    }
    return API2
  })()

  // node_modules/@sentry/core/esm/integration.js
  var installedIntegrations = []
  function filterDuplicates(integrations) {
    return integrations.reduce(function (acc, integrations2) {
      if (
        acc.every(function (accIntegration) {
          return integrations2.name !== accIntegration.name
        })
      ) {
        acc.push(integrations2)
      }
      return acc
    }, [])
  }
  function getIntegrationsToSetup(options) {
    var defaultIntegrations2 = (options.defaultIntegrations && __spread(options.defaultIntegrations)) || []
    var userIntegrations = options.integrations
    var integrations = __spread(filterDuplicates(defaultIntegrations2))
    if (Array.isArray(userIntegrations)) {
      integrations = __spread(
        integrations.filter(function (integrations2) {
          return userIntegrations.every(function (userIntegration) {
            return userIntegration.name !== integrations2.name
          })
        }),
        filterDuplicates(userIntegrations)
      )
    } else if (typeof userIntegrations === 'function') {
      integrations = userIntegrations(integrations)
      integrations = Array.isArray(integrations) ? integrations : [integrations]
    }
    var integrationsNames = integrations.map(function (i) {
      return i.name
    })
    var alwaysLastToRun = 'Debug'
    if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {
      integrations.push.apply(
        integrations,
        __spread(integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1))
      )
    }
    return integrations
  }
  function setupIntegration(integration) {
    if (installedIntegrations.indexOf(integration.name) !== -1) {
      return
    }
    integration.setupOnce(addGlobalEventProcessor, getCurrentHub)
    installedIntegrations.push(integration.name)
    logger.log('Integration installed: ' + integration.name)
  }
  function setupIntegrations(options) {
    var integrations = {}
    getIntegrationsToSetup(options).forEach(function (integration) {
      integrations[integration.name] = integration
      setupIntegration(integration)
    })
    return integrations
  }

  // node_modules/@sentry/core/esm/baseclient.js
  var BaseClient = (function () {
    function BaseClient2(backendClass, options) {
      this._integrations = {}
      this._processing = 0
      this._backend = new backendClass(options)
      this._options = options
      if (options.dsn) {
        this._dsn = new Dsn(options.dsn)
      }
    }
    BaseClient2.prototype.captureException = function (exception, hint, scope) {
      var _this = this
      var eventId = hint && hint.event_id
      this._process(
        this._getBackend()
          .eventFromException(exception, hint)
          .then(function (event) {
            return _this._captureEvent(event, hint, scope)
          })
          .then(function (result) {
            eventId = result
          })
      )
      return eventId
    }
    BaseClient2.prototype.captureMessage = function (message, level, hint, scope) {
      var _this = this
      var eventId = hint && hint.event_id
      var promisedEvent = isPrimitive(message)
        ? this._getBackend().eventFromMessage(String(message), level, hint)
        : this._getBackend().eventFromException(message, hint)
      this._process(
        promisedEvent
          .then(function (event) {
            return _this._captureEvent(event, hint, scope)
          })
          .then(function (result) {
            eventId = result
          })
      )
      return eventId
    }
    BaseClient2.prototype.captureEvent = function (event, hint, scope) {
      var eventId = hint && hint.event_id
      this._process(
        this._captureEvent(event, hint, scope).then(function (result) {
          eventId = result
        })
      )
      return eventId
    }
    BaseClient2.prototype.captureSession = function (session) {
      if (!this._isEnabled()) {
        logger.warn('SDK not enabled, will not capture session.')
        return
      }
      if (!(typeof session.release === 'string')) {
        logger.warn('Discarded session because of missing or non-string release')
      } else {
        this._sendSession(session)
        session.update({ init: false })
      }
    }
    BaseClient2.prototype.getDsn = function () {
      return this._dsn
    }
    BaseClient2.prototype.getOptions = function () {
      return this._options
    }
    BaseClient2.prototype.flush = function (timeout) {
      var _this = this
      return this._isClientProcessing(timeout).then(function (ready) {
        return _this
          ._getBackend()
          .getTransport()
          .close(timeout)
          .then(function (transportFlushed) {
            return ready && transportFlushed
          })
      })
    }
    BaseClient2.prototype.close = function (timeout) {
      var _this = this
      return this.flush(timeout).then(function (result) {
        _this.getOptions().enabled = false
        return result
      })
    }
    BaseClient2.prototype.setupIntegrations = function () {
      if (this._isEnabled()) {
        this._integrations = setupIntegrations(this._options)
      }
    }
    BaseClient2.prototype.getIntegration = function (integration) {
      try {
        return this._integrations[integration.id] || null
      } catch (_oO) {
        logger.warn('Cannot retrieve integration ' + integration.id + ' from the current Client')
        return null
      }
    }
    BaseClient2.prototype._updateSessionFromEvent = function (session, event) {
      var e_1, _a
      var crashed = false
      var errored = false
      var exceptions = event.exception && event.exception.values
      if (exceptions) {
        errored = true
        try {
          for (
            var exceptions_1 = __values(exceptions), exceptions_1_1 = exceptions_1.next();
            !exceptions_1_1.done;
            exceptions_1_1 = exceptions_1.next()
          ) {
            var ex = exceptions_1_1.value
            var mechanism = ex.mechanism
            if (mechanism && mechanism.handled === false) {
              crashed = true
              break
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 }
        } finally {
          try {
            if (exceptions_1_1 && !exceptions_1_1.done && (_a = exceptions_1.return)) _a.call(exceptions_1)
          } finally {
            if (e_1) throw e_1.error
          }
        }
      }
      var sessionNonTerminal = session.status === SessionStatus.Ok
      var shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed)
      if (shouldUpdateAndSend) {
        session.update(
          __assign(__assign({}, crashed && { status: SessionStatus.Crashed }), {
            errors: session.errors || Number(errored || crashed),
          })
        )
        this.captureSession(session)
      }
    }
    BaseClient2.prototype._sendSession = function (session) {
      this._getBackend().sendSession(session)
    }
    BaseClient2.prototype._isClientProcessing = function (timeout) {
      var _this = this
      return new SyncPromise(function (resolve) {
        var ticked = 0
        var tick = 1
        var interval = setInterval(function () {
          if (_this._processing == 0) {
            clearInterval(interval)
            resolve(true)
          } else {
            ticked += tick
            if (timeout && ticked >= timeout) {
              clearInterval(interval)
              resolve(false)
            }
          }
        }, tick)
      })
    }
    BaseClient2.prototype._getBackend = function () {
      return this._backend
    }
    BaseClient2.prototype._isEnabled = function () {
      return this.getOptions().enabled !== false && this._dsn !== void 0
    }
    BaseClient2.prototype._prepareEvent = function (event, scope, hint) {
      var _this = this
      var _a = this.getOptions().normalizeDepth,
        normalizeDepth = _a === void 0 ? 3 : _a
      var prepared = __assign(__assign({}, event), {
        event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),
        timestamp: event.timestamp || dateTimestampInSeconds(),
      })
      this._applyClientOptions(prepared)
      this._applyIntegrationsMetadata(prepared)
      var finalScope = scope
      if (hint && hint.captureContext) {
        finalScope = Scope.clone(finalScope).update(hint.captureContext)
      }
      var result = SyncPromise.resolve(prepared)
      if (finalScope) {
        result = finalScope.applyToEvent(prepared, hint)
      }
      return result.then(function (evt) {
        if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {
          return _this._normalizeEvent(evt, normalizeDepth)
        }
        return evt
      })
    }
    BaseClient2.prototype._normalizeEvent = function (event, depth) {
      if (!event) {
        return null
      }
      var normalized = __assign(
        __assign(
          __assign(
            __assign(
              __assign({}, event),
              event.breadcrumbs && {
                breadcrumbs: event.breadcrumbs.map(function (b) {
                  return __assign(
                    __assign({}, b),
                    b.data && {
                      data: normalize(b.data, depth),
                    }
                  )
                }),
              }
            ),
            event.user && {
              user: normalize(event.user, depth),
            }
          ),
          event.contexts && {
            contexts: normalize(event.contexts, depth),
          }
        ),
        event.extra && {
          extra: normalize(event.extra, depth),
        }
      )
      if (event.contexts && event.contexts.trace) {
        normalized.contexts.trace = event.contexts.trace
      }
      return normalized
    }
    BaseClient2.prototype._applyClientOptions = function (event) {
      var options = this.getOptions()
      var environment = options.environment,
        release = options.release,
        dist = options.dist,
        _a = options.maxValueLength,
        maxValueLength = _a === void 0 ? 250 : _a
      if (!('environment' in event)) {
        event.environment = 'environment' in options ? environment : 'production'
      }
      if (event.release === void 0 && release !== void 0) {
        event.release = release
      }
      if (event.dist === void 0 && dist !== void 0) {
        event.dist = dist
      }
      if (event.message) {
        event.message = truncate(event.message, maxValueLength)
      }
      var exception = event.exception && event.exception.values && event.exception.values[0]
      if (exception && exception.value) {
        exception.value = truncate(exception.value, maxValueLength)
      }
      var request = event.request
      if (request && request.url) {
        request.url = truncate(request.url, maxValueLength)
      }
    }
    BaseClient2.prototype._applyIntegrationsMetadata = function (event) {
      var integrationsArray = Object.keys(this._integrations)
      if (integrationsArray.length > 0) {
        event.sdk = event.sdk || {}
        event.sdk.integrations = __spread(event.sdk.integrations || [], integrationsArray)
      }
    }
    BaseClient2.prototype._sendEvent = function (event) {
      this._getBackend().sendEvent(event)
    }
    BaseClient2.prototype._captureEvent = function (event, hint, scope) {
      return this._processEvent(event, hint, scope).then(
        function (finalEvent) {
          return finalEvent.event_id
        },
        function (reason) {
          logger.error(reason)
          return void 0
        }
      )
    }
    BaseClient2.prototype._processEvent = function (event, hint, scope) {
      var _this = this
      var _a = this.getOptions(),
        beforeSend = _a.beforeSend,
        sampleRate = _a.sampleRate
      if (!this._isEnabled()) {
        return SyncPromise.reject(new SentryError('SDK not enabled, will not capture event.'))
      }
      var isTransaction = event.type === 'transaction'
      if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {
        return SyncPromise.reject(
          new SentryError(
            "Discarding event because it's not included in the random sample (sampling rate = " + sampleRate + ')'
          )
        )
      }
      return this._prepareEvent(event, scope, hint)
        .then(function (prepared) {
          if (prepared === null) {
            throw new SentryError('An event processor returned null, will not send event.')
          }
          var isInternalException = hint && hint.data && hint.data.__sentry__ === true
          if (isInternalException || isTransaction || !beforeSend) {
            return prepared
          }
          var beforeSendResult = beforeSend(prepared, hint)
          return _this._ensureBeforeSendRv(beforeSendResult)
        })
        .then(function (processedEvent) {
          if (processedEvent === null) {
            throw new SentryError('`beforeSend` returned `null`, will not send event.')
          }
          var session = scope && scope.getSession && scope.getSession()
          if (!isTransaction && session) {
            _this._updateSessionFromEvent(session, processedEvent)
          }
          _this._sendEvent(processedEvent)
          return processedEvent
        })
        .then(null, function (reason) {
          if (reason instanceof SentryError) {
            throw reason
          }
          _this.captureException(reason, {
            data: {
              __sentry__: true,
            },
            originalException: reason,
          })
          throw new SentryError(
            'Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: ' +
              reason
          )
        })
    }
    BaseClient2.prototype._process = function (promise) {
      var _this = this
      this._processing += 1
      void promise.then(
        function (value) {
          _this._processing -= 1
          return value
        },
        function (reason) {
          _this._processing -= 1
          return reason
        }
      )
    }
    BaseClient2.prototype._ensureBeforeSendRv = function (rv) {
      var nullErr = '`beforeSend` method has to return `null` or a valid event.'
      if (isThenable(rv)) {
        return rv.then(
          function (event) {
            if (!(isPlainObject(event) || event === null)) {
              throw new SentryError(nullErr)
            }
            return event
          },
          function (e) {
            throw new SentryError('beforeSend rejected with ' + e)
          }
        )
      } else if (!(isPlainObject(rv) || rv === null)) {
        throw new SentryError(nullErr)
      }
      return rv
    }
    return BaseClient2
  })()

  // node_modules/@sentry/core/esm/transports/noop.js
  var NoopTransport = (function () {
    function NoopTransport2() {}
    NoopTransport2.prototype.sendEvent = function (_) {
      return SyncPromise.resolve({
        reason: 'NoopTransport: Event has been skipped because no Dsn is configured.',
        status: Status.Skipped,
      })
    }
    NoopTransport2.prototype.close = function (_) {
      return SyncPromise.resolve(true)
    }
    return NoopTransport2
  })()

  // node_modules/@sentry/core/esm/basebackend.js
  var BaseBackend = (function () {
    function BaseBackend2(options) {
      this._options = options
      if (!this._options.dsn) {
        logger.warn('No DSN provided, backend will not do anything.')
      }
      this._transport = this._setupTransport()
    }
    BaseBackend2.prototype.eventFromException = function (_exception, _hint) {
      throw new SentryError('Backend has to implement `eventFromException` method')
    }
    BaseBackend2.prototype.eventFromMessage = function (_message, _level, _hint) {
      throw new SentryError('Backend has to implement `eventFromMessage` method')
    }
    BaseBackend2.prototype.sendEvent = function (event) {
      void this._transport.sendEvent(event).then(null, function (reason) {
        logger.error('Error while sending event: ' + reason)
      })
    }
    BaseBackend2.prototype.sendSession = function (session) {
      if (!this._transport.sendSession) {
        logger.warn("Dropping session because custom transport doesn't implement sendSession")
        return
      }
      void this._transport.sendSession(session).then(null, function (reason) {
        logger.error('Error while sending session: ' + reason)
      })
    }
    BaseBackend2.prototype.getTransport = function () {
      return this._transport
    }
    BaseBackend2.prototype._setupTransport = function () {
      return new NoopTransport()
    }
    return BaseBackend2
  })()

  // node_modules/@sentry/core/esm/request.js
  function getSdkMetadataForEnvelopeHeader(api) {
    if (!api.metadata || !api.metadata.sdk) {
      return
    }
    var _a = api.metadata.sdk,
      name = _a.name,
      version2 = _a.version
    return { name, version: version2 }
  }
  function enhanceEventWithSdkInfo(event, sdkInfo) {
    if (!sdkInfo) {
      return event
    }
    event.sdk = event.sdk || {}
    event.sdk.name = event.sdk.name || sdkInfo.name
    event.sdk.version = event.sdk.version || sdkInfo.version
    event.sdk.integrations = __spread(event.sdk.integrations || [], sdkInfo.integrations || [])
    event.sdk.packages = __spread(event.sdk.packages || [], sdkInfo.packages || [])
    return event
  }
  function sessionToSentryRequest(session, api) {
    var sdkInfo = getSdkMetadataForEnvelopeHeader(api)
    var envelopeHeaders = JSON.stringify(
      __assign(
        __assign({ sent_at: new Date().toISOString() }, sdkInfo && { sdk: sdkInfo }),
        api.forceEnvelope() && { dsn: api.getDsn().toString() }
      )
    )
    var type = 'aggregates' in session ? 'sessions' : 'session'
    var itemHeaders = JSON.stringify({
      type,
    })
    return {
      body: envelopeHeaders + '\n' + itemHeaders + '\n' + JSON.stringify(session),
      type,
      url: api.getEnvelopeEndpointWithUrlEncodedAuth(),
    }
  }
  function eventToSentryRequest(event, api) {
    var sdkInfo = getSdkMetadataForEnvelopeHeader(api)
    var eventType = event.type || 'event'
    var useEnvelope = eventType === 'transaction' || api.forceEnvelope()
    var _a = event.debug_meta || {},
      transactionSampling = _a.transactionSampling,
      metadata = __rest(_a, ['transactionSampling'])
    var _b = transactionSampling || {},
      samplingMethod = _b.method,
      sampleRate = _b.rate
    if (Object.keys(metadata).length === 0) {
      delete event.debug_meta
    } else {
      event.debug_meta = metadata
    }
    var req = {
      body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),
      type: eventType,
      url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth(),
    }
    if (useEnvelope) {
      var envelopeHeaders = JSON.stringify(
        __assign(
          __assign({ event_id: event.event_id, sent_at: new Date().toISOString() }, sdkInfo && { sdk: sdkInfo }),
          api.forceEnvelope() && { dsn: api.getDsn().toString() }
        )
      )
      var itemHeaders = JSON.stringify({
        type: eventType,
        sample_rates: [{ id: samplingMethod, rate: sampleRate }],
      })
      var envelope = envelopeHeaders + '\n' + itemHeaders + '\n' + req.body
      req.body = envelope
    }
    return req
  }

  // node_modules/@sentry/core/esm/sdk.js
  function initAndBind(clientClass, options) {
    var _a
    if (options.debug === true) {
      logger.enable()
    }
    var hub = getCurrentHub()
    ;(_a = hub.getScope()) === null || _a === void 0 ? void 0 : _a.update(options.initialScope)
    var client = new clientClass(options)
    hub.bindClient(client)
  }

  // node_modules/@sentry/core/esm/version.js
  var SDK_VERSION = '6.8.0'

  // node_modules/@sentry/core/esm/integrations/index.js
  var integrations_exports = {}
  __export(integrations_exports, {
    FunctionToString: () => FunctionToString,
    InboundFilters: () => InboundFilters,
  })

  // node_modules/@sentry/core/esm/integrations/functiontostring.js
  var originalFunctionToString
  var FunctionToString = (function () {
    function FunctionToString2() {
      this.name = FunctionToString2.id
    }
    FunctionToString2.prototype.setupOnce = function () {
      originalFunctionToString = Function.prototype.toString
      Function.prototype.toString = function () {
        var args = []
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i]
        }
        var context = this.__sentry_original__ || this
        return originalFunctionToString.apply(context, args)
      }
    }
    FunctionToString2.id = 'FunctionToString'
    return FunctionToString2
  })()

  // node_modules/@sentry/core/esm/integrations/inboundfilters.js
  var DEFAULT_IGNORE_ERRORS = [/^Script error\.?$/, /^Javascript error: Script error\.? on line 0$/]
  var InboundFilters = (function () {
    function InboundFilters2(_options) {
      if (_options === void 0) {
        _options = {}
      }
      this._options = _options
      this.name = InboundFilters2.id
    }
    InboundFilters2.prototype.setupOnce = function () {
      addGlobalEventProcessor(function (event) {
        var hub = getCurrentHub()
        if (!hub) {
          return event
        }
        var self2 = hub.getIntegration(InboundFilters2)
        if (self2) {
          var client = hub.getClient()
          var clientOptions = client ? client.getOptions() : {}
          var options = typeof self2._mergeOptions === 'function' ? self2._mergeOptions(clientOptions) : {}
          if (typeof self2._shouldDropEvent !== 'function') {
            return event
          }
          return self2._shouldDropEvent(event, options) ? null : event
        }
        return event
      })
    }
    InboundFilters2.prototype._shouldDropEvent = function (event, options) {
      if (this._isSentryError(event, options)) {
        logger.warn('Event dropped due to being internal Sentry Error.\nEvent: ' + getEventDescription(event))
        return true
      }
      if (this._isIgnoredError(event, options)) {
        logger.warn(
          'Event dropped due to being matched by `ignoreErrors` option.\nEvent: ' + getEventDescription(event)
        )
        return true
      }
      if (this._isDeniedUrl(event, options)) {
        logger.warn(
          'Event dropped due to being matched by `denyUrls` option.\nEvent: ' +
            getEventDescription(event) +
            '.\nUrl: ' +
            this._getEventFilterUrl(event)
        )
        return true
      }
      if (!this._isAllowedUrl(event, options)) {
        logger.warn(
          'Event dropped due to not being matched by `allowUrls` option.\nEvent: ' +
            getEventDescription(event) +
            '.\nUrl: ' +
            this._getEventFilterUrl(event)
        )
        return true
      }
      return false
    }
    InboundFilters2.prototype._isSentryError = function (event, options) {
      if (!options.ignoreInternal) {
        return false
      }
      try {
        return (
          (event &&
            event.exception &&
            event.exception.values &&
            event.exception.values[0] &&
            event.exception.values[0].type === 'SentryError') ||
          false
        )
      } catch (_oO) {
        return false
      }
    }
    InboundFilters2.prototype._isIgnoredError = function (event, options) {
      if (!options.ignoreErrors || !options.ignoreErrors.length) {
        return false
      }
      return this._getPossibleEventMessages(event).some(function (message) {
        return options.ignoreErrors.some(function (pattern) {
          return isMatchingPattern(message, pattern)
        })
      })
    }
    InboundFilters2.prototype._isDeniedUrl = function (event, options) {
      if (!options.denyUrls || !options.denyUrls.length) {
        return false
      }
      var url = this._getEventFilterUrl(event)
      return !url
        ? false
        : options.denyUrls.some(function (pattern) {
            return isMatchingPattern(url, pattern)
          })
    }
    InboundFilters2.prototype._isAllowedUrl = function (event, options) {
      if (!options.allowUrls || !options.allowUrls.length) {
        return true
      }
      var url = this._getEventFilterUrl(event)
      return !url
        ? true
        : options.allowUrls.some(function (pattern) {
            return isMatchingPattern(url, pattern)
          })
    }
    InboundFilters2.prototype._mergeOptions = function (clientOptions) {
      if (clientOptions === void 0) {
        clientOptions = {}
      }
      return {
        allowUrls: __spread(
          this._options.whitelistUrls || [],
          this._options.allowUrls || [],
          clientOptions.whitelistUrls || [],
          clientOptions.allowUrls || []
        ),
        denyUrls: __spread(
          this._options.blacklistUrls || [],
          this._options.denyUrls || [],
          clientOptions.blacklistUrls || [],
          clientOptions.denyUrls || []
        ),
        ignoreErrors: __spread(
          this._options.ignoreErrors || [],
          clientOptions.ignoreErrors || [],
          DEFAULT_IGNORE_ERRORS
        ),
        ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,
      }
    }
    InboundFilters2.prototype._getPossibleEventMessages = function (event) {
      if (event.message) {
        return [event.message]
      }
      if (event.exception) {
        try {
          var _a = (event.exception.values && event.exception.values[0]) || {},
            _b = _a.type,
            type = _b === void 0 ? '' : _b,
            _c = _a.value,
            value = _c === void 0 ? '' : _c
          return ['' + value, type + ': ' + value]
        } catch (oO) {
          logger.error('Cannot extract message for event ' + getEventDescription(event))
          return []
        }
      }
      return []
    }
    InboundFilters2.prototype._getEventFilterUrl = function (event) {
      try {
        if (event.stacktrace) {
          var frames_1 = event.stacktrace.frames
          return (frames_1 && frames_1[frames_1.length - 1].filename) || null
        }
        if (event.exception) {
          var frames_2 =
            event.exception.values &&
            event.exception.values[0].stacktrace &&
            event.exception.values[0].stacktrace.frames
          return (frames_2 && frames_2[frames_2.length - 1].filename) || null
        }
        return null
      } catch (oO) {
        logger.error('Cannot extract url for event ' + getEventDescription(event))
        return null
      }
    }
    InboundFilters2.id = 'InboundFilters'
    return InboundFilters2
  })()

  // node_modules/@sentry/browser/esm/tracekit.js
  var UNKNOWN_FUNCTION = '?'
  var chrome =
    /^\s*at (?:(.*?) ?\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i
  var gecko =
    /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i
  var winjs =
    /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i
  var geckoEval = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i
  var chromeEval = /\((\S*)(?::(\d+))(?::(\d+))\)/
  var reactMinifiedRegexp = /Minified React error #\d+;/i
  function computeStackTrace(ex) {
    var stack = null
    var popSize = 0
    if (ex) {
      if (typeof ex.framesToPop === 'number') {
        popSize = ex.framesToPop
      } else if (reactMinifiedRegexp.test(ex.message)) {
        popSize = 1
      }
    }
    try {
      stack = computeStackTraceFromStacktraceProp(ex)
      if (stack) {
        return popFrames(stack, popSize)
      }
    } catch (e) {}
    try {
      stack = computeStackTraceFromStackProp(ex)
      if (stack) {
        return popFrames(stack, popSize)
      }
    } catch (e) {}
    return {
      message: extractMessage(ex),
      name: ex && ex.name,
      stack: [],
      failed: true,
    }
  }
  function computeStackTraceFromStackProp(ex) {
    if (!ex || !ex.stack) {
      return null
    }
    var stack = []
    var lines = ex.stack.split('\n')
    var isEval
    var submatch
    var parts
    var element
    for (var i = 0; i < lines.length; ++i) {
      if ((parts = chrome.exec(lines[i]))) {
        var isNative = parts[2] && parts[2].indexOf('native') === 0
        isEval = parts[2] && parts[2].indexOf('eval') === 0
        if (isEval && (submatch = chromeEval.exec(parts[2]))) {
          parts[2] = submatch[1]
          parts[3] = submatch[2]
          parts[4] = submatch[3]
        }
        var url = parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2]
        var func = parts[1] || UNKNOWN_FUNCTION
        var isSafariExtension = func.indexOf('safari-extension') !== -1
        var isSafariWebExtension = func.indexOf('safari-web-extension') !== -1
        if (isSafariExtension || isSafariWebExtension) {
          func = func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION
          url = isSafariExtension ? 'safari-extension:' + url : 'safari-web-extension:' + url
        }
        element = {
          url,
          func,
          args: isNative ? [parts[2]] : [],
          line: parts[3] ? +parts[3] : null,
          column: parts[4] ? +parts[4] : null,
        }
      } else if ((parts = winjs.exec(lines[i]))) {
        element = {
          url: parts[2],
          func: parts[1] || UNKNOWN_FUNCTION,
          args: [],
          line: +parts[3],
          column: parts[4] ? +parts[4] : null,
        }
      } else if ((parts = gecko.exec(lines[i]))) {
        isEval = parts[3] && parts[3].indexOf(' > eval') > -1
        if (isEval && (submatch = geckoEval.exec(parts[3]))) {
          parts[1] = parts[1] || 'eval'
          parts[3] = submatch[1]
          parts[4] = submatch[2]
          parts[5] = ''
        } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {
          stack[0].column = ex.columnNumber + 1
        }
        element = {
          url: parts[3],
          func: parts[1] || UNKNOWN_FUNCTION,
          args: parts[2] ? parts[2].split(',') : [],
          line: parts[4] ? +parts[4] : null,
          column: parts[5] ? +parts[5] : null,
        }
      } else {
        continue
      }
      if (!element.func && element.line) {
        element.func = UNKNOWN_FUNCTION
      }
      stack.push(element)
    }
    if (!stack.length) {
      return null
    }
    return {
      message: extractMessage(ex),
      name: ex.name,
      stack,
    }
  }
  function computeStackTraceFromStacktraceProp(ex) {
    if (!ex || !ex.stacktrace) {
      return null
    }
    var stacktrace = ex.stacktrace
    var opera10Regex = / line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i
    var opera11Regex =
      / line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\((.*)\))? in (.*):\s*$/i
    var lines = stacktrace.split('\n')
    var stack = []
    var parts
    for (var line = 0; line < lines.length; line += 2) {
      var element = null
      if ((parts = opera10Regex.exec(lines[line]))) {
        element = {
          url: parts[2],
          func: parts[3],
          args: [],
          line: +parts[1],
          column: null,
        }
      } else if ((parts = opera11Regex.exec(lines[line]))) {
        element = {
          url: parts[6],
          func: parts[3] || parts[4],
          args: parts[5] ? parts[5].split(',') : [],
          line: +parts[1],
          column: +parts[2],
        }
      }
      if (element) {
        if (!element.func && element.line) {
          element.func = UNKNOWN_FUNCTION
        }
        stack.push(element)
      }
    }
    if (!stack.length) {
      return null
    }
    return {
      message: extractMessage(ex),
      name: ex.name,
      stack,
    }
  }
  function popFrames(stacktrace, popSize) {
    try {
      return __assign(__assign({}, stacktrace), { stack: stacktrace.stack.slice(popSize) })
    } catch (e) {
      return stacktrace
    }
  }
  function extractMessage(ex) {
    var message = ex && ex.message
    if (!message) {
      return 'No error message'
    }
    if (message.error && typeof message.error.message === 'string') {
      return message.error.message
    }
    return message
  }

  // node_modules/@sentry/browser/esm/parsers.js
  var STACKTRACE_LIMIT = 50
  function exceptionFromStacktrace(stacktrace) {
    var frames = prepareFramesForEvent(stacktrace.stack)
    var exception = {
      type: stacktrace.name,
      value: stacktrace.message,
    }
    if (frames && frames.length) {
      exception.stacktrace = { frames }
    }
    if (exception.type === void 0 && exception.value === '') {
      exception.value = 'Unrecoverable error caught'
    }
    return exception
  }
  function eventFromPlainObject(exception, syntheticException, rejection) {
    var event = {
      exception: {
        values: [
          {
            type: isEvent(exception) ? exception.constructor.name : rejection ? 'UnhandledRejection' : 'Error',
            value:
              'Non-Error ' +
              (rejection ? 'promise rejection' : 'exception') +
              ' captured with keys: ' +
              extractExceptionKeysForMessage(exception),
          },
        ],
      },
      extra: {
        __serialized__: normalizeToSize(exception),
      },
    }
    if (syntheticException) {
      var stacktrace = computeStackTrace(syntheticException)
      var frames_1 = prepareFramesForEvent(stacktrace.stack)
      event.stacktrace = {
        frames: frames_1,
      }
    }
    return event
  }
  function eventFromStacktrace(stacktrace) {
    var exception = exceptionFromStacktrace(stacktrace)
    return {
      exception: {
        values: [exception],
      },
    }
  }
  function prepareFramesForEvent(stack) {
    if (!stack || !stack.length) {
      return []
    }
    var localStack = stack
    var firstFrameFunction = localStack[0].func || ''
    var lastFrameFunction = localStack[localStack.length - 1].func || ''
    if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {
      localStack = localStack.slice(1)
    }
    if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {
      localStack = localStack.slice(0, -1)
    }
    return localStack
      .slice(0, STACKTRACE_LIMIT)
      .map(function (frame) {
        return {
          colno: frame.column === null ? void 0 : frame.column,
          filename: frame.url || localStack[0].url,
          function: frame.func || '?',
          in_app: true,
          lineno: frame.line === null ? void 0 : frame.line,
        }
      })
      .reverse()
  }

  // node_modules/@sentry/browser/esm/eventbuilder.js
  function eventFromException(options, exception, hint) {
    var syntheticException = (hint && hint.syntheticException) || void 0
    var event = eventFromUnknownInput(exception, syntheticException, {
      attachStacktrace: options.attachStacktrace,
    })
    addExceptionMechanism(event, {
      handled: true,
      type: 'generic',
    })
    event.level = Severity.Error
    if (hint && hint.event_id) {
      event.event_id = hint.event_id
    }
    return SyncPromise.resolve(event)
  }
  function eventFromMessage(options, message, level, hint) {
    if (level === void 0) {
      level = Severity.Info
    }
    var syntheticException = (hint && hint.syntheticException) || void 0
    var event = eventFromString(message, syntheticException, {
      attachStacktrace: options.attachStacktrace,
    })
    event.level = level
    if (hint && hint.event_id) {
      event.event_id = hint.event_id
    }
    return SyncPromise.resolve(event)
  }
  function eventFromUnknownInput(exception, syntheticException, options) {
    if (options === void 0) {
      options = {}
    }
    var event
    if (isErrorEvent(exception) && exception.error) {
      var errorEvent = exception
      exception = errorEvent.error
      event = eventFromStacktrace(computeStackTrace(exception))
      return event
    }
    if (isDOMError(exception) || isDOMException(exception)) {
      var domException = exception
      var name_1 = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException')
      var message = domException.message ? name_1 + ': ' + domException.message : name_1
      event = eventFromString(message, syntheticException, options)
      addExceptionTypeValue(event, message)
      if ('code' in domException) {
        event.tags = __assign(__assign({}, event.tags), { 'DOMException.code': '' + domException.code })
      }
      return event
    }
    if (isError(exception)) {
      event = eventFromStacktrace(computeStackTrace(exception))
      return event
    }
    if (isPlainObject(exception) || isEvent(exception)) {
      var objectException = exception
      event = eventFromPlainObject(objectException, syntheticException, options.rejection)
      addExceptionMechanism(event, {
        synthetic: true,
      })
      return event
    }
    event = eventFromString(exception, syntheticException, options)
    addExceptionTypeValue(event, '' + exception, void 0)
    addExceptionMechanism(event, {
      synthetic: true,
    })
    return event
  }
  function eventFromString(input, syntheticException, options) {
    if (options === void 0) {
      options = {}
    }
    var event = {
      message: input,
    }
    if (options.attachStacktrace && syntheticException) {
      var stacktrace = computeStackTrace(syntheticException)
      var frames_1 = prepareFramesForEvent(stacktrace.stack)
      event.stacktrace = {
        frames: frames_1,
      }
    }
    return event
  }

  // node_modules/@sentry/browser/esm/transports/base.js
  var CATEGORY_MAPPING = {
    event: 'error',
    transaction: 'transaction',
    session: 'session',
    attachment: 'attachment',
  }
  var BaseTransport = (function () {
    function BaseTransport2(options) {
      this.options = options
      this._buffer = new PromiseBuffer(30)
      this._rateLimits = {}
      this._api = new API(options.dsn, options._metadata, options.tunnel)
      this.url = this._api.getStoreEndpointWithUrlEncodedAuth()
    }
    BaseTransport2.prototype.sendEvent = function (_) {
      throw new SentryError('Transport Class has to implement `sendEvent` method')
    }
    BaseTransport2.prototype.close = function (timeout) {
      return this._buffer.drain(timeout)
    }
    BaseTransport2.prototype._handleResponse = function (_a) {
      var requestType = _a.requestType,
        response = _a.response,
        headers = _a.headers,
        resolve = _a.resolve,
        reject = _a.reject
      var status = Status.fromHttpCode(response.status)
      var limited = this._handleRateLimit(headers)
      if (limited)
        logger.warn('Too many ' + requestType + ' requests, backing off until: ' + this._disabledUntil(requestType))
      if (status === Status.Success) {
        resolve({ status })
        return
      }
      reject(response)
    }
    BaseTransport2.prototype._disabledUntil = function (requestType) {
      var category = CATEGORY_MAPPING[requestType]
      return this._rateLimits[category] || this._rateLimits.all
    }
    BaseTransport2.prototype._isRateLimited = function (requestType) {
      return this._disabledUntil(requestType) > new Date(Date.now())
    }
    BaseTransport2.prototype._handleRateLimit = function (headers) {
      var e_1, _a, e_2, _b
      var now = Date.now()
      var rlHeader = headers['x-sentry-rate-limits']
      var raHeader = headers['retry-after']
      if (rlHeader) {
        try {
          for (var _c = __values(rlHeader.trim().split(',')), _d = _c.next(); !_d.done; _d = _c.next()) {
            var limit = _d.value
            var parameters = limit.split(':', 2)
            var headerDelay = parseInt(parameters[0], 10)
            var delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1e3
            try {
              for (
                var _e = ((e_2 = void 0), __values(parameters[1].split(';'))), _f = _e.next();
                !_f.done;
                _f = _e.next()
              ) {
                var category = _f.value
                this._rateLimits[category || 'all'] = new Date(now + delay)
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 }
            } finally {
              try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e)
              } finally {
                if (e_2) throw e_2.error
              }
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 }
        } finally {
          try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c)
          } finally {
            if (e_1) throw e_1.error
          }
        }
        return true
      } else if (raHeader) {
        this._rateLimits.all = new Date(now + parseRetryAfterHeader(now, raHeader))
        return true
      }
      return false
    }
    return BaseTransport2
  })()

  // node_modules/@sentry/browser/esm/transports/fetch.js
  function getNativeFetchImplementation() {
    var _a, _b
    var global8 = getGlobalObject()
    if (isNativeFetch(global8.fetch)) {
      return global8.fetch.bind(global8)
    }
    var document2 = global8.document
    var fetchImpl = global8.fetch
    if (typeof ((_a = document2) === null || _a === void 0 ? void 0 : _a.createElement) === 'function') {
      try {
        var sandbox = document2.createElement('iframe')
        sandbox.hidden = true
        document2.head.appendChild(sandbox)
        if ((_b = sandbox.contentWindow) === null || _b === void 0 ? void 0 : _b.fetch) {
          fetchImpl = sandbox.contentWindow.fetch
        }
        document2.head.removeChild(sandbox)
      } catch (e) {
        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e)
      }
    }
    return fetchImpl.bind(global8)
  }
  var FetchTransport = (function (_super) {
    __extends(FetchTransport2, _super)
    function FetchTransport2(options, fetchImpl) {
      if (fetchImpl === void 0) {
        fetchImpl = getNativeFetchImplementation()
      }
      var _this = _super.call(this, options) || this
      _this._fetch = fetchImpl
      return _this
    }
    FetchTransport2.prototype.sendEvent = function (event) {
      return this._sendRequest(eventToSentryRequest(event, this._api), event)
    }
    FetchTransport2.prototype.sendSession = function (session) {
      return this._sendRequest(sessionToSentryRequest(session, this._api), session)
    }
    FetchTransport2.prototype._sendRequest = function (sentryRequest, originalPayload) {
      var _this = this
      if (this._isRateLimited(sentryRequest.type)) {
        return Promise.reject({
          event: originalPayload,
          type: sentryRequest.type,
          reason:
            'Transport for ' +
            sentryRequest.type +
            ' requests locked till ' +
            this._disabledUntil(sentryRequest.type) +
            ' due to too many requests.',
          status: 429,
        })
      }
      var options = {
        body: sentryRequest.body,
        method: 'POST',
        referrerPolicy: supportsReferrerPolicy() ? 'origin' : '',
      }
      if (this.options.fetchParameters !== void 0) {
        Object.assign(options, this.options.fetchParameters)
      }
      if (this.options.headers !== void 0) {
        options.headers = this.options.headers
      }
      return this._buffer.add(function () {
        return new SyncPromise(function (resolve, reject) {
          void _this
            ._fetch(sentryRequest.url, options)
            .then(function (response) {
              var headers = {
                'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),
                'retry-after': response.headers.get('Retry-After'),
              }
              _this._handleResponse({
                requestType: sentryRequest.type,
                response,
                headers,
                resolve,
                reject,
              })
            })
            .catch(reject)
        })
      })
    }
    return FetchTransport2
  })(BaseTransport)

  // node_modules/@sentry/browser/esm/transports/xhr.js
  var XHRTransport = (function (_super) {
    __extends(XHRTransport2, _super)
    function XHRTransport2() {
      return (_super !== null && _super.apply(this, arguments)) || this
    }
    XHRTransport2.prototype.sendEvent = function (event) {
      return this._sendRequest(eventToSentryRequest(event, this._api), event)
    }
    XHRTransport2.prototype.sendSession = function (session) {
      return this._sendRequest(sessionToSentryRequest(session, this._api), session)
    }
    XHRTransport2.prototype._sendRequest = function (sentryRequest, originalPayload) {
      var _this = this
      if (this._isRateLimited(sentryRequest.type)) {
        return Promise.reject({
          event: originalPayload,
          type: sentryRequest.type,
          reason:
            'Transport for ' +
            sentryRequest.type +
            ' requests locked till ' +
            this._disabledUntil(sentryRequest.type) +
            ' due to too many requests.',
          status: 429,
        })
      }
      return this._buffer.add(function () {
        return new SyncPromise(function (resolve, reject) {
          var request = new XMLHttpRequest()
          request.onreadystatechange = function () {
            if (request.readyState === 4) {
              var headers = {
                'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),
                'retry-after': request.getResponseHeader('Retry-After'),
              }
              _this._handleResponse({ requestType: sentryRequest.type, response: request, headers, resolve, reject })
            }
          }
          request.open('POST', sentryRequest.url)
          for (var header in _this.options.headers) {
            if (_this.options.headers.hasOwnProperty(header)) {
              request.setRequestHeader(header, _this.options.headers[header])
            }
          }
          request.send(sentryRequest.body)
        })
      })
    }
    return XHRTransport2
  })(BaseTransport)

  // node_modules/@sentry/browser/esm/backend.js
  var BrowserBackend = (function (_super) {
    __extends(BrowserBackend2, _super)
    function BrowserBackend2() {
      return (_super !== null && _super.apply(this, arguments)) || this
    }
    BrowserBackend2.prototype.eventFromException = function (exception, hint) {
      return eventFromException(this._options, exception, hint)
    }
    BrowserBackend2.prototype.eventFromMessage = function (message, level, hint) {
      if (level === void 0) {
        level = Severity.Info
      }
      return eventFromMessage(this._options, message, level, hint)
    }
    BrowserBackend2.prototype._setupTransport = function () {
      if (!this._options.dsn) {
        return _super.prototype._setupTransport.call(this)
      }
      var transportOptions = __assign(__assign({}, this._options.transportOptions), {
        dsn: this._options.dsn,
        tunnel: this._options.tunnel,
        _metadata: this._options._metadata,
      })
      if (this._options.transport) {
        return new this._options.transport(transportOptions)
      }
      if (supportsFetch()) {
        return new FetchTransport(transportOptions)
      }
      return new XHRTransport(transportOptions)
    }
    return BrowserBackend2
  })(BaseBackend)

  // node_modules/@sentry/browser/esm/helpers.js
  var ignoreOnError = 0
  function shouldIgnoreOnError() {
    return ignoreOnError > 0
  }
  function ignoreNextOnError() {
    ignoreOnError += 1
    setTimeout(function () {
      ignoreOnError -= 1
    })
  }
  function wrap(fn, options, before) {
    if (options === void 0) {
      options = {}
    }
    if (typeof fn !== 'function') {
      return fn
    }
    try {
      if (fn.__sentry__) {
        return fn
      }
      if (fn.__sentry_wrapped__) {
        return fn.__sentry_wrapped__
      }
    } catch (e) {
      return fn
    }
    var sentryWrapped = function () {
      var args = Array.prototype.slice.call(arguments)
      try {
        if (before && typeof before === 'function') {
          before.apply(this, arguments)
        }
        var wrappedArguments = args.map(function (arg) {
          return wrap(arg, options)
        })
        if (fn.handleEvent) {
          return fn.handleEvent.apply(this, wrappedArguments)
        }
        return fn.apply(this, wrappedArguments)
      } catch (ex) {
        ignoreNextOnError()
        withScope(function (scope) {
          scope.addEventProcessor(function (event) {
            var processedEvent = __assign({}, event)
            if (options.mechanism) {
              addExceptionTypeValue(processedEvent, void 0, void 0)
              addExceptionMechanism(processedEvent, options.mechanism)
            }
            processedEvent.extra = __assign(__assign({}, processedEvent.extra), { arguments: args })
            return processedEvent
          })
          captureException(ex)
        })
        throw ex
      }
    }
    try {
      for (var property in fn) {
        if (Object.prototype.hasOwnProperty.call(fn, property)) {
          sentryWrapped[property] = fn[property]
        }
      }
    } catch (_oO) {}
    fn.prototype = fn.prototype || {}
    sentryWrapped.prototype = fn.prototype
    Object.defineProperty(fn, '__sentry_wrapped__', {
      enumerable: false,
      value: sentryWrapped,
    })
    Object.defineProperties(sentryWrapped, {
      __sentry__: {
        enumerable: false,
        value: true,
      },
      __sentry_original__: {
        enumerable: false,
        value: fn,
      },
    })
    try {
      var descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name')
      if (descriptor.configurable) {
        Object.defineProperty(sentryWrapped, 'name', {
          get: function () {
            return fn.name
          },
        })
      }
    } catch (_oO) {}
    return sentryWrapped
  }
  function injectReportDialog(options) {
    if (options === void 0) {
      options = {}
    }
    if (!options.eventId) {
      logger.error('Missing eventId option in showReportDialog call')
      return
    }
    if (!options.dsn) {
      logger.error('Missing dsn option in showReportDialog call')
      return
    }
    var script = document.createElement('script')
    script.async = true
    script.src = new API(options.dsn).getReportDialogEndpoint(options)
    if (options.onLoad) {
      script.onload = options.onLoad
    }
    ;(document.head || document.body).appendChild(script)
  }

  // node_modules/@sentry/browser/esm/integrations/globalhandlers.js
  var GlobalHandlers = (function () {
    function GlobalHandlers2(options) {
      this.name = GlobalHandlers2.id
      this._onErrorHandlerInstalled = false
      this._onUnhandledRejectionHandlerInstalled = false
      this._options = __assign({ onerror: true, onunhandledrejection: true }, options)
    }
    GlobalHandlers2.prototype.setupOnce = function () {
      Error.stackTraceLimit = 50
      if (this._options.onerror) {
        logger.log('Global Handler attached: onerror')
        this._installGlobalOnErrorHandler()
      }
      if (this._options.onunhandledrejection) {
        logger.log('Global Handler attached: onunhandledrejection')
        this._installGlobalOnUnhandledRejectionHandler()
      }
    }
    GlobalHandlers2.prototype._installGlobalOnErrorHandler = function () {
      var _this = this
      if (this._onErrorHandlerInstalled) {
        return
      }
      addInstrumentationHandler({
        callback: function (data) {
          var error = data.error
          var currentHub = getCurrentHub()
          var hasIntegration = currentHub.getIntegration(GlobalHandlers2)
          var isFailedOwnDelivery = error && error.__sentry_own_request__ === true
          if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {
            return
          }
          var client = currentHub.getClient()
          var event =
            error === void 0 && isString(data.msg)
              ? _this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column)
              : _this._enhanceEventWithInitialFrame(
                  eventFromUnknownInput(error || data.msg, void 0, {
                    attachStacktrace: client && client.getOptions().attachStacktrace,
                    rejection: false,
                  }),
                  data.url,
                  data.line,
                  data.column
                )
          addExceptionMechanism(event, {
            handled: false,
            type: 'onerror',
          })
          currentHub.captureEvent(event, {
            originalException: error,
          })
        },
        type: 'error',
      })
      this._onErrorHandlerInstalled = true
    }
    GlobalHandlers2.prototype._installGlobalOnUnhandledRejectionHandler = function () {
      var _this = this
      if (this._onUnhandledRejectionHandlerInstalled) {
        return
      }
      addInstrumentationHandler({
        callback: function (e) {
          var error = e
          try {
            if ('reason' in e) {
              error = e.reason
            } else if ('detail' in e && 'reason' in e.detail) {
              error = e.detail.reason
            }
          } catch (_oO) {}
          var currentHub = getCurrentHub()
          var hasIntegration = currentHub.getIntegration(GlobalHandlers2)
          var isFailedOwnDelivery = error && error.__sentry_own_request__ === true
          if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {
            return true
          }
          var client = currentHub.getClient()
          var event = isPrimitive(error)
            ? _this._eventFromRejectionWithPrimitive(error)
            : eventFromUnknownInput(error, void 0, {
                attachStacktrace: client && client.getOptions().attachStacktrace,
                rejection: true,
              })
          event.level = Severity.Error
          addExceptionMechanism(event, {
            handled: false,
            type: 'onunhandledrejection',
          })
          currentHub.captureEvent(event, {
            originalException: error,
          })
          return
        },
        type: 'unhandledrejection',
      })
      this._onUnhandledRejectionHandlerInstalled = true
    }
    GlobalHandlers2.prototype._eventFromIncompleteOnError = function (msg, url, line, column) {
      var ERROR_TYPES_RE =
        /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i
      var message = isErrorEvent(msg) ? msg.message : msg
      var name
      var groups = message.match(ERROR_TYPES_RE)
      if (groups) {
        name = groups[1]
        message = groups[2]
      }
      var event = {
        exception: {
          values: [
            {
              type: name || 'Error',
              value: message,
            },
          ],
        },
      }
      return this._enhanceEventWithInitialFrame(event, url, line, column)
    }
    GlobalHandlers2.prototype._eventFromRejectionWithPrimitive = function (reason) {
      return {
        exception: {
          values: [
            {
              type: 'UnhandledRejection',
              value: 'Non-Error promise rejection captured with value: ' + String(reason),
            },
          ],
        },
      }
    }
    GlobalHandlers2.prototype._enhanceEventWithInitialFrame = function (event, url, line, column) {
      event.exception = event.exception || {}
      event.exception.values = event.exception.values || []
      event.exception.values[0] = event.exception.values[0] || {}
      event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {}
      event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || []
      var colno = isNaN(parseInt(column, 10)) ? void 0 : column
      var lineno = isNaN(parseInt(line, 10)) ? void 0 : line
      var filename = isString(url) && url.length > 0 ? url : getLocationHref()
      if (event.exception.values[0].stacktrace.frames.length === 0) {
        event.exception.values[0].stacktrace.frames.push({
          colno,
          filename,
          function: '?',
          in_app: true,
          lineno,
        })
      }
      return event
    }
    GlobalHandlers2.id = 'GlobalHandlers'
    return GlobalHandlers2
  })()

  // node_modules/@sentry/browser/esm/integrations/trycatch.js
  var DEFAULT_EVENT_TARGET = [
    'EventTarget',
    'Window',
    'Node',
    'ApplicationCache',
    'AudioTrackList',
    'ChannelMergerNode',
    'CryptoOperation',
    'EventSource',
    'FileReader',
    'HTMLUnknownElement',
    'IDBDatabase',
    'IDBRequest',
    'IDBTransaction',
    'KeyOperation',
    'MediaController',
    'MessagePort',
    'ModalWindow',
    'Notification',
    'SVGElementInstance',
    'Screen',
    'TextTrack',
    'TextTrackCue',
    'TextTrackList',
    'WebSocket',
    'WebSocketWorker',
    'Worker',
    'XMLHttpRequest',
    'XMLHttpRequestEventTarget',
    'XMLHttpRequestUpload',
  ]
  var TryCatch = (function () {
    function TryCatch2(options) {
      this.name = TryCatch2.id
      this._options = __assign(
        { XMLHttpRequest: true, eventTarget: true, requestAnimationFrame: true, setInterval: true, setTimeout: true },
        options
      )
    }
    TryCatch2.prototype.setupOnce = function () {
      var global8 = getGlobalObject()
      if (this._options.setTimeout) {
        fill(global8, 'setTimeout', this._wrapTimeFunction.bind(this))
      }
      if (this._options.setInterval) {
        fill(global8, 'setInterval', this._wrapTimeFunction.bind(this))
      }
      if (this._options.requestAnimationFrame) {
        fill(global8, 'requestAnimationFrame', this._wrapRAF.bind(this))
      }
      if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global8) {
        fill(XMLHttpRequest.prototype, 'send', this._wrapXHR.bind(this))
      }
      if (this._options.eventTarget) {
        var eventTarget = Array.isArray(this._options.eventTarget) ? this._options.eventTarget : DEFAULT_EVENT_TARGET
        eventTarget.forEach(this._wrapEventTarget.bind(this))
      }
    }
    TryCatch2.prototype._wrapTimeFunction = function (original) {
      return function () {
        var args = []
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i]
        }
        var originalCallback = args[0]
        args[0] = wrap(originalCallback, {
          mechanism: {
            data: { function: getFunctionName(original) },
            handled: true,
            type: 'instrument',
          },
        })
        return original.apply(this, args)
      }
    }
    TryCatch2.prototype._wrapRAF = function (original) {
      return function (callback) {
        return original.call(
          this,
          wrap(callback, {
            mechanism: {
              data: {
                function: 'requestAnimationFrame',
                handler: getFunctionName(original),
              },
              handled: true,
              type: 'instrument',
            },
          })
        )
      }
    }
    TryCatch2.prototype._wrapEventTarget = function (target) {
      var global8 = getGlobalObject()
      var proto = global8[target] && global8[target].prototype
      if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {
        return
      }
      fill(proto, 'addEventListener', function (original) {
        return function (eventName, fn, options) {
          try {
            if (typeof fn.handleEvent === 'function') {
              fn.handleEvent = wrap(fn.handleEvent.bind(fn), {
                mechanism: {
                  data: {
                    function: 'handleEvent',
                    handler: getFunctionName(fn),
                    target,
                  },
                  handled: true,
                  type: 'instrument',
                },
              })
            }
          } catch (err) {}
          return original.call(
            this,
            eventName,
            wrap(fn, {
              mechanism: {
                data: {
                  function: 'addEventListener',
                  handler: getFunctionName(fn),
                  target,
                },
                handled: true,
                type: 'instrument',
              },
            }),
            options
          )
        }
      })
      fill(proto, 'removeEventListener', function (originalRemoveEventListener) {
        return function (eventName, fn, options) {
          var _a
          var wrappedEventHandler = fn
          try {
            var originalEventHandler =
              (_a = wrappedEventHandler) === null || _a === void 0 ? void 0 : _a.__sentry_wrapped__
            if (originalEventHandler) {
              originalRemoveEventListener.call(this, eventName, originalEventHandler, options)
            }
          } catch (e) {}
          return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options)
        }
      })
    }
    TryCatch2.prototype._wrapXHR = function (originalSend) {
      return function () {
        var args = []
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i]
        }
        var xhr = this
        var xmlHttpRequestProps = ['onload', 'onerror', 'onprogress', 'onreadystatechange']
        xmlHttpRequestProps.forEach(function (prop) {
          if (prop in xhr && typeof xhr[prop] === 'function') {
            fill(xhr, prop, function (original) {
              var wrapOptions = {
                mechanism: {
                  data: {
                    function: prop,
                    handler: getFunctionName(original),
                  },
                  handled: true,
                  type: 'instrument',
                },
              }
              if (original.__sentry_original__) {
                wrapOptions.mechanism.data.handler = getFunctionName(original.__sentry_original__)
              }
              return wrap(original, wrapOptions)
            })
          }
        })
        return originalSend.apply(this, args)
      }
    }
    TryCatch2.id = 'TryCatch'
    return TryCatch2
  })()

  // node_modules/@sentry/browser/esm/integrations/breadcrumbs.js
  var Breadcrumbs = (function () {
    function Breadcrumbs2(options) {
      this.name = Breadcrumbs2.id
      this._options = __assign(
        { console: true, dom: true, fetch: true, history: true, sentry: true, xhr: true },
        options
      )
    }
    Breadcrumbs2.prototype.addSentryBreadcrumb = function (event) {
      if (!this._options.sentry) {
        return
      }
      getCurrentHub().addBreadcrumb(
        {
          category: 'sentry.' + (event.type === 'transaction' ? 'transaction' : 'event'),
          event_id: event.event_id,
          level: event.level,
          message: getEventDescription(event),
        },
        {
          event,
        }
      )
    }
    Breadcrumbs2.prototype.setupOnce = function () {
      var _this = this
      if (this._options.console) {
        addInstrumentationHandler({
          callback: function () {
            var args = []
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i]
            }
            _this._consoleBreadcrumb.apply(_this, __spread(args))
          },
          type: 'console',
        })
      }
      if (this._options.dom) {
        addInstrumentationHandler({
          callback: function () {
            var args = []
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i]
            }
            _this._domBreadcrumb.apply(_this, __spread(args))
          },
          type: 'dom',
        })
      }
      if (this._options.xhr) {
        addInstrumentationHandler({
          callback: function () {
            var args = []
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i]
            }
            _this._xhrBreadcrumb.apply(_this, __spread(args))
          },
          type: 'xhr',
        })
      }
      if (this._options.fetch) {
        addInstrumentationHandler({
          callback: function () {
            var args = []
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i]
            }
            _this._fetchBreadcrumb.apply(_this, __spread(args))
          },
          type: 'fetch',
        })
      }
      if (this._options.history) {
        addInstrumentationHandler({
          callback: function () {
            var args = []
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i]
            }
            _this._historyBreadcrumb.apply(_this, __spread(args))
          },
          type: 'history',
        })
      }
    }
    Breadcrumbs2.prototype._consoleBreadcrumb = function (handlerData) {
      var breadcrumb = {
        category: 'console',
        data: {
          arguments: handlerData.args,
          logger: 'console',
        },
        level: Severity.fromString(handlerData.level),
        message: safeJoin(handlerData.args, ' '),
      }
      if (handlerData.level === 'assert') {
        if (handlerData.args[0] === false) {
          breadcrumb.message = 'Assertion failed: ' + (safeJoin(handlerData.args.slice(1), ' ') || 'console.assert')
          breadcrumb.data.arguments = handlerData.args.slice(1)
        } else {
          return
        }
      }
      getCurrentHub().addBreadcrumb(breadcrumb, {
        input: handlerData.args,
        level: handlerData.level,
      })
    }
    Breadcrumbs2.prototype._domBreadcrumb = function (handlerData) {
      var target
      var keyAttrs = typeof this._options.dom === 'object' ? this._options.dom.serializeAttribute : void 0
      if (typeof keyAttrs === 'string') {
        keyAttrs = [keyAttrs]
      }
      try {
        target = handlerData.event.target
          ? htmlTreeAsString(handlerData.event.target, keyAttrs)
          : htmlTreeAsString(handlerData.event, keyAttrs)
      } catch (e) {
        target = '<unknown>'
      }
      if (target.length === 0) {
        return
      }
      getCurrentHub().addBreadcrumb(
        {
          category: 'ui.' + handlerData.name,
          message: target,
        },
        {
          event: handlerData.event,
          name: handlerData.name,
          global: handlerData.global,
        }
      )
    }
    Breadcrumbs2.prototype._xhrBreadcrumb = function (handlerData) {
      if (handlerData.endTimestamp) {
        if (handlerData.xhr.__sentry_own_request__) {
          return
        }
        var _a = handlerData.xhr.__sentry_xhr__ || {},
          method = _a.method,
          url = _a.url,
          status_code = _a.status_code,
          body = _a.body
        getCurrentHub().addBreadcrumb(
          {
            category: 'xhr',
            data: {
              method,
              url,
              status_code,
            },
            type: 'http',
          },
          {
            xhr: handlerData.xhr,
            input: body,
          }
        )
        return
      }
    }
    Breadcrumbs2.prototype._fetchBreadcrumb = function (handlerData) {
      if (!handlerData.endTimestamp) {
        return
      }
      if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {
        return
      }
      if (handlerData.error) {
        getCurrentHub().addBreadcrumb(
          {
            category: 'fetch',
            data: handlerData.fetchData,
            level: Severity.Error,
            type: 'http',
          },
          {
            data: handlerData.error,
            input: handlerData.args,
          }
        )
      } else {
        getCurrentHub().addBreadcrumb(
          {
            category: 'fetch',
            data: __assign(__assign({}, handlerData.fetchData), { status_code: handlerData.response.status }),
            type: 'http',
          },
          {
            input: handlerData.args,
            response: handlerData.response,
          }
        )
      }
    }
    Breadcrumbs2.prototype._historyBreadcrumb = function (handlerData) {
      var global8 = getGlobalObject()
      var from = handlerData.from
      var to = handlerData.to
      var parsedLoc = parseUrl(global8.location.href)
      var parsedFrom = parseUrl(from)
      var parsedTo = parseUrl(to)
      if (!parsedFrom.path) {
        parsedFrom = parsedLoc
      }
      if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {
        to = parsedTo.relative
      }
      if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {
        from = parsedFrom.relative
      }
      getCurrentHub().addBreadcrumb({
        category: 'navigation',
        data: {
          from,
          to,
        },
      })
    }
    Breadcrumbs2.id = 'Breadcrumbs'
    return Breadcrumbs2
  })()

  // node_modules/@sentry/browser/esm/integrations/linkederrors.js
  var DEFAULT_KEY = 'cause'
  var DEFAULT_LIMIT = 5
  var LinkedErrors = (function () {
    function LinkedErrors2(options) {
      if (options === void 0) {
        options = {}
      }
      this.name = LinkedErrors2.id
      this._key = options.key || DEFAULT_KEY
      this._limit = options.limit || DEFAULT_LIMIT
    }
    LinkedErrors2.prototype.setupOnce = function () {
      addGlobalEventProcessor(function (event, hint) {
        var self2 = getCurrentHub().getIntegration(LinkedErrors2)
        if (self2) {
          return self2._handler(event, hint)
        }
        return event
      })
    }
    LinkedErrors2.prototype._handler = function (event, hint) {
      if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {
        return event
      }
      var linkedErrors = this._walkErrorTree(hint.originalException, this._key)
      event.exception.values = __spread(linkedErrors, event.exception.values)
      return event
    }
    LinkedErrors2.prototype._walkErrorTree = function (error, key, stack) {
      if (stack === void 0) {
        stack = []
      }
      if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {
        return stack
      }
      var stacktrace = computeStackTrace(error[key])
      var exception = exceptionFromStacktrace(stacktrace)
      return this._walkErrorTree(error[key], key, __spread([exception], stack))
    }
    LinkedErrors2.id = 'LinkedErrors'
    return LinkedErrors2
  })()

  // node_modules/@sentry/browser/esm/integrations/useragent.js
  var global4 = getGlobalObject()
  var UserAgent = (function () {
    function UserAgent2() {
      this.name = UserAgent2.id
    }
    UserAgent2.prototype.setupOnce = function () {
      addGlobalEventProcessor(function (event) {
        var _a, _b, _c
        if (getCurrentHub().getIntegration(UserAgent2)) {
          if (!global4.navigator && !global4.location && !global4.document) {
            return event
          }
          var url =
            ((_a = event.request) === null || _a === void 0 ? void 0 : _a.url) ||
            ((_b = global4.location) === null || _b === void 0 ? void 0 : _b.href)
          var referrer = (global4.document || {}).referrer
          var userAgent = (global4.navigator || {}).userAgent
          var headers = __assign(
            __assign(
              __assign({}, (_c = event.request) === null || _c === void 0 ? void 0 : _c.headers),
              referrer && { Referer: referrer }
            ),
            userAgent && { 'User-Agent': userAgent }
          )
          var request = __assign(__assign({}, url && { url }), { headers })
          return __assign(__assign({}, event), { request })
        }
        return event
      })
    }
    UserAgent2.id = 'UserAgent'
    return UserAgent2
  })()

  // node_modules/@sentry/browser/esm/integrations/dedupe.js
  var Dedupe = (function () {
    function Dedupe2() {
      this.name = Dedupe2.id
    }
    Dedupe2.prototype.setupOnce = function (addGlobalEventProcessor2, getCurrentHub2) {
      addGlobalEventProcessor2(function (currentEvent) {
        var self2 = getCurrentHub2().getIntegration(Dedupe2)
        if (self2) {
          try {
            if (self2._shouldDropEvent(currentEvent, self2._previousEvent)) {
              return null
            }
          } catch (_oO) {
            return (self2._previousEvent = currentEvent)
          }
          return (self2._previousEvent = currentEvent)
        }
        return currentEvent
      })
    }
    Dedupe2.prototype._shouldDropEvent = function (currentEvent, previousEvent) {
      if (!previousEvent) {
        return false
      }
      if (this._isSameMessageEvent(currentEvent, previousEvent)) {
        return true
      }
      if (this._isSameExceptionEvent(currentEvent, previousEvent)) {
        return true
      }
      return false
    }
    Dedupe2.prototype._isSameMessageEvent = function (currentEvent, previousEvent) {
      var currentMessage = currentEvent.message
      var previousMessage = previousEvent.message
      if (!currentMessage && !previousMessage) {
        return false
      }
      if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {
        return false
      }
      if (currentMessage !== previousMessage) {
        return false
      }
      if (!this._isSameFingerprint(currentEvent, previousEvent)) {
        return false
      }
      if (!this._isSameStacktrace(currentEvent, previousEvent)) {
        return false
      }
      return true
    }
    Dedupe2.prototype._getFramesFromEvent = function (event) {
      var exception = event.exception
      if (exception) {
        try {
          return exception.values[0].stacktrace.frames
        } catch (_oO) {
          return void 0
        }
      } else if (event.stacktrace) {
        return event.stacktrace.frames
      }
      return void 0
    }
    Dedupe2.prototype._isSameStacktrace = function (currentEvent, previousEvent) {
      var currentFrames = this._getFramesFromEvent(currentEvent)
      var previousFrames = this._getFramesFromEvent(previousEvent)
      if (!currentFrames && !previousFrames) {
        return true
      }
      if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {
        return false
      }
      currentFrames = currentFrames
      previousFrames = previousFrames
      if (previousFrames.length !== currentFrames.length) {
        return false
      }
      for (var i = 0; i < previousFrames.length; i++) {
        var frameA = previousFrames[i]
        var frameB = currentFrames[i]
        if (
          frameA.filename !== frameB.filename ||
          frameA.lineno !== frameB.lineno ||
          frameA.colno !== frameB.colno ||
          frameA.function !== frameB.function
        ) {
          return false
        }
      }
      return true
    }
    Dedupe2.prototype._getExceptionFromEvent = function (event) {
      return event.exception && event.exception.values && event.exception.values[0]
    }
    Dedupe2.prototype._isSameExceptionEvent = function (currentEvent, previousEvent) {
      var previousException = this._getExceptionFromEvent(previousEvent)
      var currentException = this._getExceptionFromEvent(currentEvent)
      if (!previousException || !currentException) {
        return false
      }
      if (previousException.type !== currentException.type || previousException.value !== currentException.value) {
        return false
      }
      if (!this._isSameFingerprint(currentEvent, previousEvent)) {
        return false
      }
      if (!this._isSameStacktrace(currentEvent, previousEvent)) {
        return false
      }
      return true
    }
    Dedupe2.prototype._isSameFingerprint = function (currentEvent, previousEvent) {
      var currentFingerprint = currentEvent.fingerprint
      var previousFingerprint = previousEvent.fingerprint
      if (!currentFingerprint && !previousFingerprint) {
        return true
      }
      if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {
        return false
      }
      currentFingerprint = currentFingerprint
      previousFingerprint = previousFingerprint
      try {
        return !!(currentFingerprint.join('') === previousFingerprint.join(''))
      } catch (_oO) {
        return false
      }
    }
    Dedupe2.id = 'Dedupe'
    return Dedupe2
  })()

  // node_modules/@sentry/browser/esm/client.js
  var BrowserClient = (function (_super) {
    __extends(BrowserClient2, _super)
    function BrowserClient2(options) {
      if (options === void 0) {
        options = {}
      }
      var _this = this
      options._metadata = options._metadata || {}
      options._metadata.sdk = options._metadata.sdk || {
        name: 'sentry.javascript.browser',
        packages: [
          {
            name: 'npm:@sentry/browser',
            version: SDK_VERSION,
          },
        ],
        version: SDK_VERSION,
      }
      _this = _super.call(this, BrowserBackend, options) || this
      return _this
    }
    BrowserClient2.prototype.showReportDialog = function (options) {
      if (options === void 0) {
        options = {}
      }
      var document2 = getGlobalObject().document
      if (!document2) {
        return
      }
      if (!this._isEnabled()) {
        logger.error('Trying to call showReportDialog with Sentry Client disabled')
        return
      }
      injectReportDialog(__assign(__assign({}, options), { dsn: options.dsn || this.getDsn() }))
    }
    BrowserClient2.prototype._prepareEvent = function (event, scope, hint) {
      event.platform = event.platform || 'javascript'
      return _super.prototype._prepareEvent.call(this, event, scope, hint)
    }
    BrowserClient2.prototype._sendEvent = function (event) {
      var integration = this.getIntegration(Breadcrumbs)
      if (integration) {
        integration.addSentryBreadcrumb(event)
      }
      _super.prototype._sendEvent.call(this, event)
    }
    return BrowserClient2
  })(BaseClient)

  // node_modules/@sentry/browser/esm/sdk.js
  var defaultIntegrations = [
    new integrations_exports.InboundFilters(),
    new integrations_exports.FunctionToString(),
    new TryCatch(),
    new Breadcrumbs(),
    new GlobalHandlers(),
    new LinkedErrors(),
    new Dedupe(),
    new UserAgent(),
  ]
  function init(options) {
    if (options === void 0) {
      options = {}
    }
    if (options.defaultIntegrations === void 0) {
      options.defaultIntegrations = defaultIntegrations
    }
    if (options.release === void 0) {
      var window_1 = getGlobalObject()
      if (window_1.SENTRY_RELEASE && window_1.SENTRY_RELEASE.id) {
        options.release = window_1.SENTRY_RELEASE.id
      }
    }
    if (options.autoSessionTracking === void 0) {
      options.autoSessionTracking = true
    }
    initAndBind(BrowserClient, options)
    if (options.autoSessionTracking) {
      startSessionTracking()
    }
  }
  function showReportDialog(options) {
    if (options === void 0) {
      options = {}
    }
    if (!options.eventId) {
      options.eventId = getCurrentHub().lastEventId()
    }
    var client = getCurrentHub().getClient()
    if (client) {
      client.showReportDialog(options)
    }
  }
  function startSessionTracking() {
    var window2 = getGlobalObject()
    var document2 = window2.document
    if (typeof document2 === 'undefined') {
      logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.')
      return
    }
    var hub = getCurrentHub()
    if (typeof hub.startSession !== 'function' || typeof hub.captureSession !== 'function') {
      return
    }
    hub.startSession({ ignoreDuration: true })
    hub.captureSession()
    addInstrumentationHandler({
      callback: function (_a) {
        var from = _a.from,
          to = _a.to
        if (from === void 0 || from === to) {
          return
        }
        hub.startSession({ ignoreDuration: true })
        hub.captureSession()
      },
      type: 'history',
    })
  }

  // node_modules/@sentry/react/esm/sdk.js
  function init2(options) {
    options._metadata = options._metadata || {}
    options._metadata.sdk = options._metadata.sdk || {
      name: 'sentry.javascript.react',
      packages: [
        {
          name: 'npm:@sentry/react',
          version: SDK_VERSION,
        },
      ],
      version: SDK_VERSION,
    }
    init(options)
  }

  // node_modules/@sentry/react/esm/errorboundary.js
  var import_hoist_non_react_statics = __toModule(require_hoist_non_react_statics_cjs())
  var React = __toModule(require_react())
  var reactVersion = parseSemver(React.version)
  var INITIAL_STATE = {
    componentStack: null,
    error: null,
    eventId: null,
  }
  function captureReactErrorBoundaryError(error, componentStack) {
    var errorBoundaryError = new Error(error.message)
    errorBoundaryError.name = 'React ErrorBoundary ' + errorBoundaryError.name
    errorBoundaryError.stack = componentStack
    var errorBoundaryEvent = {}
    void eventFromException({}, errorBoundaryError).then(function (e) {
      errorBoundaryEvent = e
    })
    if (
      errorBoundaryEvent.exception &&
      Array.isArray(errorBoundaryEvent.exception.values) &&
      reactVersion.major &&
      reactVersion.major >= 17
    ) {
      var originalEvent_1 = {}
      void eventFromException({}, error).then(function (e) {
        originalEvent_1 = e
      })
      if (originalEvent_1.exception && Array.isArray(originalEvent_1.exception.values)) {
        originalEvent_1.exception.values = __spread(
          errorBoundaryEvent.exception.values,
          originalEvent_1.exception.values
        )
      }
      return captureEvent(originalEvent_1)
    }
    return captureException(error, { contexts: { react: { componentStack } } })
  }
  var ErrorBoundary = (function (_super) {
    __extends(ErrorBoundary3, _super)
    function ErrorBoundary3() {
      var _this = (_super !== null && _super.apply(this, arguments)) || this
      _this.state = INITIAL_STATE
      _this.resetErrorBoundary = function () {
        var onReset = _this.props.onReset
        var _a = _this.state,
          error = _a.error,
          componentStack = _a.componentStack,
          eventId = _a.eventId
        if (onReset) {
          onReset(error, componentStack, eventId)
        }
        _this.setState(INITIAL_STATE)
      }
      return _this
    }
    ErrorBoundary3.prototype.componentDidCatch = function (error, _a) {
      var _this = this
      var componentStack = _a.componentStack
      var _b = this.props,
        beforeCapture = _b.beforeCapture,
        onError = _b.onError,
        showDialog = _b.showDialog,
        dialogOptions = _b.dialogOptions
      withScope(function (scope) {
        if (beforeCapture) {
          beforeCapture(scope, error, componentStack)
        }
        var eventId = captureReactErrorBoundaryError(error, componentStack)
        if (onError) {
          onError(error, componentStack, eventId)
        }
        if (showDialog) {
          showReportDialog(__assign(__assign({}, dialogOptions), { eventId }))
        }
        _this.setState({ error, componentStack, eventId })
      })
    }
    ErrorBoundary3.prototype.componentDidMount = function () {
      var onMount = this.props.onMount
      if (onMount) {
        onMount()
      }
    }
    ErrorBoundary3.prototype.componentWillUnmount = function () {
      var _a = this.state,
        error = _a.error,
        componentStack = _a.componentStack,
        eventId = _a.eventId
      var onUnmount = this.props.onUnmount
      if (onUnmount) {
        onUnmount(error, componentStack, eventId)
      }
    }
    ErrorBoundary3.prototype.render = function () {
      var fallback = this.props.fallback
      var _a = this.state,
        error = _a.error,
        componentStack = _a.componentStack,
        eventId = _a.eventId
      if (error) {
        if (React.isValidElement(fallback)) {
          return fallback
        }
        if (typeof fallback === 'function') {
          return fallback({ error, componentStack, resetError: this.resetErrorBoundary, eventId })
        }
        return null
      }
      return this.props.children
    }
    return ErrorBoundary3
  })(React.Component)

  // node_modules/@sentry/tracing/esm/spanstatus.js
  var SpanStatus
  ;(function (SpanStatus2) {
    SpanStatus2['Ok'] = 'ok'
    SpanStatus2['DeadlineExceeded'] = 'deadline_exceeded'
    SpanStatus2['Unauthenticated'] = 'unauthenticated'
    SpanStatus2['PermissionDenied'] = 'permission_denied'
    SpanStatus2['NotFound'] = 'not_found'
    SpanStatus2['ResourceExhausted'] = 'resource_exhausted'
    SpanStatus2['InvalidArgument'] = 'invalid_argument'
    SpanStatus2['Unimplemented'] = 'unimplemented'
    SpanStatus2['Unavailable'] = 'unavailable'
    SpanStatus2['InternalError'] = 'internal_error'
    SpanStatus2['UnknownError'] = 'unknown_error'
    SpanStatus2['Cancelled'] = 'cancelled'
    SpanStatus2['AlreadyExists'] = 'already_exists'
    SpanStatus2['FailedPrecondition'] = 'failed_precondition'
    SpanStatus2['Aborted'] = 'aborted'
    SpanStatus2['OutOfRange'] = 'out_of_range'
    SpanStatus2['DataLoss'] = 'data_loss'
  })(SpanStatus || (SpanStatus = {}))
  ;(function (SpanStatus2) {
    function fromHttpCode(httpStatus) {
      if (httpStatus < 400) {
        return SpanStatus2.Ok
      }
      if (httpStatus >= 400 && httpStatus < 500) {
        switch (httpStatus) {
          case 401:
            return SpanStatus2.Unauthenticated
          case 403:
            return SpanStatus2.PermissionDenied
          case 404:
            return SpanStatus2.NotFound
          case 409:
            return SpanStatus2.AlreadyExists
          case 413:
            return SpanStatus2.FailedPrecondition
          case 429:
            return SpanStatus2.ResourceExhausted
          default:
            return SpanStatus2.InvalidArgument
        }
      }
      if (httpStatus >= 500 && httpStatus < 600) {
        switch (httpStatus) {
          case 501:
            return SpanStatus2.Unimplemented
          case 503:
            return SpanStatus2.Unavailable
          case 504:
            return SpanStatus2.DeadlineExceeded
          default:
            return SpanStatus2.InternalError
        }
      }
      return SpanStatus2.UnknownError
    }
    SpanStatus2.fromHttpCode = fromHttpCode
  })(SpanStatus || (SpanStatus = {}))

  // node_modules/@sentry/tracing/esm/utils.js
  var TRACEPARENT_REGEXP = new RegExp('^[ \\t]*([0-9a-f]{32})?-?([0-9a-f]{16})?-?([01])?[ \\t]*$')
  function hasTracingEnabled(options) {
    if (options === void 0) {
      options = (_a = getCurrentHub().getClient()) === null || _a === void 0 ? void 0 : _a.getOptions()
    }
    var _a
    if (!options) {
      return false
    }
    return 'tracesSampleRate' in options || 'tracesSampler' in options
  }
  function extractTraceparentData(traceparent) {
    var matches = traceparent.match(TRACEPARENT_REGEXP)
    if (matches) {
      var parentSampled = void 0
      if (matches[3] === '1') {
        parentSampled = true
      } else if (matches[3] === '0') {
        parentSampled = false
      }
      return {
        traceId: matches[1],
        parentSampled,
        parentSpanId: matches[2],
      }
    }
    return void 0
  }
  function getActiveTransaction(hub) {
    if (hub === void 0) {
      hub = getCurrentHub()
    }
    var _a, _b
    return (_b = (_a = hub) === null || _a === void 0 ? void 0 : _a.getScope()) === null || _b === void 0
      ? void 0
      : _b.getTransaction()
  }
  function msToSec(time) {
    return time / 1e3
  }
  function secToMs(time) {
    return time * 1e3
  }

  // node_modules/@sentry/tracing/esm/errors.js
  function registerErrorInstrumentation() {
    addInstrumentationHandler({
      callback: errorCallback,
      type: 'error',
    })
    addInstrumentationHandler({
      callback: errorCallback,
      type: 'unhandledrejection',
    })
  }
  function errorCallback() {
    var activeTransaction = getActiveTransaction()
    if (activeTransaction) {
      logger.log('[Tracing] Transaction: ' + SpanStatus.InternalError + ' -> Global error occured')
      activeTransaction.setStatus(SpanStatus.InternalError)
    }
  }

  // node_modules/@sentry/tracing/esm/span.js
  var SpanRecorder = (function () {
    function SpanRecorder2(maxlen) {
      if (maxlen === void 0) {
        maxlen = 1e3
      }
      this.spans = []
      this._maxlen = maxlen
    }
    SpanRecorder2.prototype.add = function (span) {
      if (this.spans.length > this._maxlen) {
        span.spanRecorder = void 0
      } else {
        this.spans.push(span)
      }
    }
    return SpanRecorder2
  })()
  var Span = (function () {
    function Span2(spanContext) {
      this.traceId = uuid4()
      this.spanId = uuid4().substring(16)
      this.startTimestamp = timestampWithMs()
      this.tags = {}
      this.data = {}
      if (!spanContext) {
        return this
      }
      if (spanContext.traceId) {
        this.traceId = spanContext.traceId
      }
      if (spanContext.spanId) {
        this.spanId = spanContext.spanId
      }
      if (spanContext.parentSpanId) {
        this.parentSpanId = spanContext.parentSpanId
      }
      if ('sampled' in spanContext) {
        this.sampled = spanContext.sampled
      }
      if (spanContext.op) {
        this.op = spanContext.op
      }
      if (spanContext.description) {
        this.description = spanContext.description
      }
      if (spanContext.data) {
        this.data = spanContext.data
      }
      if (spanContext.tags) {
        this.tags = spanContext.tags
      }
      if (spanContext.status) {
        this.status = spanContext.status
      }
      if (spanContext.startTimestamp) {
        this.startTimestamp = spanContext.startTimestamp
      }
      if (spanContext.endTimestamp) {
        this.endTimestamp = spanContext.endTimestamp
      }
    }
    Span2.prototype.child = function (spanContext) {
      return this.startChild(spanContext)
    }
    Span2.prototype.startChild = function (spanContext) {
      var childSpan = new Span2(
        __assign(__assign({}, spanContext), { parentSpanId: this.spanId, sampled: this.sampled, traceId: this.traceId })
      )
      childSpan.spanRecorder = this.spanRecorder
      if (childSpan.spanRecorder) {
        childSpan.spanRecorder.add(childSpan)
      }
      childSpan.transaction = this.transaction
      return childSpan
    }
    Span2.prototype.setTag = function (key, value) {
      var _a
      this.tags = __assign(__assign({}, this.tags), ((_a = {}), (_a[key] = value), _a))
      return this
    }
    Span2.prototype.setData = function (key, value) {
      var _a
      this.data = __assign(__assign({}, this.data), ((_a = {}), (_a[key] = value), _a))
      return this
    }
    Span2.prototype.setStatus = function (value) {
      this.status = value
      return this
    }
    Span2.prototype.setHttpStatus = function (httpStatus) {
      this.setTag('http.status_code', String(httpStatus))
      var spanStatus = SpanStatus.fromHttpCode(httpStatus)
      if (spanStatus !== SpanStatus.UnknownError) {
        this.setStatus(spanStatus)
      }
      return this
    }
    Span2.prototype.isSuccess = function () {
      return this.status === SpanStatus.Ok
    }
    Span2.prototype.finish = function (endTimestamp) {
      this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs()
    }
    Span2.prototype.toTraceparent = function () {
      var sampledString = ''
      if (this.sampled !== void 0) {
        sampledString = this.sampled ? '-1' : '-0'
      }
      return this.traceId + '-' + this.spanId + sampledString
    }
    Span2.prototype.toContext = function () {
      return dropUndefinedKeys({
        data: this.data,
        description: this.description,
        endTimestamp: this.endTimestamp,
        op: this.op,
        parentSpanId: this.parentSpanId,
        sampled: this.sampled,
        spanId: this.spanId,
        startTimestamp: this.startTimestamp,
        status: this.status,
        tags: this.tags,
        traceId: this.traceId,
      })
    }
    Span2.prototype.updateWithContext = function (spanContext) {
      var _a, _b, _c, _d, _e
      this.data = ((_a = spanContext.data), _a !== null && _a !== void 0 ? _a : {})
      this.description = spanContext.description
      this.endTimestamp = spanContext.endTimestamp
      this.op = spanContext.op
      this.parentSpanId = spanContext.parentSpanId
      this.sampled = spanContext.sampled
      this.spanId = ((_b = spanContext.spanId), _b !== null && _b !== void 0 ? _b : this.spanId)
      this.startTimestamp = ((_c = spanContext.startTimestamp), _c !== null && _c !== void 0 ? _c : this.startTimestamp)
      this.status = spanContext.status
      this.tags = ((_d = spanContext.tags), _d !== null && _d !== void 0 ? _d : {})
      this.traceId = ((_e = spanContext.traceId), _e !== null && _e !== void 0 ? _e : this.traceId)
      return this
    }
    Span2.prototype.getTraceContext = function () {
      return dropUndefinedKeys({
        data: Object.keys(this.data).length > 0 ? this.data : void 0,
        description: this.description,
        op: this.op,
        parent_span_id: this.parentSpanId,
        span_id: this.spanId,
        status: this.status,
        tags: Object.keys(this.tags).length > 0 ? this.tags : void 0,
        trace_id: this.traceId,
      })
    }
    Span2.prototype.toJSON = function () {
      return dropUndefinedKeys({
        data: Object.keys(this.data).length > 0 ? this.data : void 0,
        description: this.description,
        op: this.op,
        parent_span_id: this.parentSpanId,
        span_id: this.spanId,
        start_timestamp: this.startTimestamp,
        status: this.status,
        tags: Object.keys(this.tags).length > 0 ? this.tags : void 0,
        timestamp: this.endTimestamp,
        trace_id: this.traceId,
      })
    }
    return Span2
  })()

  // node_modules/@sentry/tracing/esm/transaction.js
  var Transaction = (function (_super) {
    __extends(Transaction2, _super)
    function Transaction2(transactionContext, hub) {
      var _this = _super.call(this, transactionContext) || this
      _this._measurements = {}
      _this._hub = getCurrentHub()
      if (isInstanceOf(hub, Hub)) {
        _this._hub = hub
      }
      _this.name = transactionContext.name || ''
      _this.metadata = transactionContext.metadata || {}
      _this._trimEnd = transactionContext.trimEnd
      _this.transaction = _this
      return _this
    }
    Transaction2.prototype.setName = function (name) {
      this.name = name
    }
    Transaction2.prototype.initSpanRecorder = function (maxlen) {
      if (maxlen === void 0) {
        maxlen = 1e3
      }
      if (!this.spanRecorder) {
        this.spanRecorder = new SpanRecorder(maxlen)
      }
      this.spanRecorder.add(this)
    }
    Transaction2.prototype.setMeasurements = function (measurements) {
      this._measurements = __assign({}, measurements)
    }
    Transaction2.prototype.setMetadata = function (newMetadata) {
      this.metadata = __assign(__assign({}, this.metadata), newMetadata)
    }
    Transaction2.prototype.finish = function (endTimestamp) {
      var _this = this
      if (this.endTimestamp !== void 0) {
        return void 0
      }
      if (!this.name) {
        logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.')
        this.name = '<unlabeled transaction>'
      }
      _super.prototype.finish.call(this, endTimestamp)
      if (this.sampled !== true) {
        logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.')
        return void 0
      }
      var finishedSpans = this.spanRecorder
        ? this.spanRecorder.spans.filter(function (s) {
            return s !== _this && s.endTimestamp
          })
        : []
      if (this._trimEnd && finishedSpans.length > 0) {
        this.endTimestamp = finishedSpans.reduce(function (prev, current) {
          if (prev.endTimestamp && current.endTimestamp) {
            return prev.endTimestamp > current.endTimestamp ? prev : current
          }
          return prev
        }).endTimestamp
      }
      var transaction = {
        contexts: {
          trace: this.getTraceContext(),
        },
        spans: finishedSpans,
        start_timestamp: this.startTimestamp,
        tags: this.tags,
        timestamp: this.endTimestamp,
        transaction: this.name,
        type: 'transaction',
        debug_meta: this.metadata,
      }
      var hasMeasurements = Object.keys(this._measurements).length > 0
      if (hasMeasurements) {
        logger.log('[Measurements] Adding measurements to transaction', JSON.stringify(this._measurements, void 0, 2))
        transaction.measurements = this._measurements
      }
      logger.log('[Tracing] Finishing ' + this.op + ' transaction: ' + this.name + '.')
      return this._hub.captureEvent(transaction)
    }
    Transaction2.prototype.toContext = function () {
      var spanContext = _super.prototype.toContext.call(this)
      return dropUndefinedKeys(__assign(__assign({}, spanContext), { name: this.name, trimEnd: this._trimEnd }))
    }
    Transaction2.prototype.updateWithContext = function (transactionContext) {
      var _a
      _super.prototype.updateWithContext.call(this, transactionContext)
      this.name = ((_a = transactionContext.name), _a !== null && _a !== void 0 ? _a : '')
      this._trimEnd = transactionContext.trimEnd
      return this
    }
    return Transaction2
  })(Span)

  // node_modules/@sentry/tracing/esm/idletransaction.js
  var DEFAULT_IDLE_TIMEOUT = 1e3
  var IdleTransactionSpanRecorder = (function (_super) {
    __extends(IdleTransactionSpanRecorder2, _super)
    function IdleTransactionSpanRecorder2(_pushActivity, _popActivity, transactionSpanId, maxlen) {
      if (transactionSpanId === void 0) {
        transactionSpanId = ''
      }
      var _this = _super.call(this, maxlen) || this
      _this._pushActivity = _pushActivity
      _this._popActivity = _popActivity
      _this.transactionSpanId = transactionSpanId
      return _this
    }
    IdleTransactionSpanRecorder2.prototype.add = function (span) {
      var _this = this
      if (span.spanId !== this.transactionSpanId) {
        span.finish = function (endTimestamp) {
          span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs()
          _this._popActivity(span.spanId)
        }
        if (span.endTimestamp === void 0) {
          this._pushActivity(span.spanId)
        }
      }
      _super.prototype.add.call(this, span)
    }
    return IdleTransactionSpanRecorder2
  })(SpanRecorder)
  var IdleTransaction = (function (_super) {
    __extends(IdleTransaction2, _super)
    function IdleTransaction2(transactionContext, _idleHub, _idleTimeout, _onScope) {
      if (_idleTimeout === void 0) {
        _idleTimeout = DEFAULT_IDLE_TIMEOUT
      }
      if (_onScope === void 0) {
        _onScope = false
      }
      var _this = _super.call(this, transactionContext, _idleHub) || this
      _this._idleHub = _idleHub
      _this._idleTimeout = _idleTimeout
      _this._onScope = _onScope
      _this.activities = {}
      _this._heartbeatTimer = 0
      _this._heartbeatCounter = 0
      _this._finished = false
      _this._beforeFinishCallbacks = []
      if (_idleHub && _onScope) {
        clearActiveTransaction(_idleHub)
        logger.log('Setting idle transaction on scope. Span ID: ' + _this.spanId)
        _idleHub.configureScope(function (scope) {
          return scope.setSpan(_this)
        })
      }
      _this._initTimeout = setTimeout(function () {
        if (!_this._finished) {
          _this.finish()
        }
      }, _this._idleTimeout)
      return _this
    }
    IdleTransaction2.prototype.finish = function (endTimestamp) {
      var e_1, _a
      var _this = this
      if (endTimestamp === void 0) {
        endTimestamp = timestampWithMs()
      }
      this._finished = true
      this.activities = {}
      if (this.spanRecorder) {
        logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1e3).toISOString(), this.op)
        try {
          for (var _b = __values(this._beforeFinishCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {
            var callback = _c.value
            callback(this, endTimestamp)
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 }
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b)
          } finally {
            if (e_1) throw e_1.error
          }
        }
        this.spanRecorder.spans = this.spanRecorder.spans.filter(function (span) {
          if (span.spanId === _this.spanId) {
            return true
          }
          if (!span.endTimestamp) {
            span.endTimestamp = endTimestamp
            span.setStatus(SpanStatus.Cancelled)
            logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, void 0, 2))
          }
          var keepSpan = span.startTimestamp < endTimestamp
          if (!keepSpan) {
            logger.log(
              '[Tracing] discarding Span since it happened after Transaction was finished',
              JSON.stringify(span, void 0, 2)
            )
          }
          return keepSpan
        })
        logger.log('[Tracing] flushing IdleTransaction')
      } else {
        logger.log('[Tracing] No active IdleTransaction')
      }
      if (this._onScope) {
        clearActiveTransaction(this._idleHub)
      }
      return _super.prototype.finish.call(this, endTimestamp)
    }
    IdleTransaction2.prototype.registerBeforeFinishCallback = function (callback) {
      this._beforeFinishCallbacks.push(callback)
    }
    IdleTransaction2.prototype.initSpanRecorder = function (maxlen) {
      var _this = this
      if (!this.spanRecorder) {
        var pushActivity = function (id) {
          if (_this._finished) {
            return
          }
          _this._pushActivity(id)
        }
        var popActivity = function (id) {
          if (_this._finished) {
            return
          }
          _this._popActivity(id)
        }
        this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen)
        logger.log('Starting heartbeat')
        this._pingHeartbeat()
      }
      this.spanRecorder.add(this)
    }
    IdleTransaction2.prototype._pushActivity = function (spanId) {
      if (this._initTimeout) {
        clearTimeout(this._initTimeout)
        this._initTimeout = void 0
      }
      logger.log('[Tracing] pushActivity: ' + spanId)
      this.activities[spanId] = true
      logger.log('[Tracing] new activities count', Object.keys(this.activities).length)
    }
    IdleTransaction2.prototype._popActivity = function (spanId) {
      var _this = this
      if (this.activities[spanId]) {
        logger.log('[Tracing] popActivity ' + spanId)
        delete this.activities[spanId]
        logger.log('[Tracing] new activities count', Object.keys(this.activities).length)
      }
      if (Object.keys(this.activities).length === 0) {
        var timeout = this._idleTimeout
        var end_1 = timestampWithMs() + timeout / 1e3
        setTimeout(function () {
          if (!_this._finished) {
            _this.finish(end_1)
          }
        }, timeout)
      }
    }
    IdleTransaction2.prototype._beat = function () {
      clearTimeout(this._heartbeatTimer)
      if (this._finished) {
        return
      }
      var keys = Object.keys(this.activities)
      var heartbeatString = keys.length
        ? keys.reduce(function (prev, current) {
            return prev + current
          })
        : ''
      if (heartbeatString === this._prevHeartbeatString) {
        this._heartbeatCounter += 1
      } else {
        this._heartbeatCounter = 1
      }
      this._prevHeartbeatString = heartbeatString
      if (this._heartbeatCounter >= 3) {
        logger.log('[Tracing] Transaction finished because of no change for 3 heart beats')
        this.setStatus(SpanStatus.DeadlineExceeded)
        this.setTag('heartbeat', 'failed')
        this.finish()
      } else {
        this._pingHeartbeat()
      }
    }
    IdleTransaction2.prototype._pingHeartbeat = function () {
      var _this = this
      logger.log('pinging Heartbeat -> current counter: ' + this._heartbeatCounter)
      this._heartbeatTimer = setTimeout(function () {
        _this._beat()
      }, 5e3)
    }
    return IdleTransaction2
  })(Transaction)
  function clearActiveTransaction(hub) {
    if (hub) {
      var scope = hub.getScope()
      if (scope) {
        var transaction = scope.getTransaction()
        if (transaction) {
          scope.setSpan(void 0)
        }
      }
    }
  }

  // node_modules/@sentry/tracing/esm/hubextensions.js
  function traceHeaders() {
    var scope = this.getScope()
    if (scope) {
      var span = scope.getSpan()
      if (span) {
        return {
          'sentry-trace': span.toTraceparent(),
        }
      }
    }
    return {}
  }
  function sample(transaction, options, samplingContext) {
    if (!hasTracingEnabled()) {
      transaction.sampled = false
      return transaction
    }
    if (transaction.sampled !== void 0) {
      transaction.setMetadata({
        transactionSampling: { method: TransactionSamplingMethod.Explicit },
      })
      return transaction
    }
    var sampleRate
    if (typeof options.tracesSampler === 'function') {
      sampleRate = options.tracesSampler(samplingContext)
      transaction.setMetadata({
        transactionSampling: {
          method: TransactionSamplingMethod.Sampler,
          rate: Number(sampleRate),
        },
      })
    } else if (samplingContext.parentSampled !== void 0) {
      sampleRate = samplingContext.parentSampled
      transaction.setMetadata({
        transactionSampling: { method: TransactionSamplingMethod.Inheritance },
      })
    } else {
      sampleRate = options.tracesSampleRate
      transaction.setMetadata({
        transactionSampling: {
          method: TransactionSamplingMethod.Rate,
          rate: Number(sampleRate),
        },
      })
    }
    if (!isValidSampleRate(sampleRate)) {
      logger.warn('[Tracing] Discarding transaction because of invalid sample rate.')
      transaction.sampled = false
      return transaction
    }
    if (!sampleRate) {
      logger.log(
        '[Tracing] Discarding transaction because ' +
          (typeof options.tracesSampler === 'function'
            ? 'tracesSampler returned 0 or false'
            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0')
      )
      transaction.sampled = false
      return transaction
    }
    transaction.sampled = Math.random() < sampleRate
    if (!transaction.sampled) {
      logger.log(
        "[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = " +
          Number(sampleRate) +
          ')'
      )
      return transaction
    }
    logger.log('[Tracing] starting ' + transaction.op + ' transaction - ' + transaction.name)
    return transaction
  }
  function isValidSampleRate(rate) {
    if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {
      logger.warn(
        '[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ' +
          JSON.stringify(rate) +
          ' of type ' +
          JSON.stringify(typeof rate) +
          '.'
      )
      return false
    }
    if (rate < 0 || rate > 1) {
      logger.warn('[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ' + rate + '.')
      return false
    }
    return true
  }
  function _startTransaction(transactionContext, customSamplingContext) {
    var _a, _b
    var options = ((_a = this.getClient()) === null || _a === void 0 ? void 0 : _a.getOptions()) || {}
    var transaction = new Transaction(transactionContext, this)
    transaction = sample(
      transaction,
      options,
      __assign({ parentSampled: transactionContext.parentSampled, transactionContext }, customSamplingContext)
    )
    if (transaction.sampled) {
      transaction.initSpanRecorder((_b = options._experiments) === null || _b === void 0 ? void 0 : _b.maxSpans)
    }
    return transaction
  }
  function startIdleTransaction(hub, transactionContext, idleTimeout, onScope, customSamplingContext) {
    var _a, _b
    var options = ((_a = hub.getClient()) === null || _a === void 0 ? void 0 : _a.getOptions()) || {}
    var transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope)
    transaction = sample(
      transaction,
      options,
      __assign({ parentSampled: transactionContext.parentSampled, transactionContext }, customSamplingContext)
    )
    if (transaction.sampled) {
      transaction.initSpanRecorder((_b = options._experiments) === null || _b === void 0 ? void 0 : _b.maxSpans)
    }
    return transaction
  }
  function _addTracingExtensions() {
    var carrier = getMainCarrier()
    if (!carrier.__SENTRY__) {
      return
    }
    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {}
    if (!carrier.__SENTRY__.extensions.startTransaction) {
      carrier.__SENTRY__.extensions.startTransaction = _startTransaction
    }
    if (!carrier.__SENTRY__.extensions.traceHeaders) {
      carrier.__SENTRY__.extensions.traceHeaders = traceHeaders
    }
  }
  function _autoloadDatabaseIntegrations() {
    var carrier = getMainCarrier()
    if (!carrier.__SENTRY__) {
      return
    }
    var packageToIntegrationMapping = {
      mongodb: function () {
        var integration = dynamicRequire(module, './integrations/mongo')
        return new integration.Mongo()
      },
      mongoose: function () {
        var integration = dynamicRequire(module, './integrations/mongo')
        return new integration.Mongo({ mongoose: true })
      },
      mysql: function () {
        var integration = dynamicRequire(module, './integrations/mysql')
        return new integration.Mysql()
      },
      pg: function () {
        var integration = dynamicRequire(module, './integrations/postgres')
        return new integration.Postgres()
      },
    }
    var mappedPackages = Object.keys(packageToIntegrationMapping)
      .filter(function (moduleName) {
        return !!loadModule(moduleName)
      })
      .map(function (pkg) {
        try {
          return packageToIntegrationMapping[pkg]()
        } catch (e) {
          return void 0
        }
      })
      .filter(function (p) {
        return p
      })
    if (mappedPackages.length > 0) {
      carrier.__SENTRY__.integrations = __spread(carrier.__SENTRY__.integrations || [], mappedPackages)
    }
  }
  function addExtensionMethods() {
    _addTracingExtensions()
    if (isNodeEnv()) {
      _autoloadDatabaseIntegrations()
    }
    registerErrorInstrumentation()
  }

  // node_modules/@sentry/tracing/esm/browser/backgroundtab.js
  var global5 = getGlobalObject()
  function registerBackgroundTabDetection() {
    if (global5 && global5.document) {
      global5.document.addEventListener('visibilitychange', function () {
        var activeTransaction = getActiveTransaction()
        if (global5.document.hidden && activeTransaction) {
          logger.log(
            '[Tracing] Transaction: ' +
              SpanStatus.Cancelled +
              ' -> since tab moved to the background, op: ' +
              activeTransaction.op
          )
          if (!activeTransaction.status) {
            activeTransaction.setStatus(SpanStatus.Cancelled)
          }
          activeTransaction.setTag('visibilitychange', 'document.hidden')
          activeTransaction.finish()
        }
      })
    } else {
      logger.warn('[Tracing] Could not set up background tab detection due to lack of global document')
    }
  }

  // node_modules/@sentry/tracing/esm/browser/web-vitals/lib/bindReporter.js
  var bindReporter = function (callback, metric, po, observeAllUpdates) {
    var prevValue
    return function () {
      if (po && metric.isFinal) {
        po.disconnect()
      }
      if (metric.value >= 0) {
        if (observeAllUpdates || metric.isFinal || document.visibilityState === 'hidden') {
          metric.delta = metric.value - (prevValue || 0)
          if (metric.delta || metric.isFinal || prevValue === void 0) {
            callback(metric)
            prevValue = metric.value
          }
        }
      }
    }
  }

  // node_modules/@sentry/tracing/esm/browser/web-vitals/lib/generateUniqueID.js
  var generateUniqueID = function () {
    return Date.now() + '-' + (Math.floor(Math.random() * (9e12 - 1)) + 1e12)
  }

  // node_modules/@sentry/tracing/esm/browser/web-vitals/lib/initMetric.js
  var initMetric = function (name, value) {
    if (value === void 0) {
      value = -1
    }
    return {
      name,
      value,
      delta: 0,
      entries: [],
      id: generateUniqueID(),
      isFinal: false,
    }
  }

  // node_modules/@sentry/tracing/esm/browser/web-vitals/lib/observe.js
  var observe = function (type, callback) {
    try {
      if (PerformanceObserver.supportedEntryTypes.includes(type)) {
        var po = new PerformanceObserver(function (l) {
          return l.getEntries().map(callback)
        })
        po.observe({ type, buffered: true })
        return po
      }
    } catch (e) {}
    return
  }

  // node_modules/@sentry/tracing/esm/browser/web-vitals/lib/onHidden.js
  var isUnloading = false
  var listenersAdded = false
  var onPageHide = function (event) {
    isUnloading = !event.persisted
  }
  var addListeners = function () {
    addEventListener('pagehide', onPageHide)
    addEventListener('beforeunload', function () {})
  }
  var onHidden = function (cb, once) {
    if (once === void 0) {
      once = false
    }
    if (!listenersAdded) {
      addListeners()
      listenersAdded = true
    }
    addEventListener(
      'visibilitychange',
      function (_a) {
        var timeStamp = _a.timeStamp
        if (document.visibilityState === 'hidden') {
          cb({ timeStamp, isUnloading })
        }
      },
      { capture: true, once }
    )
  }

  // node_modules/@sentry/tracing/esm/browser/web-vitals/getCLS.js
  var getCLS = function (onReport, reportAllChanges) {
    if (reportAllChanges === void 0) {
      reportAllChanges = false
    }
    var metric = initMetric('CLS', 0)
    var report
    var entryHandler = function (entry) {
      if (!entry.hadRecentInput) {
        metric.value += entry.value
        metric.entries.push(entry)
        report()
      }
    }
    var po = observe('layout-shift', entryHandler)
    if (po) {
      report = bindReporter(onReport, metric, po, reportAllChanges)
      onHidden(function (_a) {
        var isUnloading2 = _a.isUnloading
        po.takeRecords().map(entryHandler)
        if (isUnloading2) {
          metric.isFinal = true
        }
        report()
      })
    }
  }

  // node_modules/@sentry/tracing/esm/browser/web-vitals/lib/getFirstHidden.js
  var firstHiddenTime
  var getFirstHidden = function () {
    if (firstHiddenTime === void 0) {
      firstHiddenTime = document.visibilityState === 'hidden' ? 0 : Infinity
      onHidden(function (_a) {
        var timeStamp = _a.timeStamp
        return (firstHiddenTime = timeStamp)
      }, true)
    }
    return {
      get timeStamp() {
        return firstHiddenTime
      },
    }
  }

  // node_modules/@sentry/tracing/esm/browser/web-vitals/getFID.js
  var getFID = function (onReport) {
    var metric = initMetric('FID')
    var firstHidden = getFirstHidden()
    var entryHandler = function (entry) {
      if (entry.startTime < firstHidden.timeStamp) {
        metric.value = entry.processingStart - entry.startTime
        metric.entries.push(entry)
        metric.isFinal = true
        report()
      }
    }
    var po = observe('first-input', entryHandler)
    var report = bindReporter(onReport, metric, po)
    if (po) {
      onHidden(function () {
        po.takeRecords().map(entryHandler)
        po.disconnect()
      }, true)
    } else {
      if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {
        window.perfMetrics.onFirstInputDelay(function (value, event) {
          if (event.timeStamp < firstHidden.timeStamp) {
            metric.value = value
            metric.isFinal = true
            metric.entries = [
              {
                entryType: 'first-input',
                name: event.type,
                target: event.target,
                cancelable: event.cancelable,
                startTime: event.timeStamp,
                processingStart: event.timeStamp + value,
              },
            ]
            report()
          }
        })
      }
    }
  }

  // node_modules/@sentry/tracing/esm/browser/web-vitals/lib/whenInput.js
  var inputPromise
  var whenInput = function () {
    if (!inputPromise) {
      inputPromise = new Promise(function (r) {
        return ['scroll', 'keydown', 'pointerdown'].map(function (type) {
          addEventListener(type, r, {
            once: true,
            passive: true,
            capture: true,
          })
        })
      })
    }
    return inputPromise
  }

  // node_modules/@sentry/tracing/esm/browser/web-vitals/getLCP.js
  var getLCP = function (onReport, reportAllChanges) {
    if (reportAllChanges === void 0) {
      reportAllChanges = false
    }
    var metric = initMetric('LCP')
    var firstHidden = getFirstHidden()
    var report
    var entryHandler = function (entry) {
      var value = entry.startTime
      if (value < firstHidden.timeStamp) {
        metric.value = value
        metric.entries.push(entry)
      } else {
        metric.isFinal = true
      }
      report()
    }
    var po = observe('largest-contentful-paint', entryHandler)
    if (po) {
      report = bindReporter(onReport, metric, po, reportAllChanges)
      var onFinal = function () {
        if (!metric.isFinal) {
          po.takeRecords().map(entryHandler)
          metric.isFinal = true
          report()
        }
      }
      void whenInput().then(onFinal)
      onHidden(onFinal, true)
    }
  }

  // node_modules/@sentry/tracing/esm/browser/metrics.js
  var global6 = getGlobalObject()
  var MetricsInstrumentation = (function () {
    function MetricsInstrumentation2() {
      var _a
      this._measurements = {}
      this._performanceCursor = 0
      if (!isNodeEnv() && ((_a = global6) === null || _a === void 0 ? void 0 : _a.performance)) {
        if (global6.performance.mark) {
          global6.performance.mark('sentry-tracing-init')
        }
        this._trackCLS()
        this._trackLCP()
        this._trackFID()
      }
    }
    MetricsInstrumentation2.prototype.addPerformanceEntries = function (transaction) {
      var _this = this
      if (!global6 || !global6.performance || !global6.performance.getEntries || !browserPerformanceTimeOrigin) {
        return
      }
      logger.log('[Tracing] Adding & adjusting spans using Performance API')
      var timeOrigin = msToSec(browserPerformanceTimeOrigin)
      var entryScriptSrc
      if (global6.document) {
        for (var i = 0; i < document.scripts.length; i++) {
          if (document.scripts[i].dataset.entry === 'true') {
            entryScriptSrc = document.scripts[i].src
            break
          }
        }
      }
      var entryScriptStartTimestamp
      var tracingInitMarkStartTime
      var responseStartTimestamp
      var requestStartTimestamp
      global6.performance
        .getEntries()
        .slice(this._performanceCursor)
        .forEach(function (entry) {
          var startTime = msToSec(entry.startTime)
          var duration = msToSec(entry.duration)
          if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {
            return
          }
          switch (entry.entryType) {
            case 'navigation': {
              addNavigationSpans(transaction, entry, timeOrigin)
              responseStartTimestamp = timeOrigin + msToSec(entry.responseStart)
              requestStartTimestamp = timeOrigin + msToSec(entry.requestStart)
              break
            }
            case 'mark':
            case 'paint':
            case 'measure': {
              var startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin)
              if (tracingInitMarkStartTime === void 0 && entry.name === 'sentry-tracing-init') {
                tracingInitMarkStartTime = startTimestamp
              }
              var firstHidden = getFirstHidden()
              var shouldRecord = entry.startTime < firstHidden.timeStamp
              if (entry.name === 'first-paint' && shouldRecord) {
                logger.log('[Measurements] Adding FP')
                _this._measurements['fp'] = { value: entry.startTime }
                _this._measurements['mark.fp'] = { value: startTimestamp }
              }
              if (entry.name === 'first-contentful-paint' && shouldRecord) {
                logger.log('[Measurements] Adding FCP')
                _this._measurements['fcp'] = { value: entry.startTime }
                _this._measurements['mark.fcp'] = { value: startTimestamp }
              }
              break
            }
            case 'resource': {
              var resourceName = entry.name.replace(window.location.origin, '')
              var endTimestamp = addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin)
              if (entryScriptStartTimestamp === void 0 && (entryScriptSrc || '').indexOf(resourceName) > -1) {
                entryScriptStartTimestamp = endTimestamp
              }
              break
            }
            default:
          }
        })
      if (entryScriptStartTimestamp !== void 0 && tracingInitMarkStartTime !== void 0) {
        _startChild(transaction, {
          description: 'evaluation',
          endTimestamp: tracingInitMarkStartTime,
          op: 'script',
          startTimestamp: entryScriptStartTimestamp,
        })
      }
      this._performanceCursor = Math.max(performance.getEntries().length - 1, 0)
      this._trackNavigator(transaction)
      if (transaction.op === 'pageload') {
        var timeOrigin_1 = msToSec(browserPerformanceTimeOrigin)
        if (typeof responseStartTimestamp === 'number') {
          logger.log('[Measurements] Adding TTFB')
          this._measurements['ttfb'] = { value: (responseStartTimestamp - transaction.startTimestamp) * 1e3 }
          if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {
            this._measurements['ttfb.requestTime'] = { value: (responseStartTimestamp - requestStartTimestamp) * 1e3 }
          }
        }
        ;['fcp', 'fp', 'lcp'].forEach(function (name) {
          if (!_this._measurements[name] || timeOrigin_1 >= transaction.startTimestamp) {
            return
          }
          var oldValue = _this._measurements[name].value
          var measurementTimestamp = timeOrigin_1 + msToSec(oldValue)
          var normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1e3)
          var delta = normalizedValue - oldValue
          logger.log(
            '[Measurements] Normalized ' + name + ' from ' + oldValue + ' to ' + normalizedValue + ' (' + delta + ')'
          )
          _this._measurements[name].value = normalizedValue
        })
        if (this._measurements['mark.fid'] && this._measurements['fid']) {
          _startChild(transaction, {
            description: 'first input delay',
            endTimestamp: this._measurements['mark.fid'].value + msToSec(this._measurements['fid'].value),
            op: 'web.vitals',
            startTimestamp: this._measurements['mark.fid'].value,
          })
        }
        transaction.setMeasurements(this._measurements)
        this._tagMetricInfo(transaction)
      }
    }
    MetricsInstrumentation2.prototype._tagMetricInfo = function (transaction) {
      if (this._lcpEntry) {
        logger.log('[Measurements] Adding LCP Data')
        if (this._lcpEntry.element) {
          transaction.setTag('lcp.element', htmlTreeAsString(this._lcpEntry.element))
        }
        if (this._lcpEntry.id) {
          transaction.setTag('lcp.id', this._lcpEntry.id)
        }
        if (this._lcpEntry.url) {
          transaction.setTag('lcp.url', this._lcpEntry.url.trim().slice(0, 200))
        }
        transaction.setTag('lcp.size', this._lcpEntry.size)
      }
      if (this._clsEntry) {
        logger.log('[Measurements] Adding CLS Data')
        this._clsEntry.sources.map(function (source, index) {
          return transaction.setTag('cls.source.' + (index + 1), htmlTreeAsString(source.node))
        })
      }
    }
    MetricsInstrumentation2.prototype._trackCLS = function () {
      var _this = this
      getCLS(function (metric) {
        var entry = metric.entries.pop()
        if (!entry) {
          return
        }
        logger.log('[Measurements] Adding CLS')
        _this._measurements['cls'] = { value: metric.value }
        _this._clsEntry = entry
      })
    }
    MetricsInstrumentation2.prototype._trackNavigator = function (transaction) {
      var navigator2 = global6.navigator
      if (!navigator2) {
        return
      }
      var connection = navigator2.connection
      if (connection) {
        if (connection.effectiveType) {
          transaction.setTag('effectiveConnectionType', connection.effectiveType)
        }
        if (connection.type) {
          transaction.setTag('connectionType', connection.type)
        }
        if (isMeasurementValue(connection.rtt)) {
          this._measurements['connection.rtt'] = { value: connection.rtt }
        }
        if (isMeasurementValue(connection.downlink)) {
          this._measurements['connection.downlink'] = { value: connection.downlink }
        }
      }
      if (isMeasurementValue(navigator2.deviceMemory)) {
        transaction.setTag('deviceMemory', String(navigator2.deviceMemory))
      }
      if (isMeasurementValue(navigator2.hardwareConcurrency)) {
        transaction.setTag('hardwareConcurrency', String(navigator2.hardwareConcurrency))
      }
    }
    MetricsInstrumentation2.prototype._trackLCP = function () {
      var _this = this
      getLCP(function (metric) {
        var entry = metric.entries.pop()
        if (!entry) {
          return
        }
        var timeOrigin = msToSec(browserPerformanceTimeOrigin)
        var startTime = msToSec(entry.startTime)
        logger.log('[Measurements] Adding LCP')
        _this._measurements['lcp'] = { value: metric.value }
        _this._measurements['mark.lcp'] = { value: timeOrigin + startTime }
        _this._lcpEntry = entry
      })
    }
    MetricsInstrumentation2.prototype._trackFID = function () {
      var _this = this
      getFID(function (metric) {
        var entry = metric.entries.pop()
        if (!entry) {
          return
        }
        var timeOrigin = msToSec(browserPerformanceTimeOrigin)
        var startTime = msToSec(entry.startTime)
        logger.log('[Measurements] Adding FID')
        _this._measurements['fid'] = { value: metric.value }
        _this._measurements['mark.fid'] = { value: timeOrigin + startTime }
      })
    }
    return MetricsInstrumentation2
  })()
  function addNavigationSpans(transaction, entry, timeOrigin) {
    addPerformanceNavigationTiming({ transaction, entry, event: 'unloadEvent', timeOrigin })
    addPerformanceNavigationTiming({ transaction, entry, event: 'redirect', timeOrigin })
    addPerformanceNavigationTiming({ transaction, entry, event: 'domContentLoadedEvent', timeOrigin })
    addPerformanceNavigationTiming({ transaction, entry, event: 'loadEvent', timeOrigin })
    addPerformanceNavigationTiming({ transaction, entry, event: 'connect', timeOrigin })
    addPerformanceNavigationTiming({
      transaction,
      entry,
      event: 'secureConnection',
      timeOrigin,
      eventEnd: 'connectEnd',
      description: 'TLS/SSL',
    })
    addPerformanceNavigationTiming({
      transaction,
      entry,
      event: 'fetch',
      timeOrigin,
      eventEnd: 'domainLookupStart',
      description: 'cache',
    })
    addPerformanceNavigationTiming({ transaction, entry, event: 'domainLookup', timeOrigin, description: 'DNS' })
    addRequest(transaction, entry, timeOrigin)
  }
  function addMeasureSpans(transaction, entry, startTime, duration, timeOrigin) {
    var measureStartTimestamp = timeOrigin + startTime
    var measureEndTimestamp = measureStartTimestamp + duration
    _startChild(transaction, {
      description: entry.name,
      endTimestamp: measureEndTimestamp,
      op: entry.entryType,
      startTimestamp: measureStartTimestamp,
    })
    return measureStartTimestamp
  }
  function addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin) {
    if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {
      return void 0
    }
    var data = {}
    if ('transferSize' in entry) {
      data['Transfer Size'] = entry.transferSize
    }
    if ('encodedBodySize' in entry) {
      data['Encoded Body Size'] = entry.encodedBodySize
    }
    if ('decodedBodySize' in entry) {
      data['Decoded Body Size'] = entry.decodedBodySize
    }
    var startTimestamp = timeOrigin + startTime
    var endTimestamp = startTimestamp + duration
    _startChild(transaction, {
      description: resourceName,
      endTimestamp,
      op: entry.initiatorType ? 'resource.' + entry.initiatorType : 'resource',
      startTimestamp,
      data,
    })
    return endTimestamp
  }
  function addPerformanceNavigationTiming(props) {
    var transaction = props.transaction,
      entry = props.entry,
      event = props.event,
      timeOrigin = props.timeOrigin,
      eventEnd = props.eventEnd,
      description = props.description
    var end = eventEnd ? entry[eventEnd] : entry[event + 'End']
    var start = entry[event + 'Start']
    if (!start || !end) {
      return
    }
    _startChild(transaction, {
      op: 'browser',
      description: description !== null && description !== void 0 ? description : event,
      startTimestamp: timeOrigin + msToSec(start),
      endTimestamp: timeOrigin + msToSec(end),
    })
  }
  function addRequest(transaction, entry, timeOrigin) {
    _startChild(transaction, {
      op: 'browser',
      description: 'request',
      startTimestamp: timeOrigin + msToSec(entry.requestStart),
      endTimestamp: timeOrigin + msToSec(entry.responseEnd),
    })
    _startChild(transaction, {
      op: 'browser',
      description: 'response',
      startTimestamp: timeOrigin + msToSec(entry.responseStart),
      endTimestamp: timeOrigin + msToSec(entry.responseEnd),
    })
  }
  function _startChild(transaction, _a) {
    var startTimestamp = _a.startTimestamp,
      ctx = __rest(_a, ['startTimestamp'])
    if (startTimestamp && transaction.startTimestamp > startTimestamp) {
      transaction.startTimestamp = startTimestamp
    }
    return transaction.startChild(__assign({ startTimestamp }, ctx))
  }
  function isMeasurementValue(value) {
    return typeof value === 'number' && isFinite(value)
  }

  // node_modules/@sentry/tracing/esm/browser/request.js
  var DEFAULT_TRACING_ORIGINS = ['localhost', /^\//]
  var defaultRequestInstrumentationOptions = {
    traceFetch: true,
    traceXHR: true,
    tracingOrigins: DEFAULT_TRACING_ORIGINS,
  }
  function instrumentOutgoingRequests(_options) {
    var _a = __assign(__assign({}, defaultRequestInstrumentationOptions), _options),
      traceFetch = _a.traceFetch,
      traceXHR = _a.traceXHR,
      tracingOrigins = _a.tracingOrigins,
      shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest
    var urlMap = {}
    var defaultShouldCreateSpan = function (url) {
      if (urlMap[url]) {
        return urlMap[url]
      }
      var origins = tracingOrigins
      urlMap[url] =
        origins.some(function (origin) {
          return isMatchingPattern(url, origin)
        }) && !isMatchingPattern(url, 'sentry_key')
      return urlMap[url]
    }
    var shouldCreateSpan = defaultShouldCreateSpan
    if (typeof shouldCreateSpanForRequest === 'function') {
      shouldCreateSpan = function (url) {
        return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url)
      }
    }
    var spans = {}
    if (traceFetch) {
      addInstrumentationHandler({
        callback: function (handlerData) {
          fetchCallback(handlerData, shouldCreateSpan, spans)
        },
        type: 'fetch',
      })
    }
    if (traceXHR) {
      addInstrumentationHandler({
        callback: function (handlerData) {
          xhrCallback(handlerData, shouldCreateSpan, spans)
        },
        type: 'xhr',
      })
    }
  }
  function fetchCallback(handlerData, shouldCreateSpan, spans) {
    if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {
      return
    }
    if (handlerData.endTimestamp && handlerData.fetchData.__span) {
      var span = spans[handlerData.fetchData.__span]
      if (span) {
        if (handlerData.response) {
          span.setHttpStatus(handlerData.response.status)
        } else if (handlerData.error) {
          span.setStatus(SpanStatus.InternalError)
        }
        span.finish()
        delete spans[handlerData.fetchData.__span]
      }
      return
    }
    var activeTransaction = getActiveTransaction()
    if (activeTransaction) {
      var span = activeTransaction.startChild({
        data: __assign(__assign({}, handlerData.fetchData), { type: 'fetch' }),
        description: handlerData.fetchData.method + ' ' + handlerData.fetchData.url,
        op: 'http',
      })
      handlerData.fetchData.__span = span.spanId
      spans[span.spanId] = span
      var request = (handlerData.args[0] = handlerData.args[0])
      var options = (handlerData.args[1] = handlerData.args[1] || {})
      var headers = options.headers
      if (isInstanceOf(request, Request)) {
        headers = request.headers
      }
      if (headers) {
        if (typeof headers.append === 'function') {
          headers.append('sentry-trace', span.toTraceparent())
        } else if (Array.isArray(headers)) {
          headers = __spread(headers, [['sentry-trace', span.toTraceparent()]])
        } else {
          headers = __assign(__assign({}, headers), { 'sentry-trace': span.toTraceparent() })
        }
      } else {
        headers = { 'sentry-trace': span.toTraceparent() }
      }
      options.headers = headers
    }
  }
  function xhrCallback(handlerData, shouldCreateSpan, spans) {
    var _a, _b
    if (
      !hasTracingEnabled() ||
      ((_a = handlerData.xhr) === null || _a === void 0 ? void 0 : _a.__sentry_own_request__) ||
      !(
        ((_b = handlerData.xhr) === null || _b === void 0 ? void 0 : _b.__sentry_xhr__) &&
        shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url)
      )
    ) {
      return
    }
    var xhr = handlerData.xhr.__sentry_xhr__
    if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_span_id__) {
      var span = spans[handlerData.xhr.__sentry_xhr_span_id__]
      if (span) {
        span.setHttpStatus(xhr.status_code)
        span.finish()
        delete spans[handlerData.xhr.__sentry_xhr_span_id__]
      }
      return
    }
    var activeTransaction = getActiveTransaction()
    if (activeTransaction) {
      var span = activeTransaction.startChild({
        data: __assign(__assign({}, xhr.data), { type: 'xhr', method: xhr.method, url: xhr.url }),
        description: xhr.method + ' ' + xhr.url,
        op: 'http',
      })
      handlerData.xhr.__sentry_xhr_span_id__ = span.spanId
      spans[handlerData.xhr.__sentry_xhr_span_id__] = span
      if (handlerData.xhr.setRequestHeader) {
        try {
          handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent())
        } catch (_) {}
      }
    }
  }

  // node_modules/@sentry/tracing/esm/browser/router.js
  var global7 = getGlobalObject()
  function instrumentRoutingWithDefaults(
    customStartTransaction,
    startTransactionOnPageLoad,
    startTransactionOnLocationChange
  ) {
    if (startTransactionOnPageLoad === void 0) {
      startTransactionOnPageLoad = true
    }
    if (startTransactionOnLocationChange === void 0) {
      startTransactionOnLocationChange = true
    }
    if (!global7 || !global7.location) {
      logger.warn('Could not initialize routing instrumentation due to invalid location')
      return
    }
    var startingUrl = global7.location.href
    var activeTransaction
    if (startTransactionOnPageLoad) {
      activeTransaction = customStartTransaction({ name: global7.location.pathname, op: 'pageload' })
    }
    if (startTransactionOnLocationChange) {
      addInstrumentationHandler({
        callback: function (_a) {
          var to = _a.to,
            from = _a.from
          if (from === void 0 && startingUrl && startingUrl.indexOf(to) !== -1) {
            startingUrl = void 0
            return
          }
          if (from !== to) {
            startingUrl = void 0
            if (activeTransaction) {
              logger.log('[Tracing] Finishing current transaction with op: ' + activeTransaction.op)
              activeTransaction.finish()
            }
            activeTransaction = customStartTransaction({ name: global7.location.pathname, op: 'navigation' })
          }
        },
        type: 'history',
      })
    }
  }

  // node_modules/@sentry/tracing/esm/browser/browsertracing.js
  var DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600
  var DEFAULT_BROWSER_TRACING_OPTIONS = __assign(
    {
      idleTimeout: DEFAULT_IDLE_TIMEOUT,
      markBackgroundTransactions: true,
      maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,
      routingInstrumentation: instrumentRoutingWithDefaults,
      startTransactionOnLocationChange: true,
      startTransactionOnPageLoad: true,
    },
    defaultRequestInstrumentationOptions
  )
  var BrowserTracing = (function () {
    function BrowserTracing2(_options) {
      this.name = BrowserTracing2.id
      this._metrics = new MetricsInstrumentation()
      this._emitOptionsWarning = false
      var tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins
      if (
        _options &&
        _options.tracingOrigins &&
        Array.isArray(_options.tracingOrigins) &&
        _options.tracingOrigins.length !== 0
      ) {
        tracingOrigins = _options.tracingOrigins
      } else {
        this._emitOptionsWarning = true
      }
      this.options = __assign(__assign(__assign({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), { tracingOrigins })
    }
    BrowserTracing2.prototype.setupOnce = function (_, getCurrentHub2) {
      var _this = this
      this._getCurrentHub = getCurrentHub2
      if (this._emitOptionsWarning) {
        logger.warn(
          '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.'
        )
        logger.warn(
          '[Tracing] We added a reasonable default for you: ' + defaultRequestInstrumentationOptions.tracingOrigins
        )
      }
      var _a = this.options,
        instrumentRouting = _a.routingInstrumentation,
        startTransactionOnLocationChange = _a.startTransactionOnLocationChange,
        startTransactionOnPageLoad = _a.startTransactionOnPageLoad,
        markBackgroundTransactions = _a.markBackgroundTransactions,
        traceFetch = _a.traceFetch,
        traceXHR = _a.traceXHR,
        tracingOrigins = _a.tracingOrigins,
        shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest
      instrumentRouting(
        function (context) {
          return _this._createRouteTransaction(context)
        },
        startTransactionOnPageLoad,
        startTransactionOnLocationChange
      )
      if (markBackgroundTransactions) {
        registerBackgroundTabDetection()
      }
      instrumentOutgoingRequests({ traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest })
    }
    BrowserTracing2.prototype._createRouteTransaction = function (context) {
      var _this = this
      if (!this._getCurrentHub) {
        logger.warn('[Tracing] Did not create ' + context.op + ' transaction because _getCurrentHub is invalid.')
        return void 0
      }
      var _a = this.options,
        beforeNavigate = _a.beforeNavigate,
        idleTimeout = _a.idleTimeout,
        maxTransactionDuration = _a.maxTransactionDuration
      var parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : void 0
      var expandedContext = __assign(__assign(__assign({}, context), parentContextFromHeader), { trimEnd: true })
      var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext
      var finalContext =
        modifiedContext === void 0 ? __assign(__assign({}, expandedContext), { sampled: false }) : modifiedContext
      if (finalContext.sampled === false) {
        logger.log('[Tracing] Will not send ' + finalContext.op + ' transaction because of beforeNavigate.')
      }
      logger.log('[Tracing] Starting ' + finalContext.op + ' transaction on scope')
      var hub = this._getCurrentHub()
      var location = getGlobalObject().location
      var idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, true, { location })
      idleTransaction.registerBeforeFinishCallback(function (transaction, endTimestamp) {
        _this._metrics.addPerformanceEntries(transaction)
        adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp)
      })
      return idleTransaction
    }
    BrowserTracing2.id = 'BrowserTracing'
    return BrowserTracing2
  })()
  function getHeaderContext() {
    var header = getMetaContent('sentry-trace')
    if (header) {
      return extractTraceparentData(header)
    }
    return void 0
  }
  function getMetaContent(metaName) {
    var el = document.querySelector('meta[name=' + metaName + ']')
    return el ? el.getAttribute('content') : null
  }
  function adjustTransactionDuration(maxDuration, transaction, endTimestamp) {
    var diff = endTimestamp - transaction.startTimestamp
    var isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0)
    if (isOutdatedTransaction) {
      transaction.setStatus(SpanStatus.DeadlineExceeded)
      transaction.setTag('maxTransactionDurationExceeded', 'true')
    }
  }

  // node_modules/@sentry/tracing/esm/integrations/index.js
  var integrations_exports2 = {}
  __export(integrations_exports2, {
    Express: () => Express,
    Mongo: () => Mongo,
    Mysql: () => Mysql,
    Postgres: () => Postgres,
  })

  // node_modules/@sentry/tracing/esm/integrations/express.js
  var Express = (function () {
    function Express2(options) {
      if (options === void 0) {
        options = {}
      }
      this.name = Express2.id
      this._router = options.router || options.app
      this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use')
    }
    Express2.prototype.setupOnce = function () {
      if (!this._router) {
        logger.error('ExpressIntegration is missing an Express instance')
        return
      }
      instrumentMiddlewares(this._router, this._methods)
    }
    Express2.id = 'Express'
    return Express2
  })()
  function wrap3(fn, method) {
    var arity = fn.length
    switch (arity) {
      case 2: {
        return function (req, res) {
          var transaction = res.__sentry_transaction
          if (transaction) {
            var span_1 = transaction.startChild({
              description: fn.name,
              op: 'middleware.' + method,
            })
            res.once('finish', function () {
              span_1.finish()
            })
          }
          return fn.call(this, req, res)
        }
      }
      case 3: {
        return function (req, res, next) {
          var _a
          var transaction = res.__sentry_transaction
          var span =
            (_a = transaction) === null || _a === void 0
              ? void 0
              : _a.startChild({
                  description: fn.name,
                  op: 'middleware.' + method,
                })
          fn.call(this, req, res, function () {
            var args = []
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i]
            }
            var _a2
            ;(_a2 = span) === null || _a2 === void 0 ? void 0 : _a2.finish()
            next.call.apply(next, __spread([this], args))
          })
        }
      }
      case 4: {
        return function (err, req, res, next) {
          var _a
          var transaction = res.__sentry_transaction
          var span =
            (_a = transaction) === null || _a === void 0
              ? void 0
              : _a.startChild({
                  description: fn.name,
                  op: 'middleware.' + method,
                })
          fn.call(this, err, req, res, function () {
            var args = []
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i]
            }
            var _a2
            ;(_a2 = span) === null || _a2 === void 0 ? void 0 : _a2.finish()
            next.call.apply(next, __spread([this], args))
          })
        }
      }
      default: {
        throw new Error('Express middleware takes 2-4 arguments. Got: ' + arity)
      }
    }
  }
  function wrapMiddlewareArgs(args, method) {
    return args.map(function (arg) {
      if (typeof arg === 'function') {
        return wrap3(arg, method)
      }
      if (Array.isArray(arg)) {
        return arg.map(function (a) {
          if (typeof a === 'function') {
            return wrap3(a, method)
          }
          return a
        })
      }
      return arg
    })
  }
  function patchMiddleware(router, method) {
    var originalCallback = router[method]
    router[method] = function () {
      var args = []
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i]
      }
      return originalCallback.call.apply(originalCallback, __spread([this], wrapMiddlewareArgs(args, method)))
    }
    return router
  }
  function instrumentMiddlewares(router, methods) {
    if (methods === void 0) {
      methods = []
    }
    methods.forEach(function (method) {
      return patchMiddleware(router, method)
    })
  }

  // node_modules/@sentry/tracing/esm/integrations/postgres.js
  var Postgres = (function () {
    function Postgres2() {
      this.name = Postgres2.id
    }
    Postgres2.prototype.setupOnce = function (_, getCurrentHub2) {
      var pkg = loadModule('pg')
      if (!pkg) {
        logger.error('Postgres Integration was unable to require `pg` package.')
        return
      }
      fill(pkg.Client.prototype, 'query', function (orig) {
        return function (config, values, callback) {
          var _a, _b, _c
          var scope = getCurrentHub2().getScope()
          var parentSpan = (_a = scope) === null || _a === void 0 ? void 0 : _a.getSpan()
          var span =
            (_b = parentSpan) === null || _b === void 0
              ? void 0
              : _b.startChild({
                  description: typeof config === 'string' ? config : config.text,
                  op: 'db',
                })
          if (typeof callback === 'function') {
            return orig.call(this, config, values, function (err, result) {
              var _a2
              ;(_a2 = span) === null || _a2 === void 0 ? void 0 : _a2.finish()
              callback(err, result)
            })
          }
          if (typeof values === 'function') {
            return orig.call(this, config, function (err, result) {
              var _a2
              ;(_a2 = span) === null || _a2 === void 0 ? void 0 : _a2.finish()
              values(err, result)
            })
          }
          var rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config)
          if (isThenable(rv)) {
            return rv.then(function (res) {
              var _a2
              ;(_a2 = span) === null || _a2 === void 0 ? void 0 : _a2.finish()
              return res
            })
          }
          ;(_c = span) === null || _c === void 0 ? void 0 : _c.finish()
          return rv
        }
      })
    }
    Postgres2.id = 'Postgres'
    return Postgres2
  })()

  // node_modules/@sentry/tracing/esm/integrations/mysql.js
  var Mysql = (function () {
    function Mysql2() {
      this.name = Mysql2.id
    }
    Mysql2.prototype.setupOnce = function (_, getCurrentHub2) {
      var pkg = loadModule('mysql/lib/Connection.js')
      if (!pkg) {
        logger.error('Mysql Integration was unable to require `mysql` package.')
        return
      }
      fill(pkg, 'createQuery', function (orig) {
        return function (options, values, callback) {
          var _a, _b
          var scope = getCurrentHub2().getScope()
          var parentSpan = (_a = scope) === null || _a === void 0 ? void 0 : _a.getSpan()
          var span =
            (_b = parentSpan) === null || _b === void 0
              ? void 0
              : _b.startChild({
                  description: typeof options === 'string' ? options : options.sql,
                  op: 'db',
                })
          if (typeof callback === 'function') {
            return orig.call(this, options, values, function (err, result, fields) {
              var _a2
              ;(_a2 = span) === null || _a2 === void 0 ? void 0 : _a2.finish()
              callback(err, result, fields)
            })
          }
          if (typeof values === 'function') {
            return orig.call(this, options, function (err, result, fields) {
              var _a2
              ;(_a2 = span) === null || _a2 === void 0 ? void 0 : _a2.finish()
              values(err, result, fields)
            })
          }
          return orig.call(this, options, values, callback)
        }
      })
    }
    Mysql2.id = 'Mysql'
    return Mysql2
  })()

  // node_modules/@sentry/tracing/esm/integrations/mongo.js
  var OPERATIONS = [
    'aggregate',
    'bulkWrite',
    'countDocuments',
    'createIndex',
    'createIndexes',
    'deleteMany',
    'deleteOne',
    'distinct',
    'drop',
    'dropIndex',
    'dropIndexes',
    'estimatedDocumentCount',
    'find',
    'findOne',
    'findOneAndDelete',
    'findOneAndReplace',
    'findOneAndUpdate',
    'indexes',
    'indexExists',
    'indexInformation',
    'initializeOrderedBulkOp',
    'insertMany',
    'insertOne',
    'isCapped',
    'mapReduce',
    'options',
    'parallelCollectionScan',
    'rename',
    'replaceOne',
    'stats',
    'updateMany',
    'updateOne',
  ]
  var OPERATION_SIGNATURES = {
    bulkWrite: ['operations'],
    countDocuments: ['query'],
    createIndex: ['fieldOrSpec'],
    createIndexes: ['indexSpecs'],
    deleteMany: ['filter'],
    deleteOne: ['filter'],
    distinct: ['key', 'query'],
    dropIndex: ['indexName'],
    find: ['query'],
    findOne: ['query'],
    findOneAndDelete: ['filter'],
    findOneAndReplace: ['filter', 'replacement'],
    findOneAndUpdate: ['filter', 'update'],
    indexExists: ['indexes'],
    insertMany: ['docs'],
    insertOne: ['doc'],
    mapReduce: ['map', 'reduce'],
    rename: ['newName'],
    replaceOne: ['filter', 'doc'],
    updateMany: ['filter', 'update'],
    updateOne: ['filter', 'update'],
  }
  var Mongo = (function () {
    function Mongo2(options) {
      if (options === void 0) {
        options = {}
      }
      this.name = Mongo2.id
      this._operations = Array.isArray(options.operations) ? options.operations : OPERATIONS
      this._describeOperations = 'describeOperations' in options ? options.describeOperations : true
      this._useMongoose = !!options.useMongoose
    }
    Mongo2.prototype.setupOnce = function (_, getCurrentHub2) {
      var moduleName = this._useMongoose ? 'mongoose' : 'mongodb'
      var pkg = loadModule(moduleName)
      if (!pkg) {
        logger.error('Mongo Integration was unable to require `' + moduleName + '` package.')
        return
      }
      this._instrumentOperations(pkg.Collection, this._operations, getCurrentHub2)
    }
    Mongo2.prototype._instrumentOperations = function (collection, operations, getCurrentHub2) {
      var _this = this
      operations.forEach(function (operation) {
        return _this._patchOperation(collection, operation, getCurrentHub2)
      })
    }
    Mongo2.prototype._patchOperation = function (collection, operation, getCurrentHub2) {
      if (!(operation in collection.prototype)) return
      var getSpanContext = this._getSpanContextFromOperationArguments.bind(this)
      fill(collection.prototype, operation, function (orig) {
        return function () {
          var args = []
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i]
          }
          var _a, _b, _c, _d
          var lastArg = args[args.length - 1]
          var scope = getCurrentHub2().getScope()
          var parentSpan = (_a = scope) === null || _a === void 0 ? void 0 : _a.getSpan()
          if (typeof lastArg !== 'function' || (operation === 'mapReduce' && args.length === 2)) {
            var span_1 =
              (_b = parentSpan) === null || _b === void 0
                ? void 0
                : _b.startChild(getSpanContext(this, operation, args))
            var maybePromise = orig.call.apply(orig, __spread([this], args))
            if (isThenable(maybePromise)) {
              return maybePromise.then(function (res) {
                var _a2
                ;(_a2 = span_1) === null || _a2 === void 0 ? void 0 : _a2.finish()
                return res
              })
            } else {
              ;(_c = span_1) === null || _c === void 0 ? void 0 : _c.finish()
              return maybePromise
            }
          }
          var span =
            (_d = parentSpan) === null || _d === void 0
              ? void 0
              : _d.startChild(getSpanContext(this, operation, args.slice(0, -1)))
          return orig.call.apply(
            orig,
            __spread([this], args.slice(0, -1), [
              function (err, result) {
                var _a2
                ;(_a2 = span) === null || _a2 === void 0 ? void 0 : _a2.finish()
                lastArg(err, result)
              },
            ])
          )
        }
      })
    }
    Mongo2.prototype._getSpanContextFromOperationArguments = function (collection, operation, args) {
      var data = {
        collectionName: collection.collectionName,
        dbName: collection.dbName,
        namespace: collection.namespace,
      }
      var spanContext = {
        op: 'db',
        description: operation,
        data,
      }
      var signature = OPERATION_SIGNATURES[operation]
      var shouldDescribe = Array.isArray(this._describeOperations)
        ? this._describeOperations.includes(operation)
        : this._describeOperations
      if (!signature || !shouldDescribe) {
        return spanContext
      }
      try {
        if (operation === 'mapReduce') {
          var _a = __read(args, 2),
            map = _a[0],
            reduce = _a[1]
          data[signature[0]] = typeof map === 'string' ? map : map.name || '<anonymous>'
          data[signature[1]] = typeof reduce === 'string' ? reduce : reduce.name || '<anonymous>'
        } else {
          for (var i = 0; i < signature.length; i++) {
            data[signature[i]] = JSON.stringify(args[i])
          }
        }
      } catch (_oO) {}
      return spanContext
    }
    Mongo2.id = 'Mongo'
    return Mongo2
  })()

  // node_modules/@sentry/tracing/esm/index.js
  var Integrations = __assign(__assign({}, integrations_exports2), { BrowserTracing })
  addExtensionMethods()

  // src/pages/panel.tsx
  var import_react6 = __toModule(require_react())

  // src/components/context/Twitch.tsx
  var import_react = __toModule(require_react())
  var TwitchContext = (0, import_react.createContext)({ ctx: {}, auth: {}, config: { broadcaster: {} } })
  var TwitchContextWrapper = ({ children }) => {
    const [ctx, setCtx] = (0, import_react.useState)({})
    const [auth, setAuth] = (0, import_react.useState)({})
    const [config, setConfig] = (0, import_react.useState)({ broadcaster: {} })
    const [twitch, setTwitch] = (0, import_react.useState)()
    ;(0, import_react.useEffect)(() => {
      var _a
      const twitch2 = window.Twitch.ext
      if (!twitch2) return
      setTwitch(window.Twitch.ext)
      console.info(twitch2, twitch2.configuration)
      setConfig({
        broadcaster: JSON.parse(((_a = twitch2.configuration.broadcaster) == null ? void 0 : _a.content) || '{}'),
      })
      twitch2.configuration.onChanged((e) => {
        var _a2
        console.info('conf', e)
        setConfig({
          broadcaster: JSON.parse(((_a2 = twitch2.configuration.broadcaster) == null ? void 0 : _a2.content) || '{}'),
        })
      })
      twitch2.onAuthorized((e) => {
        setAuth(e)
        if (!twitch2.configuration.broadcaster) {
          twitch2.configuration.set('broadcaster', '1.0', '{}')
        }
      })
      twitch2.onContext((e) => {
        document.body.classList.toggle('dark', e.theme === 'dark')
        setCtx(e)
      })
    }, [])
    return /* @__PURE__ */ import_react.default.createElement(
      TwitchContext.Provider,
      {
        value: { ctx, auth, config, twitch },
      },
      children
    )
  }
  var Twitch_default = TwitchContextWrapper

  // src/components/hooks/useBuildData.ts
  var import_react2 = __toModule(require_react())
  function useBuildData() {
    const { config } = (0, import_react2.useContext)(TwitchContext)
    const [character, setCharacter] = (0, import_react2.useState)()
    const [equipment, setEquipment] = (0, import_react2.useState)(new Map())
    const [equipmentById, setEquipmentById] = (0, import_react2.useState)(new Map())
    const [skills, setSkills] = (0, import_react2.useState)(new Map())
    const [traits, setTraits] = (0, import_react2.useState)(new Map())
    const [specializations, setSpecializations] = (0, import_react2.useState)(new Map())
    const gamemode = config.broadcaster.gamemode || 'pve'
    const getData = (0, import_react2.useCallback)(
      async (apiKey) => {
        try {
          if (!apiKey) return
          const res = await fetch(
            `https://cachedproxy.xyz/api/gw2-build/${encodeURIComponent(apiKey)}/${config.broadcaster.character}`
          )
          if (res.ok) {
            const data = await res.json()
            const characterData = data.characterData
            const equipmentData = new Map(data.equipmentData)
            const skinData = new Map(data.skinData)
            const skillData = new Map(data.skillData)
            const traitData = new Map(data.traitData)
            const specializationData = new Map(data.specializationData)
            const amuletData = data.amuletData
            setCharacter(characterData)
            const embellishedEquipment = new Map(
              characterData.equipment.map((e) => [
                e.slot,
                __spreadProps(__spreadValues({}, e), { item: equipmentData.get(e.id), skin: skinData.get(e.skin) }),
              ])
            )
            embellishedEquipment.set('PvP_Amulet', { item: amuletData })
            if (characterData.equipment_pvp) {
              embellishedEquipment.set('PvP_Rune', { item: equipmentData.get(characterData.equipment_pvp.rune) })
            }
            setEquipmentById(equipmentData)
            setEquipment(embellishedEquipment)
            setSkills(skillData)
            setTraits(traitData)
            setSpecializations(specializationData)
          } else {
            console.error('Not okay', res.status, res.ok, (await res.text()) || 'Empty')
          }
        } catch (e) {
          console.error('Not okay', e)
        }
      },
      [config.broadcaster.character]
    )
    ;(0, import_react2.useEffect)(() => {
      getData(config.broadcaster.apiKey)
    }, [config.broadcaster.apiKey, getData])
    const eliteSpec = [...specializations.values()].find(({ elite }) => elite)
    return {
      eliteSpec,
      character,
      equipment,
      equipmentById,
      skills,
      traits,
      specializations,
      gamemode,
    }
  }

  // src/components/hooks/useBuildTemplateString.ts
  var import_react3 = __toModule(require_react())

  // src/util/Buildtemplate.ts
  var Buildtemplate = class {
    constructor(code) {
      this.profession = 1
      this.specializations = [
        {
          id: 0,
          traits: [0, 0, 0],
        },
        {
          id: 0,
          traits: [0, 0, 0],
        },
        {
          id: 0,
          traits: [0, 0, 0],
        },
      ]
      this.skills = {
        terrestrial: {
          heal: 0,
          utilities: [0, 0, 0],
          elite: 0,
        },
        aquatic: {
          heal: 0,
          utilities: [0, 0, 0],
          elite: 0,
        },
      }
      this.specific = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      if (code !== void 0) {
        this.parse(code)
      }
    }
    parse(code) {
      const chatCodeRegex = /\[&((?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?)\]/
      const match = code.match(chatCodeRegex)
      if (match !== null && match.length === 2) {
        const byteString = atob(match[1])
        const bytes = new Array(byteString.length)
        for (let i = 0; i < byteString.length; i++) {
          bytes[i] = byteString.charCodeAt(i)
        }
        if (bytes.length > 0 && bytes[0] !== 13) {
          throw 'Wrong header type'
        } else if (bytes.length >= 44) {
          this.profession = bytes[1]
          for (let s = 0; s < 3; s++) {
            const offset = s * 2
            this.specializations[s].id = bytes[offset + 2]
            for (let t = 0; t < 3; t++) {
              this.specializations[s].traits[t] = (bytes[offset + 3] >> (t * 2)) & 3
            }
          }
          this.skills.terrestrial.heal = bytes[8] + (bytes[9] << 8)
          this.skills.aquatic.heal = bytes[10] + (bytes[11] << 8)
          for (let u = 0; u < 3; u++) {
            const offset = u * 4 + 12
            this.skills.terrestrial.utilities[u] = bytes[offset] + (bytes[offset + 1] << 8)
            this.skills.aquatic.utilities[u] = bytes[offset + 2] + (bytes[offset + 3] << 8)
          }
          this.skills.terrestrial.elite = bytes[24] + (bytes[25] << 8)
          this.skills.aquatic.elite = bytes[26] + (bytes[27] << 8)
          this.specific = bytes.slice(28)
        } else {
          throw 'Invalid build template'
        }
      } else {
        throw 'Invalid format'
      }
    }
    toString() {
      const retval = [13]
      retval.push(this.profession)
      for (let s = 0; s < 3; s++) {
        retval.push(this.specializations[s].id)
        retval.push(
          (this.specializations[s].traits[2] << 4) |
            (this.specializations[s].traits[1] << 2) |
            this.specializations[s].traits[0]
        )
      }
      retval.push(this.skills.terrestrial.heal & 255, (this.skills.terrestrial.heal >> 8) & 255)
      retval.push(this.skills.aquatic.heal & 255, (this.skills.aquatic.heal >> 8) & 255)
      for (let u = 0; u < 3; u++) {
        retval.push(this.skills.terrestrial.utilities[u] & 255, (this.skills.terrestrial.utilities[u] >> 8) & 255)
        retval.push(this.skills.aquatic.utilities[u] & 255, (this.skills.aquatic.utilities[u] >> 8) & 255)
      }
      retval.push(this.skills.terrestrial.elite & 255, (this.skills.terrestrial.elite >> 8) & 255)
      retval.push(this.skills.aquatic.elite & 255, (this.skills.aquatic.elite >> 8) & 255)
      for (let i = 0; i < this.specific.length; i++) {
        retval.push(this.specific[i])
      }
      return '[&' + btoa(String.fromCharCode.apply(null, retval)) + ']'
    }
  }

  // src/util/dataMaps.ts
  var modifierMap = {
    BoonDuration: 'Concentration',
    ConditionDamage: 'Condition Damage',
    ConditionDuration: 'Expertise',
    CritDamage: 'Ferocity',
    HealingPower: 'Healing Power',
  }
  var rarityColourMap = {
    Basic: 'var(--color-text)',
    Fine: '#62A4DA',
    Masterwork: '#1a9306',
    Rare: '#fcd00b',
    Exotic: '#ffa405',
    Ascended: '#fb3e8d',
    Legendary: '#a26ded',
  }
  var professionIdMap = {
    Guardian: 1,
    Warrior: 2,
    Engineer: 3,
    Ranger: 4,
    Thief: 5,
    Elementalist: 6,
    Mesmer: 7,
    Necromancer: 8,
    Revenant: 9,
  }

  // src/components/hooks/useBuildTemplateString.ts
  function useBuildTemplateString(character, traits, gamemode) {
    return (0, import_react3.useMemo)(() => {
      try {
        const professionId = professionIdMap[character == null ? void 0 : character.profession]
        const specs = (character == null ? void 0 : character.specializations[gamemode]) || []
        const build = new Buildtemplate()
        build.profession = professionId
        specs.forEach(({ id, traits: traitIds }, i) => {
          build.specializations[i].id = id
          build.specializations[i].traits = traitIds.map((tId) => {
            var _a
            const order = (_a = traits.get(tId)) == null ? void 0 : _a.order
            return order > -1 ? order + 1 : 0
          })
        })
        const skills = character == null ? void 0 : character.skills[gamemode]
        build.skills.terrestrial.heal = (skills == null ? void 0 : skills.heal) || 0
        build.skills.terrestrial.utilities = (skills == null ? void 0 : skills.utilities) || []
        build.skills.terrestrial.elite = (skills == null ? void 0 : skills.elite) || 0
        return build.toString()
      } catch (e) {
        if (e.message !== 'btoa is not defined') {
          console.error(e)
        }
        return ''
      }
    }, [character, gamemode, traits])
  }

  // src/components/hooks/useCopyToClipboard.ts
  var React3 = __toModule(require_react())
  var useCopyToClipboard = (text, options = { resetTimeout: 1e3 }) => {
    const copyToClipboard = (str) => {
      var _a, _b, _c, _d
      const el = document.createElement('textarea')
      el.value = str
      el.setAttribute('readonly', '')
      el.style.position = 'absolute'
      el.style.left = '-9999px'
      document.body.appendChild(el)
      const rangeCount = ((_a = document.getSelection()) == null ? void 0 : _a.rangeCount) || 0
      const selected = rangeCount > 0 ? ((_b = document.getSelection()) == null ? void 0 : _b.getRangeAt(0)) : false
      el.select()
      const success = document.execCommand('copy')
      document.body.removeChild(el)
      if (selected) {
        ;(_c = document.getSelection()) == null ? void 0 : _c.removeAllRanges()
        ;(_d = document.getSelection()) == null ? void 0 : _d.addRange(selected)
      }
      return success
    }
    const mounted = React3.useRef(false)
    const resetTimer = React3.useRef()
    const [copied, setCopied] = React3.useState(false)
    React3.useEffect(() => {
      mounted.current = true
      return () => {
        if (resetTimer.current) clearTimeout(resetTimer.current)
        mounted.current = false
      }
    }, [])
    const copy = React3.useCallback(() => {
      if (resetTimer.current) clearTimeout(resetTimer.current)
      setCopied(copyToClipboard(text))
      resetTimer.current = setTimeout(() => setCopied(false), options.resetTimeout)
    }, [text, options.resetTimeout])
    React3.useEffect(
      () => () => {
        setCopied(false)
      },
      [text]
    )
    return [copied, copy]
  }
  var useCopyToClipboard_default = useCopyToClipboard

  // src/components/primitives/Title.tsx
  var React4 = __toModule(require_react())
  var Title = ({ children, style }) => {
    return /* @__PURE__ */ React4.createElement(
      'h2',
      {
        style: __spreadValues(
          {
            fontSize: '1rem',
            lineHeight: '1rem',
            textAlign: 'center',
            marginTop: 10,
            marginBottom: 8,
          },
          style
        ),
      },
      children
    )
  }
  var Title_default = Title

  // src/components/primitives/TooltipContent.tsx
  var import_react5 = __toModule(require_react())

  // src/components/primitives/Tip.tsx
  var import_react4 = __toModule(require_react())
  var import_react_tippy = __toModule(require_react_tippy())
  var Tip = ({ html, children }) => {
    const { ctx } = (0, import_react4.useContext)(TwitchContext)
    return /* @__PURE__ */ import_react4.default.createElement(
      import_react_tippy.Tooltip,
      {
        position: 'top',
        animateFill: false,
        arrow: true,
        arrowSize: 'big',
        duration: 150,
        animation: 'fade',
        html,
        style: { cursor: 'pointer' },
        theme: ctx.theme,
      },
      children
    )
  }
  var Tip_default = Tip

  // src/util/tooltips.ts
  function getFactText(t) {
    if (t.percent) {
      return `${t.text}: ${t.percent}%`
    } else if (t.distance) {
      return `${t.text}: ${t.distance}`
    } else if (t.status) {
      return `${t.status} (${t.duration}s): ${t.description}`
    } else if (t.type === 'Number' || t.type === 'Recharge') {
      return `${t.text}: ${t.value}`
    } else {
      return t.description || t.text
    }
  }
  function tidyDescriptions(d) {
    const tidied = (d || '')
      .replace(/<c(.+?)>/g, (_match, content) => {
        return `<span class='description-${content.replace(/^=@/, '').trim()}'>`
      })
      .replace(/<\/c>/g, '</span>')
      .replace(/<c.+?>(.+?)<\/c>/g, (_, content) => content)
      .replace(/\\n/g, '<br>')
    return tidied
  }

  // src/components/primitives/TooltipContent.tsx
  function Item({ equipment, equipmentById, slot }) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k
    const item = equipment.get(slot)
    if (!item) return null
    const icon = ((_a = item.skin) == null ? void 0 : _a.icon) || ((_b = item.item) == null ? void 0 : _b.icon)
    const upgrades = (item.upgrades || []).map((i) => equipmentById.get(i))
    const infusions = (item.infusions || []).map((i) => equipmentById.get(i))
    const TipHtml = /* @__PURE__ */ import_react5.default.createElement(
      'div',
      null,
      /* @__PURE__ */ import_react5.default.createElement(
        'div',
        {
          style: {
            fontWeight: 'bold',
            fontSize: '0.9rem',
            color: rarityColourMap[(_c = item.item) == null ? void 0 : _c.rarity] || rarityColourMap.Basic,
          },
        },
        (_d = item.item) == null ? void 0 : _d.name
      ),
      item.skin
        ? /* @__PURE__ */ import_react5.default.createElement(
            'div',
            {
              style: {
                fontSize: '0.8rem',
                marginBottom: '0.2em',
              },
            },
            'Skin: ',
            item.skin.name
          )
        : null,
      /* @__PURE__ */ import_react5.default.createElement(
        'div',
        {
          style: { fontSize: '0.8rem' },
        },
        Object.entries(((_e = item.stats) == null ? void 0 : _e.attributes) || {}).map(([k, v]) =>
          /* @__PURE__ */ import_react5.default.createElement(
            'div',
            {
              key: k,
            },
            '+ ',
            v,
            ' ',
            modifierMap[k] || k
          )
        ),
        Object.entries(((_f = item.item) == null ? void 0 : _f.attributes) || {}).map(([k, v]) =>
          /* @__PURE__ */ import_react5.default.createElement(
            'div',
            {
              key: k,
            },
            '+ ',
            v,
            ' ',
            modifierMap[k] || k
          )
        ),
        (
          ((_i = (_h = (_g = item.item) == null ? void 0 : _g.details) == null ? void 0 : _h.infix_upgrade) == null
            ? void 0
            : _i.attributes) || []
        ).map((i) =>
          /* @__PURE__ */ import_react5.default.createElement(
            'div',
            {
              key: i.attribute,
            },
            '+ ',
            i.modifier,
            ' ',
            modifierMap[i.attribute] || i.attribute
          )
        ),
        (((_k = (_j = item.item) == null ? void 0 : _j.details) == null ? void 0 : _k.bonuses) || []).map((i, j) =>
          /* @__PURE__ */ import_react5.default.createElement(
            'div',
            {
              key: j,
            },
            i
          )
        )
      ),
      /* @__PURE__ */ import_react5.default.createElement(
        'div',
        {
          style: { display: 'flex', flexDirection: 'column', gap: 5 },
        },
        upgrades.map((u) => {
          var _a2, _b2, _c2, _d2, _e2
          return /* @__PURE__ */ import_react5.default.createElement(
            'div',
            {
              key: u.id,
              style: { color: rarityColourMap[u.rarity] },
            },
            /* @__PURE__ */ import_react5.default.createElement(
              'p',
              {
                style: { fontSize: '0.9rem' },
              },
              u.name
            ),
            /* @__PURE__ */ import_react5.default.createElement('p', {
              style: { fontSize: '0.8rem' },
              dangerouslySetInnerHTML: {
                __html: tidyDescriptions(
                  (_c2 = (_b2 = (_a2 = u.details) == null ? void 0 : _a2.infix_upgrade) == null ? void 0 : _b2.buff) ==
                    null
                    ? void 0
                    : _c2.description
                ),
              },
            }),
            /* @__PURE__ */ import_react5.default.createElement('p', {
              style: { fontSize: '0.7rem' },
              dangerouslySetInnerHTML: {
                __html: (_e2 = (_d2 = u.details) == null ? void 0 : _d2.bonuses) == null ? void 0 : _e2.join('<br>'),
              },
            })
          )
        })
      ),
      /* @__PURE__ */ import_react5.default.createElement(
        'div',
        {
          style: { display: 'flex', flexDirection: 'column', gap: 5 },
        },
        infusions.map((u) => {
          var _a2, _b2, _c2, _d2, _e2
          return /* @__PURE__ */ import_react5.default.createElement(
            'div',
            {
              key: u.id,
              style: { color: rarityColourMap[u.rarity] },
            },
            /* @__PURE__ */ import_react5.default.createElement(
              'p',
              {
                style: { fontSize: '0.9rem' },
              },
              u.name
            ),
            /* @__PURE__ */ import_react5.default.createElement('p', {
              style: { fontSize: '0.8rem' },
              dangerouslySetInnerHTML: {
                __html: tidyDescriptions(
                  (_c2 = (_b2 = (_a2 = u.details) == null ? void 0 : _a2.infix_upgrade) == null ? void 0 : _b2.buff) ==
                    null
                    ? void 0
                    : _c2.description
                ),
              },
            }),
            /* @__PURE__ */ import_react5.default.createElement('p', {
              style: { fontSize: '0.7rem' },
              dangerouslySetInnerHTML: {
                __html: (_e2 = (_d2 = u.details) == null ? void 0 : _d2.bonuses) == null ? void 0 : _e2.join('<br>'),
              },
            })
          )
        })
      )
    )
    return /* @__PURE__ */ import_react5.default.createElement(
      Tip_default,
      {
        html: TipHtml,
      },
      /* @__PURE__ */ import_react5.default.createElement('img', {
        src: icon,
        height: 35,
        width: 40,
      })
    )
  }
  function Skill({ skills, id }) {
    const item = skills.get(id)
    if (!item) return null
    const TipHtml = /* @__PURE__ */ import_react5.default.createElement(
      'div',
      {
        style: { display: 'flex', flexDirection: 'column', gap: '0.1rem' },
      },
      /* @__PURE__ */ import_react5.default.createElement(
        'div',
        {
          style: { fontWeight: 'bold', color: 'var(--color-tooltip-title)' },
        },
        item.name
      ),
      /* @__PURE__ */ import_react5.default.createElement('p', {
        style: { fontSize: '0.8rem' },
        dangerouslySetInnerHTML: { __html: tidyDescriptions(item.description) },
      }),
      /* @__PURE__ */ import_react5.default.createElement(
        'div',
        {
          style: { display: 'flex', flexDirection: 'column', gap: 2 },
        },
        (item.facts || []).map((f, i) =>
          /* @__PURE__ */ import_react5.default.createElement(
            'div',
            {
              key: i,
              style: { display: 'flex', flexDirection: 'row', gap: 5, alignItems: 'center' },
            },
            f.icon
              ? /* @__PURE__ */ import_react5.default.createElement('img', {
                  height: 25,
                  width: 25,
                  src: f.icon,
                })
              : null,
            /* @__PURE__ */ import_react5.default.createElement(
              'div',
              {
                style: { textAlign: 'left', fontSize: '0.8rem' },
              },
              getFactText(f)
            )
          )
        )
      )
    )
    return /* @__PURE__ */ import_react5.default.createElement(
      Tip_default,
      {
        html: TipHtml,
      },
      /* @__PURE__ */ import_react5.default.createElement('img', {
        src: item == null ? void 0 : item.icon,
        height: 40,
        width: 40,
      })
    )
  }
  function Trait({ traits, id }) {
    const item = traits.get(id)
    if (!item) return null
    const TipHtml = /* @__PURE__ */ import_react5.default.createElement(
      'div',
      {
        style: { display: 'flex', flexDirection: 'column', gap: '0.1rem' },
      },
      /* @__PURE__ */ import_react5.default.createElement(
        'div',
        {
          style: { fontWeight: 'bold', color: 'var(--color-tooltip-title)' },
        },
        item.name
      ),
      item.description
        ? /* @__PURE__ */ import_react5.default.createElement('p', {
            style: { fontSize: '0.9rem' },
            dangerouslySetInnerHTML: { __html: tidyDescriptions(item.description) },
          })
        : /* @__PURE__ */ import_react5.default.createElement(
            'div',
            {
              style: { display: 'flex', flexDirection: 'column', gap: 2 },
            },
            (item.facts || []).map((f, i) =>
              /* @__PURE__ */ import_react5.default.createElement(
                'div',
                {
                  key: i,
                  style: { display: 'flex', flexDirection: 'row', gap: 5, alignItems: 'center' },
                },
                f.icon
                  ? /* @__PURE__ */ import_react5.default.createElement('img', {
                      height: 25,
                      width: 25,
                      src: f.icon,
                    })
                  : null,
                /* @__PURE__ */ import_react5.default.createElement(
                  'div',
                  {
                    style: { textAlign: 'left', fontSize: '0.8rem' },
                  },
                  getFactText(f)
                )
              )
            )
          )
    )
    return /* @__PURE__ */ import_react5.default.createElement(
      Tip_default,
      {
        html: TipHtml,
      },
      /* @__PURE__ */ import_react5.default.createElement('img', {
        src: item == null ? void 0 : item.icon,
        height: 30,
        width: 30,
      })
    )
  }

  // src/pages/panel.tsx
  function Index() {
    var _a, _b, _c, _d, _e, _f, _g
    const { config } = (0, import_react6.useContext)(TwitchContext)
    const { character, eliteSpec, equipment, gamemode, equipmentById, skills, specializations, traits } = useBuildData()
    const buildTemplateString = useBuildTemplateString(character, traits, gamemode)
    const [copied, copy] = useCopyToClipboard_default(buildTemplateString)
    return /* @__PURE__ */ import_react6.default.createElement(
      'div',
      {
        style: { padding: 5, marginTop: -6, overflow: 'hidden', display: 'flex', flexDirection: 'column' },
      },
      character
        ? /* @__PURE__ */ import_react6.default.createElement(
            import_react6.default.Fragment,
            null,
            /* @__PURE__ */ import_react6.default.createElement(
              Title_default,
              {
                style: { color: `var(--color-${(_a = character.profession) == null ? void 0 : _a.toLowerCase()})` },
              },
              character.name,
              ' (',
              eliteSpec ? eliteSpec.name : character.profession,
              ')'
            ),
            /* @__PURE__ */ import_react6.default.createElement(
              'div',
              {
                style: { display: 'flex', flexDirection: 'row', gap: 15, justifyContent: 'center' },
              },
              gamemode === 'pvp'
                ? null
                : /* @__PURE__ */ import_react6.default.createElement(
                    'div',
                    {
                      style: { display: 'flex', flexDirection: 'column', gap: 5, alignItems: 'center' },
                    },
                    /* @__PURE__ */ import_react6.default.createElement(Item, {
                      equipment,
                      equipmentById,
                      slot: 'Helm',
                    }),
                    /* @__PURE__ */ import_react6.default.createElement(Item, {
                      equipment,
                      equipmentById,
                      slot: 'Shoulders',
                    }),
                    /* @__PURE__ */ import_react6.default.createElement(Item, {
                      equipment,
                      equipmentById,
                      slot: 'Coat',
                    }),
                    /* @__PURE__ */ import_react6.default.createElement(Item, {
                      equipment,
                      equipmentById,
                      slot: 'Gloves',
                    }),
                    /* @__PURE__ */ import_react6.default.createElement(Item, {
                      equipment,
                      equipmentById,
                      slot: 'Leggings',
                    }),
                    /* @__PURE__ */ import_react6.default.createElement(Item, {
                      equipment,
                      equipmentById,
                      slot: 'Boots',
                    })
                  ),
              /* @__PURE__ */ import_react6.default.createElement(
                'div',
                {
                  style: {
                    display: 'flex',
                    flexDirection: 'column',
                    gap: gamemode === 'pvp' ? 5 : 45,
                    alignItems: 'center',
                  },
                },
                gamemode === 'pvp'
                  ? null
                  : /* @__PURE__ */ import_react6.default.createElement(
                      'div',
                      {
                        style: { display: 'flex', flexDirection: 'column', gap: 5, alignItems: 'center' },
                      },
                      /* @__PURE__ */ import_react6.default.createElement(
                        'div',
                        {
                          style: { display: 'flex', flexDirection: 'row', gap: 5 },
                        },
                        /* @__PURE__ */ import_react6.default.createElement(Item, {
                          equipment,
                          equipmentById,
                          slot: 'Backpack',
                        }),
                        /* @__PURE__ */ import_react6.default.createElement(Item, {
                          equipment,
                          equipmentById,
                          slot: 'Accessory1',
                        }),
                        /* @__PURE__ */ import_react6.default.createElement(Item, {
                          equipment,
                          equipmentById,
                          slot: 'Accessory2',
                        })
                      ),
                      /* @__PURE__ */ import_react6.default.createElement(
                        'div',
                        {
                          style: { display: 'flex', flexDirection: 'row', gap: 5 },
                        },
                        /* @__PURE__ */ import_react6.default.createElement(Item, {
                          equipment,
                          equipmentById,
                          slot: 'Amulet',
                        }),
                        /* @__PURE__ */ import_react6.default.createElement(Item, {
                          equipment,
                          equipmentById,
                          slot: 'Ring1',
                        }),
                        /* @__PURE__ */ import_react6.default.createElement(Item, {
                          equipment,
                          equipmentById,
                          slot: 'Ring2',
                        })
                      )
                    ),
                gamemode === 'pvp'
                  ? /* @__PURE__ */ import_react6.default.createElement(
                      'div',
                      {
                        style: { display: 'flex', flexDirection: 'row', gap: 5 },
                      },
                      /* @__PURE__ */ import_react6.default.createElement(Item, {
                        equipment,
                        equipmentById,
                        slot: 'PvP_Amulet',
                      }),
                      /* @__PURE__ */ import_react6.default.createElement(Item, {
                        equipment,
                        equipmentById,
                        slot: 'PvP_Rune',
                      })
                    )
                  : null,
                /* @__PURE__ */ import_react6.default.createElement(
                  'div',
                  {
                    style: { display: 'flex', flexDirection: 'column', gap: 5 },
                  },
                  /* @__PURE__ */ import_react6.default.createElement(
                    'div',
                    {
                      style: { display: 'flex', flexDirection: 'row', gap: 5 },
                    },
                    /* @__PURE__ */ import_react6.default.createElement(Item, {
                      equipment,
                      equipmentById,
                      slot: 'WeaponA1',
                    }),
                    /* @__PURE__ */ import_react6.default.createElement(Item, {
                      equipment,
                      equipmentById,
                      slot: 'WeaponA2',
                    })
                  ),
                  /* @__PURE__ */ import_react6.default.createElement(
                    'div',
                    {
                      style: { display: 'flex', flexDirection: 'row', gap: 5 },
                    },
                    /* @__PURE__ */ import_react6.default.createElement(Item, {
                      equipment,
                      equipmentById,
                      slot: 'WeaponB1',
                    }),
                    /* @__PURE__ */ import_react6.default.createElement(Item, {
                      equipment,
                      equipmentById,
                      slot: 'WeaponB2',
                    })
                  )
                )
              )
            ),
            character.skills
              ? /* @__PURE__ */ import_react6.default.createElement(
                  import_react6.default.Fragment,
                  null,
                  /* @__PURE__ */ import_react6.default.createElement(Title_default, null, 'Skills'),
                  /* @__PURE__ */ import_react6.default.createElement(
                    'div',
                    {
                      style: { display: 'flex', flexDirection: 'row', gap: 5, justifyContent: 'center' },
                    },
                    /* @__PURE__ */ import_react6.default.createElement(Skill, {
                      skills,
                      id: (_b = character.skills[gamemode]) == null ? void 0 : _b.heal,
                    }),
                    /* @__PURE__ */ import_react6.default.createElement(Skill, {
                      skills,
                      id: (_c = character.skills[gamemode]) == null ? void 0 : _c.utilities[0],
                    }),
                    /* @__PURE__ */ import_react6.default.createElement(Skill, {
                      skills,
                      id: (_d = character.skills[gamemode]) == null ? void 0 : _d.utilities[1],
                    }),
                    /* @__PURE__ */ import_react6.default.createElement(Skill, {
                      skills,
                      id: (_e = character.skills[gamemode]) == null ? void 0 : _e.utilities[2],
                    }),
                    /* @__PURE__ */ import_react6.default.createElement(Skill, {
                      skills,
                      id: (_f = character.skills[gamemode]) == null ? void 0 : _f.elite,
                    })
                  )
                )
              : null,
            character.specializations
              ? /* @__PURE__ */ import_react6.default.createElement(
                  import_react6.default.Fragment,
                  null,
                  /* @__PURE__ */ import_react6.default.createElement(Title_default, null, 'Traits'),
                  (_g = character.specializations[gamemode]) == null
                    ? void 0
                    : _g.map((spec) => {
                        var _a2
                        return /* @__PURE__ */ import_react6.default.createElement(
                          'div',
                          {
                            key: spec.id,
                          },
                          /* @__PURE__ */ import_react6.default.createElement(
                            'div',
                            {
                              style: { display: 'flex', flexDirection: 'row', gap: 5, justifyContent: 'center' },
                            },
                            /* @__PURE__ */ import_react6.default.createElement(
                              'div',
                              {
                                style: { flex: 1 },
                              },
                              (_a2 = specializations.get(spec.id)) == null ? void 0 : _a2.name
                            ),
                            /* @__PURE__ */ import_react6.default.createElement(
                              'div',
                              {
                                style: {
                                  display: 'flex',
                                  flexDirection: 'row',
                                  gap: 5,
                                  justifyContent: 'center',
                                  flex: 2,
                                },
                              },
                              spec.traits.map((t) =>
                                /* @__PURE__ */ import_react6.default.createElement(Trait, {
                                  key: t,
                                  traits,
                                  id: t,
                                })
                              )
                            )
                          )
                        )
                      })
                )
              : null,
            /* @__PURE__ */ import_react6.default.createElement(
              'button',
              {
                style: {
                  textAlign: 'right',
                  fontSize: '0.7rem',
                  position: 'absolute',
                  bottom: 4,
                  left: '50%',
                  transform: 'translateX(-50%)',
                  opacity: 0.8,
                  cursor: 'copy',
                  padding: '1px 2px',
                  lineHeight: '0.7rem',
                },
                onClick: copy,
              },
              copied ? 'Copied!' : 'Copy Build Template'
            )
          )
        : /* @__PURE__ */ import_react6.default.createElement(
            'div',
            {
              style: { display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' },
            },
            config.broadcaster.apiKey ? 'Loading' : 'Not configured'
          )
    )
  }

  // src/components/primitives/ErrorBoundary.tsx
  var import_react7 = __toModule(require_react())
  function FallbackComponent(props) {
    console.info(props)
    return /* @__PURE__ */ import_react7.default.createElement(
      'div',
      {
        style: {
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          flexDirection: 'column',
          textAlign: 'center',
        },
      },
      /* @__PURE__ */ import_react7.default.createElement('p', null, 'An error has occured'),
      /* @__PURE__ */ import_react7.default.createElement('p', null, 'Error ID: ', props.eventId),
      /* @__PURE__ */ import_react7.default.createElement(
        'a',
        null,
        'Get in contact with me on',
        ' ',
        /* @__PURE__ */ import_react7.default.createElement(
          'a',
          {
            style: { color: 'var(--color-mesmer)' },
            href: 'https://reddit.com/user/Maael',
            target: '_blank',
            rel: 'noreferrer',
          },
          'Reddit'
        ),
        ' ',
        'or email me'
      )
    )
  }
  var ErrorBoundary2 = ({ children }) =>
    /* @__PURE__ */ import_react7.default.createElement(
      ErrorBoundary,
      {
        fallback: FallbackComponent,
      },
      children
    )
  var ErrorBoundary_default = ErrorBoundary2

  // src/util/constants.ts
  var VERSION = '1.0.1'

  // src/mounts/panel.tsx
  console.info('[mount] Panel')
  try {
    init2({
      dsn: 'https://0ab1a10c55b14007992ed1217eb9e9e9@o304997.ingest.sentry.io/5845657',
      integrations: [new Integrations.BrowserTracing()],
      tracesSampleRate: 1,
      release: VERSION,
      environment: 'production',
    })
  } catch (e) {
    console.error('[sentry]', e)
  }
  import_react_dom.default.render(
    /* @__PURE__ */ import_react8.default.createElement(
      ErrorBoundary_default,
      null,
      /* @__PURE__ */ import_react8.default.createElement(
        Twitch_default,
        null,
        /* @__PURE__ */ import_react8.default.createElement(Index, null)
      )
    ),
    document.querySelector('#app')
  )
})()
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
